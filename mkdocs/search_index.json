{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to \nScorocode\n cloud service documentation.\n\n\nThe documentation contains:\n\n\n\n\na description of how to use the personal account, applications and data\n\n\nHTTP API documentation for implementing the cloud service on any platform\n\n\nSDK documentation: WEB server/client (\nJavaScript SDK\n), iOS/Mac OS (\nSwift SDK\n), Android (\nJava SDK\n).\n\n\n\n\n\n\nSource codes\n\n\nSource codes for all SDKs and documentation are openly available on \nGitHub\n. We would be very happy to receive any comments, modifications and suggestions for each repository.\n\n\n\n\nTo go to the relevant documentation section, select it in the menu on the left.\n\n\nGeneral info\n\n\nScorocode\n is a cloud platform providing BaaS (Backend as a Service) functions. With \nScorocode\n, you can quickly create a data structure by using visual modelling for collections and fields, connect event triggers for data, develop and start server JavaScript code from client applications according to a schedule.\n\n\nKey features of the service:\n\n\n\n\nFull-scale platform for backend design, free option for small applications;\n\n\nAvailability of ready backend functions: sending emails, SMS and push notifications, file storage, server scripts, etc;\n\n\nProviding statistics and analytics for applications 24x7;\n\n\nManagement of users and application access levels, collections and documents;\n\n\nDocumentation, platform use cases and SDKs in English;\n\n\n\n\nScorocode\n offers a wide range of features for connecting projects to cloud backend:\n\n\n\n\nREST API\n\n\nJavaScript SDK for web applications \u2013 both client and server parts\n\n\nSwift SDK for developing applications on iOS and Mac OS X platforms\n\n\nJava SDK for developing Android-based applications\n\n\n\n\nScorocode\n allows you to import data from the \nParse\n cloud service.\n\n\nThe list of \nScorocode\n features and supported platforms is steadily growing.\n\n\nUsers\n\n\nScorocode\n users are:\n\n\n\n\nIndividual developers\n\n\nProfessional developers and developer teams\n\n\nSystem integrators\n\n\nCorporate clients\n\n\n\n\nFor individual developers, \nScorocode\n is a technically simple, reasonably priced and documented solution for trying out their abilities in the application development area and for creating and quickly modifying the backend for applications. \nScorocode\n provides professional developers and developer teams with the ability to support modern services (social networks, payment systems, etc.) and a transparent pricing model to calculate development and maintenance costs. For corporate users, \nScorocode\n offers analytical tools to improve the efficiency of applications and marketing, as well as a uniform platform for simultaneous development of several projects.", 
            "title": "General info"
        }, 
        {
            "location": "/#general-info", 
            "text": "Scorocode  is a cloud platform providing BaaS (Backend as a Service) functions. With  Scorocode , you can quickly create a data structure by using visual modelling for collections and fields, connect event triggers for data, develop and start server JavaScript code from client applications according to a schedule.", 
            "title": "General info"
        }, 
        {
            "location": "/#key-features-of-the-service", 
            "text": "Full-scale platform for backend design, free option for small applications;  Availability of ready backend functions: sending emails, SMS and push notifications, file storage, server scripts, etc;  Providing statistics and analytics for applications 24x7;  Management of users and application access levels, collections and documents;  Documentation, platform use cases and SDKs in English;   Scorocode  offers a wide range of features for connecting projects to cloud backend:   REST API  JavaScript SDK for web applications \u2013 both client and server parts  Swift SDK for developing applications on iOS and Mac OS X platforms  Java SDK for developing Android-based applications   Scorocode  allows you to import data from the  Parse  cloud service.  The list of  Scorocode  features and supported platforms is steadily growing.", 
            "title": "Key features of the service:"
        }, 
        {
            "location": "/#users", 
            "text": "Scorocode  users are:   Individual developers  Professional developers and developer teams  System integrators  Corporate clients   For individual developers,  Scorocode  is a technically simple, reasonably priced and documented solution for trying out their abilities in the application development area and for creating and quickly modifying the backend for applications.  Scorocode  provides professional developers and developer teams with the ability to support modern services (social networks, payment systems, etc.) and a transparent pricing model to calculate development and maintenance costs. For corporate users,  Scorocode  offers analytical tools to improve the efficiency of applications and marketing, as well as a uniform platform for simultaneous development of several projects.", 
            "title": "Users"
        }, 
        {
            "location": "/main/main1/", 
            "text": "Please register to start using the Scorocode service. Enter your name and email address on the \nregistration page\n.\n\n\n\n\nAfter successful registration, enter the developer's personal account (My account). We will send your login password by email to the address that you provided during registration. You can change the password issued by the system through the user settings section in your personal account.\n\n\nTo enter the platform's member area, use the Login link in the main menu on the Home page. Enter the username (email address) that you provided during registration and your password. If you enter an incorrect password three times, the system will ask you to enter captcha text. If you forget your password, click the Forgot Password link. In the next window, enter your registration email address. We will send you information on how to reset your password to this address.", 
            "title": "Get started"
        }, 
        {
            "location": "/main/main2/", 
            "text": "The developer's personal account contains the following sections:\n\n\n\n\nuser settings and system notifications for the user;\n\n\napplications;\n\n\ndocumentation.\n\n\n\n\nAfter logging in, you will see the Applications page.\n\n\n\n\nUser settings and system notifications for the user\n\n\nTo go to the user settings and system notifications section, click the email address in the name of your personal account. The user settings and system notifications page contains the following sections:\n\n\n\n\nNotifications;\n\n\nPersonal information;\n\n\nChange password;\n\n\nOrganization;\n\n\nBalance.\n\n\n\n\nBy default, you will see the Notifications section.\n\n\n\n\nNotifications\n\n\nA list of system notifications can be seen in the Notifications section of the User settings and system notifications page of your personal account. To remove a system notification, click Delete.\n\n\nPersonal information\n\n\nIn the personal information section, you can enter (edit) your personal data: username and phone number. The email address used for your account cannot be edited.\n\n\n\n\nClick Save Changes to save your changes.\n\n\nChange password\n\n\nGo the Change Password section to change your password. Use this function to change the password that was generated by the system during registration.\n\n\n\n\nYour new password must be at least 6 characters long. To save your new password, click the Change password button.\n\n\nOrganization\n\n\n\n\nEnter information about your organization in the Organization section. This information is used for preparing contracts, invoices for bank transfer payments, certificates and other accounting documents.\n\n\nClick Save Changes to save the entered information.\n\n\nBalance\n\n\nThe Balance section contains information about your current balance, as well as the details of your receipts and expenses.\n\n\n\n\nYou can use the Balance section to top up your current balance with your bank card. To do this, enter the top up in Rubles and click the Pay by Card button. Enter the payment details in the form that appears. Follow the payment service instructions. You can also top up your account by bank transfer if your organization's details have been entered. Click Export to create your account statement.", 
            "title": "My account"
        }, 
        {
            "location": "/main/main2/#user-settings-and-system-notifications-for-the-user", 
            "text": "To go to the user settings and system notifications section, click the email address in the name of your personal account. The user settings and system notifications page contains the following sections:   Notifications;  Personal information;  Change password;  Organization;  Balance.   By default, you will see the Notifications section.", 
            "title": "User settings and system notifications for the user"
        }, 
        {
            "location": "/main/main2/#notifications", 
            "text": "A list of system notifications can be seen in the Notifications section of the User settings and system notifications page of your personal account. To remove a system notification, click Delete.", 
            "title": "Notifications"
        }, 
        {
            "location": "/main/main2/#personal-information", 
            "text": "In the personal information section, you can enter (edit) your personal data: username and phone number. The email address used for your account cannot be edited.   Click Save Changes to save your changes.", 
            "title": "Personal information"
        }, 
        {
            "location": "/main/main2/#change-password", 
            "text": "Go the Change Password section to change your password. Use this function to change the password that was generated by the system during registration.   Your new password must be at least 6 characters long. To save your new password, click the Change password button.", 
            "title": "Change password"
        }, 
        {
            "location": "/main/main2/#organization", 
            "text": "Enter information about your organization in the Organization section. This information is used for preparing contracts, invoices for bank transfer payments, certificates and other accounting documents.  Click Save Changes to save the entered information.", 
            "title": "Organization"
        }, 
        {
            "location": "/main/main2/#balance", 
            "text": "The Balance section contains information about your current balance, as well as the details of your receipts and expenses.   You can use the Balance section to top up your current balance with your bank card. To do this, enter the top up in Rubles and click the Pay by Card button. Enter the payment details in the form that appears. Follow the payment service instructions. You can also top up your account by bank transfer if your organization's details have been entered. Click Export to create your account statement.", 
            "title": "Balance"
        }, 
        {
            "location": "/app/app/", 
            "text": "To go to the applications page, click the Applications link in the upper menu in My account. This page opens by default after you log in. This page displays widgets of previously created applications, as well as a widget for creating a new application.\n\n\nTo create a new application, click the mouse in the New Application widget area. Enter the name of the new application in the entry field and click Create. You can enter any characters in the application name field.\n\n\n\n\nThe widget for previously created applications has a name and a menu containing icons of functions:\n\n\n\n\n\n\nAnalytics\n\n\nData\n\n\nServerside code\n\n\nBots\n\n\nSettings\n\n\n\n\nThe empty application widget has the New Application name and does not have a functional menu.", 
            "title": "Working with application"
        }, 
        {
            "location": "/app/app1/", 
            "text": "Application analytics is statistical information on the application's use and a list of system notifications related to the application. Application usage statistics are presented as diagrams in the respective widgets. A specific set of included/excluded elements can be presented for each diagram. To include/exclude a selected element, click the icon with its name.\n\n\nThe following widgets can be found on the page:\n\n\nNotifications\n\n\nList of application-related system notifications To remove a notification from the list of application notifications, use the Delete link.\n\n\nData size\n\n\nThe diagram displays the disk space occupied by the application.\n\n\n\n\nData \u2013 the disk space occupied by data in the application's collections.\n\n\nIndexes \u2013 the disk space occupied by indexes created in the application's collections.\n\n\nFiles \u2013 the disk space occupied by a project's files (only links to these files are stored in the DB area, while the files themselves are stored in a separate cloud data warehouse).\n\n\nAvailable \u2013 the disk space available in accordance with the rate plan.\n\n\n\n\nUsers\n\n\nNumber of users in the application's users collection. Number of application's developers specified in the Settings section.\n\n\nTotal number of queries\n\n\nThis graph displays the total number of queries for a specific period with regard to data in the application's collections.\n\n\nAndroid, iOS, JavaScript, WinPhone\n\n\nThe number of application queries from the respective platform for a specific period. Queries can be filtered by types specified on the diagram.\n\n\nTriggers\n\n\nThe number of application queries from data triggers for a specific period. Queries can be filtered by types specified on the diagram.", 
            "title": "Application analytics"
        }, 
        {
            "location": "/app/app2/", 
            "text": "The Data functional tab contains the list of collections and a set of instruments for application collection management. The newly created application page contains 3 system collections:\n\n\n\n\nroles;\n\n\nusers;\n\n\ndevices.\n\n\n\n\nSystem collections cannot be deleted. By default, the users collection of the application is selected. Each collection has the following set of management tools:\n\n\n\n\nData\n\n\nSettings\n\n\nIndexes\n\n\nTriggers\n\n\n\n\nCollection data\n\n\nBy default, the Data tab is active for a selected collection.\n\n\n\n\nEach collection is displayed in the form of a table with a set of fields (table columns) that contains the collection's documents. System fields that cannot be deleted are automatically created in the documents of each collection:\n\n\n\n\nid - unique document identifier\n\n\n*ACL - three ACL (access control list) type fields that define permissions to read (readACL), update (updateACL) and remove (removeACL) a document;\n\n\ncreatedAt \u2013 document creation date and time;\n\n\nupdatedAt \u2013 date and time the document was last updated\n\n\n\n\nFields \"id\", \"createdAt\" and \"updatedAt\" cannot be edited; their values are automatically set by the system.\n\n\nAdding a document to a collection\n\n\nTo create a new document in a collection, click the Add document link. Then, click the icon of the newly created table record and save the new document. The following fields will be automatically populated in the new document: id, createdAt, and updatedAt.\n\n\n\n\nRemoving a document from a collection\n\n\nTo remove documents from a collection, select them in the table using the checkboxes and click the Delete link. To enter a value for an editable field in the selected document, double-click in its area of the table. Enter one or several comma-separated values.\n\n\nACL fields\n\n\nACL fields can only contain user identifier values from the users collection and role identifiers from the roles collection up to 10 characters long and an asterisk (*). \n\n\n\n\nAnonymous access\n\n\nUsing the asterisk specifies that the function is available for all users of the Users and Roles collections as well as unauthenticated (anonymous) users in case if anonymous access is allowed in the application's security settings.\n\n\n\n\n\n\nWhen working with a widget you can use the filter \"Show only selected documents\", as well as a text search on the following fields:\n\n\n\n\nFor \nroles\n tab: \"_id\", \"name\".\n\n\nFor \nusers\n tab: \"_id\", \"username\", \"email\"\n\n\n\n\n\n\nNotice\n\n\nSearch is case-sensitive\n\n\n\n\nAdding a field\n\n\nTo add a field to a document, click the Add field link.\n\n\n\n\nEnter the field name (Latin letters and digits) and choose the field type from the following list:\n\n\n\n\nDate \u2013 date/time\n\n\nBoolean \u2013 true/false logical value\n\n\nString\n\n\nFile\n\n\nNumber\n\n\nPassword \u2013 string digest using the md5 algorithm\n\n\nArray \u2013 an arbitrary data array\n\n\nObject \u2013 an object consisting of \"key\" pairs: \n\n\nRelation \u2013 an array of identifiers of documents from another collection\n\n\nPointer \u2013 identifier of a document from another collection\n\n\n\n\nField names should not be the same within a single collection. To save the entered data, click the Add field button. The new field will be added to the end of the table.\n\n\nFilter\n\n\nUse the Filter link to search for documents in a collection. In the popup window, choose a set of fields from the displayed list and specify a logical condition and value for the filter.\n\n\n\n\nWhen choosing several filter condition fields, they will be combined based on the \"AND\" condition.\n\n\nCollection settings\n\n\nTo configure a collection, select it in the list and go to the Settings tab.\n\n\n\n\nTo use the ACL access mechanism specified in the description of a collection's document, check the \"Use document ACL\" field. Otherwise, ACL access of the collection's documents will be ignored.\n\n\nEnter the validity period for the file links in the cloud in seconds. This parameter defines the lifetime of the generated temporary link to the file which is retrieved when calling through the API. By default, the link is valid for 120 seconds.\n\n\nEnter the users and/or roles that have access rights to create, read, edit and remove a selected collection. To add users and/or roles, use the Add link and enter the user id or roles.\n\n\nTo grant anonymous users access to create, read, edit and remove a collection's document, select the appropriate option for the Anonymous users record.", 
            "title": "Application data"
        }, 
        {
            "location": "/app/app2/#collection-data", 
            "text": "By default, the Data tab is active for a selected collection.   Each collection is displayed in the form of a table with a set of fields (table columns) that contains the collection's documents. System fields that cannot be deleted are automatically created in the documents of each collection:   id - unique document identifier  *ACL - three ACL (access control list) type fields that define permissions to read (readACL), update (updateACL) and remove (removeACL) a document;  createdAt \u2013 document creation date and time;  updatedAt \u2013 date and time the document was last updated   Fields \"id\", \"createdAt\" and \"updatedAt\" cannot be edited; their values are automatically set by the system.", 
            "title": "Collection data"
        }, 
        {
            "location": "/app/app2/#adding-a-document-to-a-collection", 
            "text": "To create a new document in a collection, click the Add document link. Then, click the icon of the newly created table record and save the new document. The following fields will be automatically populated in the new document: id, createdAt, and updatedAt.", 
            "title": "Adding a document to a collection"
        }, 
        {
            "location": "/app/app2/#removing-a-document-from-a-collection", 
            "text": "To remove documents from a collection, select them in the table using the checkboxes and click the Delete link. To enter a value for an editable field in the selected document, double-click in its area of the table. Enter one or several comma-separated values.", 
            "title": "Removing a document from a collection"
        }, 
        {
            "location": "/app/app2/#acl-fields", 
            "text": "ACL fields can only contain user identifier values from the users collection and role identifiers from the roles collection up to 10 characters long and an asterisk (*).    Anonymous access  Using the asterisk specifies that the function is available for all users of the Users and Roles collections as well as unauthenticated (anonymous) users in case if anonymous access is allowed in the application's security settings.    When working with a widget you can use the filter \"Show only selected documents\", as well as a text search on the following fields:   For  roles  tab: \"_id\", \"name\".  For  users  tab: \"_id\", \"username\", \"email\"    Notice  Search is case-sensitive", 
            "title": "ACL fields"
        }, 
        {
            "location": "/app/app2/#adding-a-field", 
            "text": "To add a field to a document, click the Add field link.   Enter the field name (Latin letters and digits) and choose the field type from the following list:   Date \u2013 date/time  Boolean \u2013 true/false logical value  String  File  Number  Password \u2013 string digest using the md5 algorithm  Array \u2013 an arbitrary data array  Object \u2013 an object consisting of \"key\" pairs:   Relation \u2013 an array of identifiers of documents from another collection  Pointer \u2013 identifier of a document from another collection   Field names should not be the same within a single collection. To save the entered data, click the Add field button. The new field will be added to the end of the table.", 
            "title": "Adding a field"
        }, 
        {
            "location": "/app/app2/#filter", 
            "text": "Use the Filter link to search for documents in a collection. In the popup window, choose a set of fields from the displayed list and specify a logical condition and value for the filter.   When choosing several filter condition fields, they will be combined based on the \"AND\" condition.", 
            "title": "Filter"
        }, 
        {
            "location": "/app/app2/#collection-settings", 
            "text": "To configure a collection, select it in the list and go to the Settings tab.   To use the ACL access mechanism specified in the description of a collection's document, check the \"Use document ACL\" field. Otherwise, ACL access of the collection's documents will be ignored.  Enter the validity period for the file links in the cloud in seconds. This parameter defines the lifetime of the generated temporary link to the file which is retrieved when calling through the API. By default, the link is valid for 120 seconds.  Enter the users and/or roles that have access rights to create, read, edit and remove a selected collection. To add users and/or roles, use the Add link and enter the user id or roles.  To grant anonymous users access to create, read, edit and remove a collection's document, select the appropriate option for the Anonymous users record.", 
            "title": "Collection settings"
        }, 
        {
            "location": "/app/app3/", 
            "text": "You can create indexes for collection fields in the Indexes tab. To create an index, click the Create button. In the window that appears, enter the index name (Latin letters and digits), then select the collection fields in the list. Choose how to sort the selected field (1 \u2013 ascending, -1 \u2013 descending). To create a compound index consisting of several fields, click the Add link. You can remove a field from an index by clicking the Remove link.\n\n\n\n\n\n\nOnce the index is saved, it will appear in the index list of the application's collection, and the index creation process will begin.\n\n\n\n\nData\n\n\nIndexes considerably increase the disk space occupied by data.", 
            "title": "Indexes"
        }, 
        {
            "location": "/app/app4/", 
            "text": "On the Triggers tab, you can create descriptions for standard triggers.\n\n\n\n\nTriggers are Java scripts that are executed when specific operations are performed with respect to data. All triggers are closed and have a local context. Select a trigger from the presented descriptions below and enter its description in the corresponding window. To save the entered description, click Save. To activate the created trigger, enable the Activate parameter. The trigger will not function without this parameter enabled.\n\n\nWhen executing a trigger, the following objects are created in its context: \nDataManager\n and \npool\n.\n\n\n\n\nTrigger execution time\n\n\nMaximum execution time for each trigger is 500 milliseconds.\n\n\n\n\n\n\nStack limit\n\n\nMaximum depth of triggers calling stack is 10.\nExample:\nIf you execute the \"insert\" operation for the same collection after the \"insert\" operation in the trigger, 10 documents will be inserted. After this, the call chain will be suspended.\n\n\n\n\n\n\nOperations interruption/execution due to a trigger\n\n\nWhen running triggers \nbefore\n operations \"insert\", \"update\" and \"delete\", you need to execute \nreturn true\n to continue the document operations, and \nreturn false\n to interrupt them. The default result for a trigger is \nfalse\n if it doesn't return the value. \n\n\n\n\n\n\nReturning data when trigger operations are interrupted\n\n\nIn case there is a need to return data when a trigger operation was interrupted, you can specify data that needs to be returned in \npool.result\nparameter.\nFor example, inside a trigger you can create a field validation for a mandatory value before adding a document.\n\n\nif (!pool.doc.hasOwnProperty('name')) {  // check if pool.doc does not have property \nname\n\n    pool.result = \nYou Shall Not Pass\n;  \n    return false;                        // interrupt document creation\n}; \nreturn true;    // else - create the document\n\nNow when we try to create a document with an empty field value for \nname\n, the operation will be interrupted and the following data will be returned: \n\n\n{\n    \nerrCode\n: 412,\n    \nerrMsg\n: \nbeforeInsert Trigger result: false\n,\n    \nerror\n: true,\n    \nresult\n: \nYou Shall Not Pass\n\n}\n\n\n\n\n\npool Object\n\n\nObject \npool\n contains the following data:\n\n\nBefore operation \ninsert\n:\n\n\n{\n    coll : \n, // collection name\n    doc : {}   // document with field_name:value pairs\n}\n\n\n\nAfter operation \ninsert\n:\n\n\n{\n    coll : \n,   // collection name\n    newDoc : {}  // newly created document with field_name:value pairs\n}\n\n\n\nBefore operation \nremove\n:\n\n\n{\n    coll : \n,  // collection name\n    query : {}  // search query on the basis of which documents should be removed\n}\n\n\n\nAfter operation \nremove\n:\n\n\n{\n    coll : \n,  // collection name\n    count : int, // number of removed documents\n    docs  : []  // array of deleted document IDs\n\n\n\nBefore operation \nupdate\n:\n\n\n{\n    coll : \n,  // collection name\n    doc   : {}, // document with value update rules\n    query : {}  // search query on the basis of which documents should be updated\n}\n\n\n\nAfter operation \nupdate\n:\n\n\n{\n    coll : \n, // collection name\n    count : int, // number of updated documents\n    docs  : []  // array of updated document IDs\n}\n\n\n\nBefore operation \nupdatebyid\n:\n\n\n{\n    coll        : \n, // collection name\n    doc         : {}, // document with value update rules\n    query       : {}, // search query {\n_id\n : }\n}\n\n\n\nAfter operation \nupdatebyid\n:\n\n\n{\n    coll        : \n, // collection name\n    newDoc      : { } // updated document\n}\n\n\n\nDataManager Object\n\n\nThe \nDataManager\n object contains the following data handling methods:\n\n\nDataManager.Insert(data Object)\n\n\nMethod for inserting a document into a collection. Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    coll : \n, // collection name, mandatory\n    doc  : {}  // document with field_name:value pairs, optional\n}\n\n\n\nReturned value \u2013 \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false,\n    result : {}     // created document\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nDataManager.Remove(data Object)\n\n\nMethod for removing documents from collection. Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    coll  : \n, // collection name, mandatory\n    query : {}, // query with field_name/operator:value pairs, optional\n    limit : int // limit for the number of documents to be removed, optional,\n                // if not specified, the first 1,000 documents will be removed\n}\n\n\n\nReturned value \u2013 \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false,\n    result : {\n        count : int, // number of removed documents\n        docs  : []  // array of removed document IDs\n    }\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nDataManager.Update(data Object)\n\n\nMethod for updating documents in a collection. Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    coll  : \n, // collection name, mandatory\n    query : {}, // query with field_name/operator:value pairs, optional\n    doc   : {}, // document with field_name:value pairs, mandatory\n    limit : int // limit for the number of documents to be updated, optional,\n                // if not specified, the first 1,000 documents will be updated\n}\n\n\n\nReturned value \u2013 \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false,\n    result : {\n        count : int, // number of removed documents\n        docs  : []  // array of updated document IDs\n    }\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nDataManager.UpdateById(data Object)\n\n\nMethod for updating one document in a collection which is identified by its ID. Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    coll  : \n, // collection name, mandatory\n    query : {}, // query in the following format: \n_id\n : \ndocument identifier\n, mandatory\n    doc   : {}  // document with field_name:value pairs, mandatory\n}\n\n\n\nReturned value - \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false,\n    result : {} // updated document\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nDataManager.Find(data Object)\n\n\nMethod for requesting a document from a collection. Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    coll   : \n, // collection name, mandatory\n    query  : {}, // query with field_name/operator:value pairs, optional if empty\n                 // then first 100 documents will be returned\n    sort   : {}, // sorting by fields in format field_name:1/-1, optional\n    fields : [], // list of field names that will be returned in each document, optional\n    limit  : int,// limit of the sample size, by default, 50\n    skip   : int // number of documents to be skipped in the sample\n}\n\n\n\n\nReturned value \u2013 \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false,\n    result : [] // array of selected documents taking into account the limit\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nDataManager.Count(data Object)\n\n\nMethod for requesting the number of documents in a collection Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    coll  : \n, // collection name, mandatory\n    query : {}  // query with field_name/operator:value pairs, optional\n}\n\n\n\nReturned value \u2013 \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false,\n    result : int // number of documents\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nDataManager.RunScript(data Object)\n\n\nA method that runs a server-side script. Parameters:\n\n\ndata Object\n - object containing the following attributes:\n\n\n{\n    script   : \n, // script identifier, mandatory\n    pool     : {}  // object with the data that will be passed to the server-side script, optional\n}\n\n\n\nReturned value \u2013 \nObject\n:\n\n\nSuccess\n\n\n{\n    error  : false\n}\n\n\n\nError\n\n\n{\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  : \nError text\n\n}\n\n\n\nTrigger examples\n\n\nSetting a field value as mandatory.\n\n\nBefore adding a document you can check whether a value is specified in the \"name\" field. In case it is not, you can interrupt the operation of adding the document.\n\n\nif (!pool.doc.hasOwnProperty('name')) {   \n        return false;                     // if name is not specified then document creation will be interrupted\n    } else {\n        return true;                      \n    };\n\n\n\nSetting a default value.\n\n\nBefore adding a document you can check whether a value is specified in the \"name\" field. In case it is not, you can set the value as a default one.\n\n\nif (!pool.doc.hasOwnProperty('name')) { \n        pool.doc.name = \nJohn Snow\n;    // if not specified, name is now \nJohn Snow\n dy default \n    }\n\nreturn true;                    \n\n\n\nCreating a document related in a different collection.\n\n\nAfter adding a document, you can create another document in a different collection with a link to the added one.\n\n\nDataManager.Insert({                           // create new document in the \nstuff\n collection\n        coll : \nstuff\n,\n        doc  : {\n                   \nthing\n: pool.newDoc._id    // pass _id value to the new document's field \nthing\n\n        }\n    })\n\n\n\nDeleting related documents from a different collection.\n\n\nBefore deleting a document, you can delete all documents from a different collection with a link to the document you want to delete.\n\n\nDataManager.Remove({                           //  delete all related documents in the \nstuff\n collection\n    coll  : \nstuff\n,\n    query: {\n        \nthing\n: pool.query._id                // pass _id to the document which is about to be deleted\n    }\n})\nreturn true;\n\n\n\nRunning a server-side script from a trigger.\n\n\nAfter a document is created, a script can be executed with the new document data. As an example, the script can send PUSH-notifications.\n\n\nDataManager.RunScript({                   // run a script with the ID 580b386d42d52f1ba275fc24\n    script  : \n580b386d42d52f1ba275fc24\n,\n    pool: {\n        \ndoc\n: pool.newDoc                // pass a new document to the script \n    }\n})", 
            "title": "Triggers"
        }, 
        {
            "location": "/app/app4/#pool-object", 
            "text": "Object  pool  contains the following data:", 
            "title": "pool Object"
        }, 
        {
            "location": "/app/app4/#before-operation-insert", 
            "text": "{\n    coll :  , // collection name\n    doc : {}   // document with field_name:value pairs\n}", 
            "title": "Before operation insert:"
        }, 
        {
            "location": "/app/app4/#after-operation-insert", 
            "text": "{\n    coll :  ,   // collection name\n    newDoc : {}  // newly created document with field_name:value pairs\n}", 
            "title": "After operation insert:"
        }, 
        {
            "location": "/app/app4/#before-operation-remove", 
            "text": "{\n    coll :  ,  // collection name\n    query : {}  // search query on the basis of which documents should be removed\n}", 
            "title": "Before operation remove:"
        }, 
        {
            "location": "/app/app4/#after-operation-remove", 
            "text": "{\n    coll :  ,  // collection name\n    count : int, // number of removed documents\n    docs  : []  // array of deleted document IDs", 
            "title": "After operation remove:"
        }, 
        {
            "location": "/app/app4/#before-operation-update", 
            "text": "{\n    coll :  ,  // collection name\n    doc   : {}, // document with value update rules\n    query : {}  // search query on the basis of which documents should be updated\n}", 
            "title": "Before operation update:"
        }, 
        {
            "location": "/app/app4/#after-operation-update", 
            "text": "{\n    coll :  , // collection name\n    count : int, // number of updated documents\n    docs  : []  // array of updated document IDs\n}", 
            "title": "After operation update:"
        }, 
        {
            "location": "/app/app4/#before-operation-updatebyid", 
            "text": "{\n    coll        :  , // collection name\n    doc         : {}, // document with value update rules\n    query       : {}, // search query { _id  : }\n}", 
            "title": "Before operation updatebyid:"
        }, 
        {
            "location": "/app/app4/#after-operation-updatebyid", 
            "text": "{\n    coll        :  , // collection name\n    newDoc      : { } // updated document\n}", 
            "title": "After operation updatebyid:"
        }, 
        {
            "location": "/app/app4/#datamanager-object", 
            "text": "The  DataManager  object contains the following data handling methods:", 
            "title": "DataManager Object"
        }, 
        {
            "location": "/app/app4/#datamanagerinsertdata-object", 
            "text": "Method for inserting a document into a collection. Parameters:  data Object  - object containing the following attributes:  {\n    coll :  , // collection name, mandatory\n    doc  : {}  // document with field_name:value pairs, optional\n}  Returned value \u2013  Object :  Success  {\n    error  : false,\n    result : {}     // created document\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.Insert(data Object)"
        }, 
        {
            "location": "/app/app4/#datamanagerremovedata-object", 
            "text": "Method for removing documents from collection. Parameters:  data Object  - object containing the following attributes:  {\n    coll  :  , // collection name, mandatory\n    query : {}, // query with field_name/operator:value pairs, optional\n    limit : int // limit for the number of documents to be removed, optional,\n                // if not specified, the first 1,000 documents will be removed\n}  Returned value \u2013  Object :  Success  {\n    error  : false,\n    result : {\n        count : int, // number of removed documents\n        docs  : []  // array of removed document IDs\n    }\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.Remove(data Object)"
        }, 
        {
            "location": "/app/app4/#datamanagerupdatedata-object", 
            "text": "Method for updating documents in a collection. Parameters:  data Object  - object containing the following attributes:  {\n    coll  :  , // collection name, mandatory\n    query : {}, // query with field_name/operator:value pairs, optional\n    doc   : {}, // document with field_name:value pairs, mandatory\n    limit : int // limit for the number of documents to be updated, optional,\n                // if not specified, the first 1,000 documents will be updated\n}  Returned value \u2013  Object :  Success  {\n    error  : false,\n    result : {\n        count : int, // number of removed documents\n        docs  : []  // array of updated document IDs\n    }\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.Update(data Object)"
        }, 
        {
            "location": "/app/app4/#datamanagerupdatebyiddata-object", 
            "text": "Method for updating one document in a collection which is identified by its ID. Parameters:  data Object  - object containing the following attributes:  {\n    coll  :  , // collection name, mandatory\n    query : {}, // query in the following format:  _id  :  document identifier , mandatory\n    doc   : {}  // document with field_name:value pairs, mandatory\n}  Returned value -  Object :  Success  {\n    error  : false,\n    result : {} // updated document\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.UpdateById(data Object)"
        }, 
        {
            "location": "/app/app4/#datamanagerfinddata-object", 
            "text": "Method for requesting a document from a collection. Parameters:  data Object  - object containing the following attributes:  {\n    coll   :  , // collection name, mandatory\n    query  : {}, // query with field_name/operator:value pairs, optional if empty\n                 // then first 100 documents will be returned\n    sort   : {}, // sorting by fields in format field_name:1/-1, optional\n    fields : [], // list of field names that will be returned in each document, optional\n    limit  : int,// limit of the sample size, by default, 50\n    skip   : int // number of documents to be skipped in the sample\n}  Returned value \u2013  Object :  Success  {\n    error  : false,\n    result : [] // array of selected documents taking into account the limit\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.Find(data Object)"
        }, 
        {
            "location": "/app/app4/#datamanagercountdata-object", 
            "text": "Method for requesting the number of documents in a collection Parameters:  data Object  - object containing the following attributes:  {\n    coll  :  , // collection name, mandatory\n    query : {}  // query with field_name/operator:value pairs, optional\n}  Returned value \u2013  Object :  Success  {\n    error  : false,\n    result : int // number of documents\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.Count(data Object)"
        }, 
        {
            "location": "/app/app4/#datamanagerrunscriptdata-object", 
            "text": "A method that runs a server-side script. Parameters:  data Object  - object containing the following attributes:  {\n    script   :  , // script identifier, mandatory\n    pool     : {}  // object with the data that will be passed to the server-side script, optional\n}  Returned value \u2013  Object :  Success  {\n    error  : false\n}  Error  {\n    error   : true,\n    errCode : 4XX/5XX, // Error code\n    errMsg  :  Error text \n}", 
            "title": "DataManager.RunScript(data Object)"
        }, 
        {
            "location": "/app/app4/#trigger-examples", 
            "text": "", 
            "title": "Trigger examples"
        }, 
        {
            "location": "/app/app4/#setting-a-field-value-as-mandatory", 
            "text": "Before adding a document you can check whether a value is specified in the \"name\" field. In case it is not, you can interrupt the operation of adding the document.  if (!pool.doc.hasOwnProperty('name')) {   \n        return false;                     // if name is not specified then document creation will be interrupted\n    } else {\n        return true;                      \n    };", 
            "title": "Setting a field value as mandatory."
        }, 
        {
            "location": "/app/app4/#setting-a-default-value", 
            "text": "Before adding a document you can check whether a value is specified in the \"name\" field. In case it is not, you can set the value as a default one.  if (!pool.doc.hasOwnProperty('name')) { \n        pool.doc.name =  John Snow ;    // if not specified, name is now  John Snow  dy default \n    }\n\nreturn true;", 
            "title": "Setting a default value."
        }, 
        {
            "location": "/app/app4/#creating-a-document-related-in-a-different-collection", 
            "text": "After adding a document, you can create another document in a different collection with a link to the added one.  DataManager.Insert({                           // create new document in the  stuff  collection\n        coll :  stuff ,\n        doc  : {\n                    thing : pool.newDoc._id    // pass _id value to the new document's field  thing \n        }\n    })", 
            "title": "Creating a document related in a different collection."
        }, 
        {
            "location": "/app/app4/#deleting-related-documents-from-a-different-collection", 
            "text": "Before deleting a document, you can delete all documents from a different collection with a link to the document you want to delete.  DataManager.Remove({                           //  delete all related documents in the  stuff  collection\n    coll  :  stuff ,\n    query: {\n         thing : pool.query._id                // pass _id to the document which is about to be deleted\n    }\n})\nreturn true;", 
            "title": "Deleting related documents from a different collection."
        }, 
        {
            "location": "/app/app4/#running-a-server-side-script-from-a-trigger", 
            "text": "After a document is created, a script can be executed with the new document data. As an example, the script can send PUSH-notifications.  DataManager.RunScript({                   // run a script with the ID 580b386d42d52f1ba275fc24\n    script  :  580b386d42d52f1ba275fc24 ,\n    pool: {\n         doc : pool.newDoc                // pass a new document to the script \n    }\n})", 
            "title": "Running a server-side script from a trigger."
        }, 
        {
            "location": "/app/app5/", 
            "text": "General info\n\n\nThe server-side code is Java scripts executed on a server using the Google V8 engine. The developed server code is executed in accordance with a schedule (plan) or only once when called using the API method. To create a new script, click the Create button.\n\n\n\n\n\n\nEnter the server code in the corresponding box. To save the entered description, click Save. To allow the script to be run by an anonymous user (without authentication), check the corresponding field in the ACL tab. To configure a plan to run the server code, go to the Plan running tab. Enable the Timer parameter to execute the created server code in accordance with the schedule. Then, define the schedule and specify the date when it will become effective.\n\n\n\n\nThe following schedule options are available:\n\n\n\n\nOnce\n\n\nRandomly after a set time interval (days, hours, minutes)\n\n\nDaily (on set days of the week and at a set time)\n\n\nMonthly (on set months, days of month and at a set time)\n\n\n\n\n\n\nThe server-side code starts in a separate context and the following objects are available:\n\n\n\n\nscorocode\n \u2013 SDK scorocode, connected to the code using var scorocode = require('scorocode');\n\n\npool\n \u2013 any object transferred when calling the script execution method via API that contains the transferred attributes.\n\n\n\n\nNPM module support\n\n\nTo connect third-party modules to your script, describe all existing dependencies. For this purpose, go to the Application settings section and choose the NPM dependencies item.\n\n\n\n\nIn the dependencies section, describe all modules that you are going to use where the attribute is a module name and the value is the required version (you can leave the version value empty; in this case, the latest module version will be installed).\n\n\nExample:\n\n\n    {\n        \ndependencies\n: {\n            \nscorocode\n: \n\n        }\n    }\n\n\n\nWhenever you need to use module in your script, you can require it like this: \nvar sc = require('scorocode')", 
            "title": "Serverside code"
        }, 
        {
            "location": "/app/app5/#general-info", 
            "text": "The server-side code is Java scripts executed on a server using the Google V8 engine. The developed server code is executed in accordance with a schedule (plan) or only once when called using the API method. To create a new script, click the Create button.    Enter the server code in the corresponding box. To save the entered description, click Save. To allow the script to be run by an anonymous user (without authentication), check the corresponding field in the ACL tab. To configure a plan to run the server code, go to the Plan running tab. Enable the Timer parameter to execute the created server code in accordance with the schedule. Then, define the schedule and specify the date when it will become effective.   The following schedule options are available:   Once  Randomly after a set time interval (days, hours, minutes)  Daily (on set days of the week and at a set time)  Monthly (on set months, days of month and at a set time)    The server-side code starts in a separate context and the following objects are available:   scorocode  \u2013 SDK scorocode, connected to the code using var scorocode = require('scorocode');  pool  \u2013 any object transferred when calling the script execution method via API that contains the transferred attributes.", 
            "title": "General info"
        }, 
        {
            "location": "/app/app5/#npm-module-support", 
            "text": "To connect third-party modules to your script, describe all existing dependencies. For this purpose, go to the Application settings section and choose the NPM dependencies item.   In the dependencies section, describe all modules that you are going to use where the attribute is a module name and the value is the required version (you can leave the version value empty; in this case, the latest module version will be installed).  Example:      {\n         dependencies : {\n             scorocode :  \n        }\n    }  Whenever you need to use module in your script, you can require it like this:  var sc = require('scorocode')", 
            "title": "NPM module support"
        }, 
        {
            "location": "/app/bots/", 
            "text": "Create a Telegram Bot\n\n\nBefore you start developing your new bot, at first you need to register it in Telegram and receive its unique identifier. In Telegram, open the \n@BotFather\n profile and start to talk with \u201cit\u201d. Type the command \u201c/newbot\u201d. \n@BotFather\n will ask you for a bot name, which is a free text, and a bot username. The only restriction for a username is that it should always end by \u201cbot\u201d. If all is done correctly, the \n@BotFather\n would give your new bot an ID, which looks like \n321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg\n\n\nThe next step is to create a server-side script in your Scorocode application. The script will be associated with the bot to hande all data processing.\n\n\nAfter that you need to create a new Scorocode bot. You can do it in the \"Bots\" page by pressing the \"Create a new bot\" button. This action will show you a form in witch you can specify bot's data:\n\n\n\n\n\n\n\n\nParameter\n\n\nProperties\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBot name\n\n\nMandatory\n\n\nApplication bot name\n\n\n\n\n\n\nBot identifier\n\n\nMandatory\n\n\nBot's Telegram ID , given by '@BotFather'\n\n\n\n\n\n\nScript identifier\n\n\nMandatory\n\n\nChoose script from the list of application server-side scripts\n\n\n\n\n\n\nBot activation flag\n\n\nOptional, \nfalse\n by default\n\n\nSet the flag to activate your bot\n\n\n\n\n\n\n\n\nPress save button to save the new bot. At any time you can edit bot's settings by pressing the \"edit\" button.\n\n\n\n\nMain principles\n\n\nWhen your bot is activated, Scorocode creates the \nwebhook\n to receive Telegram data. The data is available in your server-side script 'pool' object everytime it receives update from Telegram. See \n'getting updates' documentation\n for a complete \nUpdate\n object description.\n\n\nBot's answers are transmitted with the .send(data) method and sc.Bot class, where data is an object with the following structure:\n\n\n{\n    'method': 'sendMessage',                            // Telegram Bot API method\n    'method_params': {                                  // method parameters to be passed\n      'chat_id': pool.message.chat.id.toString(),\n      'text': 'Hello!',\n      'reply_to_message_id': pool.message.message_id,\n      'reply_markup': keyBoard\n    },\n  }\n\n\n\nSee \nTelegram Bot API documentation\n for a complete list of available methods and their parameters.\n\n\n\n\nSupported methods\n\n\nAll \nTelegram Bot API\n v 2.3.1 methods are supported, except \nTelegram Bot Games API\n methods.\n\n\n\n\nBot server-side script example:\n\n\nvar sc = require('scorocode');\n\nvar client = sc.Init({\n  ApplicationID: \nxxx\n, // \n- replace xxx with your appId key\n  JavaScriptKey: \nxxx\n, // \n- replace xxx with your JavaScript key\n  MasterKey: \nxxx\n      // \n- replace xxx with your MasterKey key\n});\n\nvar bot = new sc.Bot(\n321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg\n);\nvar querystring = require('querystring');\n\n// Crate a new button for ReplyKeyboardMarkup\nfunction newKeyboardButton(text, request_contact, request_location) {\n  var button = {\n    'text': text\n  }\n\n  if (request_contact) {\n    button.request_contact = request_contact\n  }\n\n  if (request_location) {\n    button.request_location = request_location\n  }\n\n  return button\n}\n\n// Main logic\n\nconst sourceMessage = pool.message.text.toLowerCase()\nvar request = null\n\nif (sourceMessage === '/start' || sourceMessage === 'Hi there') {\n\n  var keyBoard = {\n    'keyboard': [\n      [ newKeyboardButton('Hi there') ],\n      [ newKeyboardButton('my phone number', true)],\n      [ newKeyboardButton('logo') ]\n    ]\n  }\n\n  request = {\n    'method': 'sendMessage',\n    'method_params': {\n      'chat_id': pool.message.chat.id.toString(),\n      'text': 'Hello!',\n      'reply_to_message_id': pool.message.message_id,\n      'reply_markup': keyBoard\n    },\n  }\n\n} else if (sourceMessage === 'logo') {\n\n  request = {\n    'method': 'sendPhoto',\n    'method_params': {\n      'chat_id': pool.message.chat.id.toString(),\n      'photo': 'https://habrastorage.org/files/aab/c24/364/aabc24364c3b4e109c20ae71da646d91.jpg',\n    },\n  }\n\n} else {\n  return\n}\n\nbot.send(request);", 
            "title": "Telegram bots"
        }, 
        {
            "location": "/app/bots/#create-a-telegram-bot", 
            "text": "Before you start developing your new bot, at first you need to register it in Telegram and receive its unique identifier. In Telegram, open the  @BotFather  profile and start to talk with \u201cit\u201d. Type the command \u201c/newbot\u201d.  @BotFather  will ask you for a bot name, which is a free text, and a bot username. The only restriction for a username is that it should always end by \u201cbot\u201d. If all is done correctly, the  @BotFather  would give your new bot an ID, which looks like  321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg  The next step is to create a server-side script in your Scorocode application. The script will be associated with the bot to hande all data processing.  After that you need to create a new Scorocode bot. You can do it in the \"Bots\" page by pressing the \"Create a new bot\" button. This action will show you a form in witch you can specify bot's data:     Parameter  Properties  Description      Bot name  Mandatory  Application bot name    Bot identifier  Mandatory  Bot's Telegram ID , given by '@BotFather'    Script identifier  Mandatory  Choose script from the list of application server-side scripts    Bot activation flag  Optional,  false  by default  Set the flag to activate your bot     Press save button to save the new bot. At any time you can edit bot's settings by pressing the \"edit\" button.", 
            "title": "Create a Telegram Bot"
        }, 
        {
            "location": "/app/bots/#main-principles", 
            "text": "When your bot is activated, Scorocode creates the  webhook  to receive Telegram data. The data is available in your server-side script 'pool' object everytime it receives update from Telegram. See  'getting updates' documentation  for a complete  Update  object description.  Bot's answers are transmitted with the .send(data) method and sc.Bot class, where data is an object with the following structure:  {\n    'method': 'sendMessage',                            // Telegram Bot API method\n    'method_params': {                                  // method parameters to be passed\n      'chat_id': pool.message.chat.id.toString(),\n      'text': 'Hello!',\n      'reply_to_message_id': pool.message.message_id,\n      'reply_markup': keyBoard\n    },\n  }  See  Telegram Bot API documentation  for a complete list of available methods and their parameters.   Supported methods  All  Telegram Bot API  v 2.3.1 methods are supported, except  Telegram Bot Games API  methods.", 
            "title": "Main principles"
        }, 
        {
            "location": "/app/bots/#bot-server-side-script-example", 
            "text": "var sc = require('scorocode');\n\nvar client = sc.Init({\n  ApplicationID:  xxx , //  - replace xxx with your appId key\n  JavaScriptKey:  xxx , //  - replace xxx with your JavaScript key\n  MasterKey:  xxx       //  - replace xxx with your MasterKey key\n});\n\nvar bot = new sc.Bot( 321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg );\nvar querystring = require('querystring');\n\n// Crate a new button for ReplyKeyboardMarkup\nfunction newKeyboardButton(text, request_contact, request_location) {\n  var button = {\n    'text': text\n  }\n\n  if (request_contact) {\n    button.request_contact = request_contact\n  }\n\n  if (request_location) {\n    button.request_location = request_location\n  }\n\n  return button\n}\n\n// Main logic\n\nconst sourceMessage = pool.message.text.toLowerCase()\nvar request = null\n\nif (sourceMessage === '/start' || sourceMessage === 'Hi there') {\n\n  var keyBoard = {\n    'keyboard': [\n      [ newKeyboardButton('Hi there') ],\n      [ newKeyboardButton('my phone number', true)],\n      [ newKeyboardButton('logo') ]\n    ]\n  }\n\n  request = {\n    'method': 'sendMessage',\n    'method_params': {\n      'chat_id': pool.message.chat.id.toString(),\n      'text': 'Hello!',\n      'reply_to_message_id': pool.message.message_id,\n      'reply_markup': keyBoard\n    },\n  }\n\n} else if (sourceMessage === 'logo') {\n\n  request = {\n    'method': 'sendPhoto',\n    'method_params': {\n      'chat_id': pool.message.chat.id.toString(),\n      'photo': 'https://habrastorage.org/files/aab/c24/364/aabc24364c3b4e109c20ae71da646d91.jpg',\n    },\n  }\n\n} else {\n  return\n}\n\nbot.send(request);", 
            "title": "Bot server-side script example:"
        }, 
        {
            "location": "/app/app6/", 
            "text": "To access the application configuration options, go to the Settings functional tab. The following categories of settings are available on the Settings page:\n\n\n\n\nApplication settings\n\n\nPrice plan\n\n\nSecurity\n\n\nDevelopers\n\n\nPush settings\n\n\nApplication user authentication\n\n\n\n\n\n\nPrice plan\n\n\nTo set up a price plan for the application, use the Price plan link. The page that opens, shows information on the current active price plan and its activated options.\n\n\n\n\nBy default, the FREE price plan with the following options is activated:\n\n\n\n\nRequests per second \u2013 20;\n\n\nDisk space \u2013 10 GB;\n\n\nPush notifications \u2013 500,000 (maximum);\n\n\nServer-side script execution time - 3 seconds;\n\n\nDevelopers \u2013 1 (including the application owner).\n\n\n\n\nTo acquire additional options, you will need to change your price plan to INDIE. To change the price plan, use the Change link in the line with the same name.\n\n\n\n\nIn the pop-up window, enter how many months are required for the INDIE price plan (by default, 1). The service will calculate the price taking into account any discount. A discount is offered when a price plan/option is purchased for a period of more than 12 months. To confirm the price plan purchase, click the Purchase button.\n\n\nNow you can purchase increases for the price plan option (if necessary). To do this, use the Change link in the line with the name of the required option, for example, Storage.\n\n\nIn the pop-up box, specify the number of months you want to purchase and the additional option size. The service will calculate the price taking into account your discount. To confirm the purchase of the additional price plan option size, click the Purchase button. The list of activated options will display information about all your purchases, with purchase dates and the dates when the settings will be deactivated.\n\n\nWhen the purchased price plan and/or option expire, the existing restrictions will be recalculated based on the deactivation dates of all purchased add-ons to a certain price plan or option.\n\n\nWhen all purchased option add-ons expire, its values are set to default.\n\n\nWhen the INDIE price plan expires, the FREE price plan is activated with its option values.\n\n\nSecurity\n\n\nUse the Security link to configure keys to access the application and public access to the application data.\n\n\n\n\nThe page displays the following keys:\n\n\n\n\nappID \u2013 application identifier;\n\n\nandroid \u2013 Android platform client key;\n\n\njavascript \u2013 JavaScript platform client key;\n\n\niOs \u2013 iOs platform client key;\n\n\nwinphone\u2013 winPhone platform client key;\n\n\nmasterKey \u2013 master key of the application for full access via API;\n\n\nfileKey \u2013 key for access to API functions of the application (files);\n\n\nscriptKey \u2013 key for access to API functions of the application (scripts);\n\n\nmessageKey \u2013 key for access to API functions of the application (messages);\n\n\nwebSocketKey \u2013 key for access to API functions of the application (websocket).\n\n\n\n\nThe Reset button next to each key can be used to reset its value and generate a new key. Access to the corresponding functions using old keys will not be available after that.\n\n\nTo allow or prohibit public (unauthenticated) access to the application data, set ACL options for reading, writing, updating and deleting.\n\n\nDevelopers\n\n\nDevelopers who have access to the application can be added using the Developers link.\n\n\n\n\nApplication developers can be added when the corresponding price plan is purchased, i.e. if an option is selected in the price plan for more than 1 developer.\n\n\nEnter the developer's email address and click Invite. The invitation will be sent to the developer's email address.\n\n\nPush settings\n\n\nThis category of settings is for configuring parameters required for sending Push notifications.\n\n\n\n\niOS Push\n\n\nClick the Load certificate button to load a certificate file to the application which is required for sending PUSH notifications to iOS devices.\n\n\nInformation\n about Apple PUSH notifications.\n\n\nAndroid PUSH\n\n\nEnter data in the GCM Sender ID and API key fields that is required to send PUSH notifications to Android devices.\n\n\nInformation\n about Android PUSH notifications.\n\n\nApplication user authentication\n\n\nUse this configuration section to define a user session duration.\n\n\n\n\nClick the Application user authentication link. On the page that opens, enter the duration in hours of the API session after the user logs into the application. By default, the duration of a user session is 72 hours.\n\n\nYou can also choose if a confirmation email should be sent to the user's email address to complete the registration process. If this option is specified, an email will be sent to the user's address after registration via API with a confirmation link to complete the registration process. Enter the text of the registration confirmation email in the text editor window.\n\n\nTo insert the verification link and username, insert the following values into the email text.\n\n\n\n\n%link%\n - verification link\n\n\n%username%\n - username", 
            "title": "Application settings"
        }, 
        {
            "location": "/app/app6/#price-plan", 
            "text": "To set up a price plan for the application, use the Price plan link. The page that opens, shows information on the current active price plan and its activated options.   By default, the FREE price plan with the following options is activated:   Requests per second \u2013 20;  Disk space \u2013 10 GB;  Push notifications \u2013 500,000 (maximum);  Server-side script execution time - 3 seconds;  Developers \u2013 1 (including the application owner).   To acquire additional options, you will need to change your price plan to INDIE. To change the price plan, use the Change link in the line with the same name.   In the pop-up window, enter how many months are required for the INDIE price plan (by default, 1). The service will calculate the price taking into account any discount. A discount is offered when a price plan/option is purchased for a period of more than 12 months. To confirm the price plan purchase, click the Purchase button.  Now you can purchase increases for the price plan option (if necessary). To do this, use the Change link in the line with the name of the required option, for example, Storage.  In the pop-up box, specify the number of months you want to purchase and the additional option size. The service will calculate the price taking into account your discount. To confirm the purchase of the additional price plan option size, click the Purchase button. The list of activated options will display information about all your purchases, with purchase dates and the dates when the settings will be deactivated.  When the purchased price plan and/or option expire, the existing restrictions will be recalculated based on the deactivation dates of all purchased add-ons to a certain price plan or option.  When all purchased option add-ons expire, its values are set to default.  When the INDIE price plan expires, the FREE price plan is activated with its option values.", 
            "title": "Price plan"
        }, 
        {
            "location": "/app/app6/#security", 
            "text": "Use the Security link to configure keys to access the application and public access to the application data.   The page displays the following keys:   appID \u2013 application identifier;  android \u2013 Android platform client key;  javascript \u2013 JavaScript platform client key;  iOs \u2013 iOs platform client key;  winphone\u2013 winPhone platform client key;  masterKey \u2013 master key of the application for full access via API;  fileKey \u2013 key for access to API functions of the application (files);  scriptKey \u2013 key for access to API functions of the application (scripts);  messageKey \u2013 key for access to API functions of the application (messages);  webSocketKey \u2013 key for access to API functions of the application (websocket).   The Reset button next to each key can be used to reset its value and generate a new key. Access to the corresponding functions using old keys will not be available after that.  To allow or prohibit public (unauthenticated) access to the application data, set ACL options for reading, writing, updating and deleting.", 
            "title": "Security"
        }, 
        {
            "location": "/app/app6/#developers", 
            "text": "Developers who have access to the application can be added using the Developers link.   Application developers can be added when the corresponding price plan is purchased, i.e. if an option is selected in the price plan for more than 1 developer.  Enter the developer's email address and click Invite. The invitation will be sent to the developer's email address.", 
            "title": "Developers"
        }, 
        {
            "location": "/app/app6/#push-settings", 
            "text": "This category of settings is for configuring parameters required for sending Push notifications.", 
            "title": "Push settings"
        }, 
        {
            "location": "/app/app6/#ios-push", 
            "text": "Click the Load certificate button to load a certificate file to the application which is required for sending PUSH notifications to iOS devices.  Information  about Apple PUSH notifications.", 
            "title": "iOS Push"
        }, 
        {
            "location": "/app/app6/#android-push", 
            "text": "Enter data in the GCM Sender ID and API key fields that is required to send PUSH notifications to Android devices.  Information  about Android PUSH notifications.", 
            "title": "Android PUSH"
        }, 
        {
            "location": "/app/app6/#application-user-authentication", 
            "text": "Use this configuration section to define a user session duration.   Click the Application user authentication link. On the page that opens, enter the duration in hours of the API session after the user logs into the application. By default, the duration of a user session is 72 hours.  You can also choose if a confirmation email should be sent to the user's email address to complete the registration process. If this option is specified, an email will be sent to the user's address after registration via API with a confirmation link to complete the registration process. Enter the text of the registration confirmation email in the text editor window.  To insert the verification link and username, insert the following values into the email text.   %link%  - verification link  %username%  - username", 
            "title": "Application user authentication"
        }, 
        {
            "location": "/httpapi/appapi/", 
            "text": "Get application info\n\n\nhttps://api.scorocode.ru/api/v1/app\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n  // access key, mandatory, masterKey only\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n\n}' \nhttps://api.scorocode.ru/api/v1/app\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \napp\n: {\n    \n_id\n: \n584e64f8982fd55332741516\n,\n    \nappId\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \nname\n: \nHTTPApp\n,\n    \ndescription\n: \n,\n    \nuserId\n: \n5745b2123evlfh062612e3f\n,\n    \nserverId\n: \n5745a5e63ef62fs0626ftgeb\n,\n    \nlimits\n: {\n      \nrps\n: 20,\n      \nstore\n: 10737418240,\n      \npushValue\n: 0,\n      \npushUsed\n: 0,\n      \ndevelopers\n: 1,\n      \nws\n: 200,\n      \nscriptTimeout\n: 3\n    },\n    \nschemas\n: {\n      \ndevices\n: {\n        \nid\n: \n584e64f8982fd55332741515\n,\n        \nname\n: \ndevices\n,\n        \nuseDocsACL\n: false,\n        \nACL\n: {\n          \ncreate\n: [\n            \n*\n\n          ],\n          \nread\n: [\n            \n*\n\n          ],\n          \nremove\n: [\n            \n*\n\n          ],\n          \nupdate\n: [\n            \n*\n\n          ]\n        },\n        \ntriggers\n: {\n          \nafterFind\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterInsert\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterRemove\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterUpdate\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeInsert\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeRemove\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeUpdate\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          }\n        },\n        \nfields\n: [\n          {\n            \nname\n: \nreadACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nupdateACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nremoveACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \ncreatedAt\n,\n            \ntype\n: \nDate\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nupdatedAt\n,\n            \ntype\n: \nDate\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nuserId\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \ndeviceId\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: true\n          },\n          {\n            \nname\n: \ndeviceType\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: true\n          }\n        ],\n        \nsystem\n: true,\n        \nindexes\n: []\n      },\n      \nroles\n: {\n        \nid\n: \n584e64f8982fd55332741513\n,\n        \nname\n: \nroles\n,\n        \nuseDocsACL\n: false,\n        \nACL\n: {\n          \ncreate\n: [\n            \n*\n\n          ],\n          \nread\n: [\n            \n*\n\n          ],\n          \nremove\n: [\n            \n*\n\n          ],\n          \nupdate\n: [\n            \n*\n\n          ]\n        },\n        \ntriggers\n: {\n          \nafterFind\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterInsert\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterRemove\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterUpdate\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeInsert\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeRemove\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeUpdate\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          }\n        },\n        \nfields\n: [\n          {\n            \nname\n: \nname\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: true\n          },\n          {\n            \nname\n: \nreadACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nupdateACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nremoveACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \ncreatedAt\n,\n            \ntype\n: \nDate\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nupdatedAt\n,\n            \ntype\n: \nDate\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          }\n        ],\n        \nsystem\n: true,\n        \nindexes\n: []\n      },\n      \nusers\n: {\n        \nid\n: \n584e64f8982fd55332741514\n,\n        \nname\n: \nusers\n,\n        \nuseDocsACL\n: false,\n        \nACL\n: {\n          \ncreate\n: [\n            \n*\n\n          ],\n          \nread\n: [\n            \n*\n\n          ],\n          \nremove\n: [\n            \n*\n\n          ],\n          \nupdate\n: [\n            \n*\n\n          ]\n        },\n        \ntriggers\n: {\n          \nafterFind\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterInsert\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterRemove\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nafterUpdate\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeInsert\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeRemove\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          },\n          \nbeforeUpdate\n: {\n            \ncode\n: \n,\n            \nisActive\n: false\n          }\n        },\n        \nfields\n: [\n          {\n            \nname\n: \nemail\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: true\n          },\n          {\n            \nname\n: \nphone\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nreadACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nupdateACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nremoveACL\n,\n            \ntype\n: \nACL\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \ncreatedAt\n,\n            \ntype\n: \nDate\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nupdatedAt\n,\n            \ntype\n: \nDate\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nusername\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: true\n          },\n          {\n            \nname\n: \npassword\n,\n            \ntype\n: \nPassword\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: true\n          },\n          {\n            \nname\n: \nemailVerified\n,\n            \ntype\n: \nBoolean\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \nroles\n,\n            \ntype\n: \nArray\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: false,\n            \nrequired\n: false\n          },\n          {\n            \nname\n: \ntoken\n,\n            \ntype\n: \nString\n,\n            \ntarget\n: \n,\n            \nsystem\n: true,\n            \nreadonly\n: true,\n            \nrequired\n: false\n          }\n        ],\n        \nsystem\n: true,\n        \nindexes\n: []\n      }\n    },\n    \naccessKeys\n: {\n      \nfileKey\n: \n31adc32bac245299cfad0d7b1912bc2a\n,\n      \nmasterKey\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n      \nmessageKey\n: \n605a1248a2d27424ec43f6bdf435b0a7\n,\n      \nscriptKey\n: \n333efb738b82c3096a3fgdbabd27f702\n,\n      \nwebsocketKey\n: \n9627612736b1129d2ea9d615fb482a41\n\n    },\n    \nclientKeys\n: {\n      \nandroid\n: \ndb993776551ed6267fbe256ef0296cb8\n,\n      \nios\n: \n840ff61458ec11bf411859dbbf46d46a\n,\n      \njavascript\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n      \nwinphone\n: \n3fbce82fafba9dccc60036f92b971654\n\n    },\n    \nreadonly\n: true,\n    \nACLPublic\n: {\n      \ncreate\n: false,\n      \nread\n: false,\n      \nremove\n: false,\n      \nupdate\n: false\n    },\n    \nsettings\n: {\n      \nemailVerified\n: false,\n      \nsessionTimeout\n: 72,\n      \nandroidApiKey\n: \n,\n      \ngcmSenderId\n: \n,\n      \nmailTemplates\n: {\n        \nforgot\n: {\n          \nsubject\n: \n,\n          \nbody\n: \n\n        },\n        \nreg\n: {\n          \nsubject\n: \n,\n          \nbody\n: \n\n        }\n      },\n      \nsmtp\n: null\n    },\n    \nstorage\n: {\n      \nuser\n: \n,\n      \npassword\n: \n\n    },\n    \nnpm\n: \n{\\\ndependencies\\\n:{}}\n,\n    \nstringId\n: \n584e64f8982fd55332741516\n\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetrieve list of collections and their settings\n\n\nhttps://api.scorocode.ru/api/v1/app/collections\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n  // access key, mandatory, masterKey only\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n\n}' \nhttps://api.scorocode.ru/api/v1/app/collections\n\n\n\n\n\n\n\nSuccess\n\n\n{\n  \ncollections\n: {\n    \ndevices\n: {\n      \nid\n: \n584e64f8982fd55332741515\n,\n      \nname\n: \ndevices\n,\n      \nuseDocsACL\n: false,\n      \nACL\n: {\n        \ncreate\n: [\n          \n*\n\n        ],\n        \nread\n: [\n          \n*\n\n        ],\n        \nremove\n: [\n          \n*\n\n        ],\n        \nupdate\n: [\n          \n*\n\n        ]\n      },\n      \ntriggers\n: {\n        \nafterFind\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterInsert\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterRemove\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterUpdate\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeInsert\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeRemove\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeUpdate\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        }\n      },\n      \nfields\n: [\n        {\n          \nname\n: \nreadACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nupdateACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nremoveACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \ncreatedAt\n,\n          \ntype\n: \nDate\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nupdatedAt\n,\n          \ntype\n: \nDate\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nuserId\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \ndeviceId\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: true\n        },\n        {\n          \nname\n: \ndeviceType\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: true\n        }\n      ],\n      \nsystem\n: true,\n      \nindexes\n: []\n    },\n    \nroles\n: {\n      \nid\n: \n584e64f8982fd55332741513\n,\n      \nname\n: \nroles\n,\n      \nuseDocsACL\n: false,\n      \nACL\n: {\n        \ncreate\n: [\n          \n*\n\n        ],\n        \nread\n: [\n          \n*\n\n        ],\n        \nremove\n: [\n          \n*\n\n        ],\n        \nupdate\n: [\n          \n*\n\n        ]\n      },\n      \ntriggers\n: {\n        \nafterFind\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterInsert\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterRemove\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterUpdate\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeInsert\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeRemove\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeUpdate\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        }\n      },\n      \nfields\n: [\n        {\n          \nname\n: \nname\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: true\n        },\n        {\n          \nname\n: \nreadACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nupdateACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nremoveACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \ncreatedAt\n,\n          \ntype\n: \nDate\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nupdatedAt\n,\n          \ntype\n: \nDate\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        }\n      ],\n      \nsystem\n: true,\n      \nindexes\n: []\n    },\n    \nusers\n: {\n      \nid\n: \n584e64f8982fd55332741514\n,\n      \nname\n: \nusers\n,\n      \nuseDocsACL\n: false,\n      \nACL\n: {\n        \ncreate\n: [\n          \n*\n\n        ],\n        \nread\n: [\n          \n*\n\n        ],\n        \nremove\n: [\n          \n*\n\n        ],\n        \nupdate\n: [\n          \n*\n\n        ]\n      },\n      \ntriggers\n: {\n        \nafterFind\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterInsert\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterRemove\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nafterUpdate\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeInsert\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeRemove\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        },\n        \nbeforeUpdate\n: {\n          \ncode\n: \n,\n          \nisActive\n: false\n        }\n      },\n      \nfields\n: [\n        {\n          \nname\n: \nemail\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: true\n        },\n        {\n          \nname\n: \nphone\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nreadACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nupdateACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nremoveACL\n,\n          \ntype\n: \nACL\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \ncreatedAt\n,\n          \ntype\n: \nDate\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nupdatedAt\n,\n          \ntype\n: \nDate\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nusername\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: true\n        },\n        {\n          \nname\n: \npassword\n,\n          \ntype\n: \nPassword\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: true\n        },\n        {\n          \nname\n: \nemailVerified\n,\n          \ntype\n: \nBoolean\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \nroles\n,\n          \ntype\n: \nArray\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: false,\n          \nrequired\n: false\n        },\n        {\n          \nname\n: \ntoken\n,\n          \ntype\n: \nString\n,\n          \ntarget\n: \n,\n          \nsystem\n: true,\n          \nreadonly\n: true,\n          \nrequired\n: false\n        }\n      ],\n      \nsystem\n: true,\n      \nindexes\n: []\n    }\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetrieve collection info.\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/get\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, mandatory, masterKey only\n    \ncoll\n        : \n  // collection name, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncoll\n: \ndevices\n\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/get\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \ncollection\n: {\n    \nid\n: \n584e64f8982fd55332741515\n,\n    \nname\n: \ndevices\n,\n    \nuseDocsACL\n: false,\n    \nACL\n: {\n      \ncreate\n: [\n        \n*\n\n      ],\n      \nread\n: [\n        \n*\n\n      ],\n      \nremove\n: [\n        \n*\n\n      ],\n      \nupdate\n: [\n        \n*\n\n      ]\n    },\n    \ntriggers\n: {\n      \nafterFind\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      }\n    },\n    \nfields\n: [\n      {\n        \nname\n: \nreadACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdateACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nremoveACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ncreatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nuserId\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ndeviceId\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: true\n      },\n      {\n        \nname\n: \ndeviceType\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: true\n      }\n    ],\n    \nsystem\n: true,\n    \nindexes\n: []\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCreate new collection\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/create\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncollection\n: {          \n        \nname\n: \n,          // collection name, mandatory  \n        \nuseDocsACL\n: bool,  // \nuse documents ACL\n flag, optional\n        \nACL\n: {}            // ACL settings, optional\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncollection\n: {\n            \nname\n: \napicoll\n,\n            \nuseDocsACL\n: false,\n            \nACL\n: {\n                \ncreate\n: [\n                    \nR5VGMes94p\n\n                ],\n                \nread\n: [\n                    \n*\n,\n                    \nR5VGMes94p\n\n                ],\n                \nremove\n: [\n                    \nR5VGMes94p\n\n                ],\n                \nupdate\n: [\n                    \nR5VGMes94p\n\n                ]\n            }\n        }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/create\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \ncollection\n: {\n    \nid\n: \n584e849e7e0b4e222480a282\n,\n    \nname\n: \napicoll\n,\n    \nuseDocsACL\n: false,\n    \nACL\n: {\n        \ncreate\n: [\n            \nR5VGMes94p\n\n        ],\n        \nread\n: [\n            \n*\n,\n            \nR5VGMes94p\n\n        ],\n        \nremove\n: [\n            \nR5VGMes94p\n\n        ],\n        \nupdate\n: [\n            \nR5VGMes94p\n\n        ]\n    },\n    \ntriggers\n: {\n      \nafterInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      }\n    },\n    \nfields\n: [\n      {\n        \nname\n: \nreadACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdateACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nremoveACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ncreatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      }\n    ],\n    \nsystem\n: false,\n    \nindexes\n: []\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUpdate collection settings\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/update\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncollection\n: {\n        \nid\n: \n,            // collection identifier, mandatory           \n        \nname\n: \n,          // collection name, optional  \n        \nuseDocsACL\n: bool,  // \nuse documents ACL\n flag, optional\n        \nACL\n: {}            // ACL settings, optional\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncollection\n: {\n          \nid\n: \n584e852276e5e715e6ec2e8c\n,\n          \nuseDocsACL\n: true,\n          \nACL\n: {}\n        }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/update\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \ncollection\n: {\n    \nid\n: \n584e849e7e0b4e222480a282\n,\n    \nname\n: \napicoll\n,\n    \nuseDocsACL\n: true,\n    \nACL\n: {\n        \ncreate\n: [\n            \nR5VGMes94p\n\n        ],\n        \nread\n: [\n            \n*\n,\n            \nR5VGMes94p\n\n        ],\n        \nremove\n: [\n            \nR5VGMes94p\n\n        ],\n        \nupdate\n: [\n            \nR5VGMes94p\n\n        ]\n    },\n    \ntriggers\n: {\n      \nafterInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      }\n    },\n    \nfields\n: [\n      {\n        \nname\n: \nreadACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdateACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nremoveACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ncreatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      }\n    ],\n    \nsystem\n: false,\n    \nindexes\n: []\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete collection\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/delete\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncollection\n: {\n        \nid\n: \n             // collection identifier, mandatory           \n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncollection\n: {\n            \nid\n: \n584e849e7e0b4e222480a282\n,\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/delete\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nClone collection\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/clone\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncollection\n: {\n        \nid\n: \n             // collection identifier, mandatory           \n        \nname\n: \n           // new collection name, mandatory\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncollection\n: {\n            \nid\n: \n584e91b77e0b4e222480a316\n,\n            \nname\n: \nclonedcoll\n           \n        }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/clone\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \ncollection\n: {\n    \nid\n: \n584e91e70c62722cf9fe2191\n,\n    \nname\n: \nclonedcoll\n,\n    \nuseDocsACL\n: false,\n    \nACL\n: {},\n    \ntriggers\n: {\n      \nafterInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      }\n    },\n    \nfields\n: [\n      {\n        \nname\n: \nreadACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdateACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nremoveACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ncreatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      }\n    ],\n    \nsystem\n: false,\n    \nindexes\n: []\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCreate new collection's index\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/index/create\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncoll\n: \n,              // collection name, mandatory\n    \nindex\n: {\n        \nname\n: \n,                    // index name, mandatory\n        \nfields\n: [\n            {\n                \nname\n: \n,            // field name, mandatory\n                \norder\n: 1 || -1       // sorting order, mandatory\n            }\n        ]\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncoll\n: \nusers\n,\n        \nindex\n: {\n            \nname\n: \nemailIndex\n,                    \n            \nfields\n: [\n                {\n                    \nname\n: \nemail\n,            \n                    \norder\n: 1       \n                }\n            ]\n        }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/index/create\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete collection's index\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/index/delete\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncoll\n: \n,              // collection name, mandatory\n    \nindex\n: {\n        \nname\n: \n           // index name, mandatory\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncoll\n: \nusers\n,\n        \nindex\n: {\n            \nname\n: \nemailIndex\n                    \n        }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/index/delete\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCreate new collection's field\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/fields/create\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncoll\n: \n,              // collection name, mandatory\n    \ncollField\n: {     \n        \nname\n: \n,          // field name, mandatory\n        \ntype\n: \n,          // field data type, mandatory\n        \ntarget\n: \n         // target collection name, mandatory for Pointer || Relation data type fields\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \ncoll\n: \nusers\n,                       \n    \ncollField\n: {\n        \nname\n: \npointer\n,         \n        \ntype\n: \nPointer\n,         \n        \ntarget\n: \ndevices\n          \n    }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/fields/create\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \nfield\n: {\n    \nname\n: \npointer\n,\n    \ntype\n: \nPointer\n,\n    \ntarget\n: \ndevices\n,\n    \nsystem\n: false,\n    \nreadonly\n: false,\n    \nrequired\n: false\n  }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete collection's field\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/fields/delete\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncoll\n: \n,              // collection name, mandatory\n    \ncollField\n: {   \n        \nname\n: \n           // field name, mandatory\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \ncoll\n: \nusers\n,                       \n    \ncollField\n: {\n        \nname\n: \npointer\n\n    }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/fields/delete\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \ncollection\n: {\n    \nid\n: \n584e64f8982fd55332741514\n,\n    \nname\n: \nusers\n,\n    \nuseDocsACL\n: false,\n    \nACL\n: {\n      \ncreate\n: [\n        \n*\n\n      ],\n      \nread\n: [\n        \n*\n\n      ],\n      \nremove\n: [\n        \n*\n\n      ],\n      \nupdate\n: [\n        \n*\n\n      ]\n    },\n    \ntriggers\n: {\n      \nafterFind\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nafterUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeInsert\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeRemove\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      },\n      \nbeforeUpdate\n: {\n        \ncode\n: \n,\n        \nisActive\n: false\n      }\n    },\n    \nfields\n: [\n      {\n        \nname\n: \nemail\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: true\n      },\n      {\n        \nname\n: \nphone\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nreadACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdateACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nremoveACL\n,\n        \ntype\n: \nACL\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ncreatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nupdatedAt\n,\n        \ntype\n: \nDate\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nusername\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: true\n      },\n      {\n        \nname\n: \npassword\n,\n        \ntype\n: \nPassword\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: true\n      },\n      {\n        \nname\n: \nemailVerified\n,\n        \ntype\n: \nBoolean\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \nroles\n,\n        \ntype\n: \nArray\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: false,\n        \nrequired\n: false\n      },\n      {\n        \nname\n: \ntoken\n,\n        \ntype\n: \nString\n,\n        \ntarget\n: \n,\n        \nsystem\n: true,\n        \nreadonly\n: true,\n        \nrequired\n: false\n      }\n    ],\n    \nsystem\n: true,\n    \nindexes\n: []\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUpdate collection's triggers\n\n\nhttps://api.scorocode.ru/api/v1/app/collections/triggers\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncoll\n: \n,              // collection name, mandatory\n    \ntriggers\n: {\n        \nbeforeInsert\n: {      \n            \ncode\n: \n,       // trigger code, optional\n            \nisActive\n: bool  // trigger activation flag, optional\n        },\n        \nafterInsert\n: {\n            \ncode\n: \n,       // trigger code, optional\n            \nisActive\n: bool  // trigger activation flag, optional\n        },\n        \nbeforeUpdate\n: {\n            \ncode\n: \n,       // trigger code, optional\n            \nisActive\n: bool  // trigger activation flag, optional\n        },\n        \nafterUpdate\n: {\n            \ncode\n: \n,       // trigger code, optional\n            \nisActive\n: bool  // trigger activation flag, optional\n        },\n        \nbeforeRemove\n: {\n            \ncode\n: \n,       // trigger code, optional\n            \nisActive\n: bool  // trigger activation flag, optional\n        },\n        \nafterRemove\n: {\n            \ncode\n: \n,       // trigger code, optional\n            \nisActive\n: bool  // trigger activation flag, optional\n        }\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \ncoll\n: \nusers\n,                       \n    \ntriggers\n: {\n         \nafterInsert\n: {\n            \ncode\n: \nDataManager.Insert({\\n  coll:'logs', \\n  doc: {\\n    'docId': pool.newDoc._id,\\n    'collection': 'users',\\n    'operation': 'register',\\n    'data': pool.newDoc\\n    }\\n  });\n,       \n            \nisActive\n: true\n        }\n    }\n}\n' \nhttps://api.scorocode.ru/api/v1/app/collections/triggers\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \ntriggers\n: {\n    \nafterFind\n: {\n      \ncode\n: \n,\n      \nisActive\n: false\n    },\n    \nafterInsert\n: {\n      \ncode\n: \nDataManager.Insert({\\n  coll:'logs', \\n  doc: {\\n    'docId': pool.newDoc._id,\\n    'collection': 'users',\\n    'operation': 'register',\\n    'data': pool.newDoc\\n    }\\n  });\n,\n      \nisActive\n: true\n    },\n    \nafterRemove\n: {\n      \ncode\n: \n,\n      \nisActive\n: false\n    },\n    \nafterUpdate\n: {\n      \ncode\n: \n,\n      \nisActive\n: false\n    },\n    \nbeforeInsert\n: {\n      \ncode\n: \n,\n      \nisActive\n: false\n    },\n    \nbeforeRemove\n: {\n      \ncode\n: \n,\n      \nisActive\n: false\n    },\n    \nbeforeUpdate\n: {\n      \ncode\n: \n,\n      \nisActive\n: false\n    }\n  }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetreive folders and scripts list\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/folders\n\n\nMethod: \nPOST\n\n\nHeaders:\n\n\nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \npath\n: \n               // full path to directory, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \npath\n: \n/\n\n}' \nhttps://api.scorocode.ru/api/v1/app/scripts/folders\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \nitems\n: [\n    {\n      \n_id\n: \n,\n      \nname\n: \nfolder1\n,\n      \npath\n: \n/folder1\n,\n      \nisScript\n: false\n    },\n    {\n      \n_id\n: \n,\n      \nname\n: \nfolder2\n,\n      \npath\n: \n/folder2\n,\n      \nisScript\n: false\n    },\n    {\n      \n_id\n: \n584eb26a42d52f1ba275fdb2\n,\n      \nname\n: \nsomescript.js\n,\n      \npath\n: \n/somescript.js\n,\n      \nisScript\n: true\n    }\n  ]\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCreate new folder\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/folders/create\n\n\nMethod: \nPOST\n\n\nHeaders:\n\n\nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \npath\n: \n               // full path to directory, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \npath\n: \n/folder1/newfolder\n\n}' \nhttps://api.scorocode.ru/api/v1/app/scripts/folders/create\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete folder\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/folders/delete\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \npath\n: \n               // full path to directory, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n        \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n        \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n        \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n        \ncoll\n: \nusers\n,\n        \nindex\n: {\n            \nname\n: \nemailIndex\n                    \n        }\n}' \nhttps://api.scorocode.ru/api/v1/app/collections/index/delete\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetreive server-side script\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/get\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \nscript\n: \n             // server-side script identifier, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \nscript\n: \n584eb54142d52f1ba275fdb3\n\n}' \nhttps://api.scorocode.ru/api/v1/app/scripts/get\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \nscript\n: {\n    \n_id\n: \n584eb54142d52f1ba275fdb3\n,\n    \nappId\n: \n584e64f8982fd55332741516\n,\n    \nname\n: \nAYBABTU.js\n,\n    \npath\n: \n/AYBABTU.js\n,\n    \ndescription\n: \n,\n    \ncode\n: \nconsole.log(\\\nQWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\\n);\n,\n    \njobStartAt\n: \n2016-12-12T17:33:00+03:00\n,\n    \nisActiveJob\n: false,\n    \njobType\n: \nonce\n,\n    \nrepeat\n: {\n      \ncustom\n: {\n        \ndays\n: 0,\n        \nhours\n: 0,\n        \nminutes\n: 0\n      },\n      \ndaily\n: {\n        \non\n: [],\n        \nhours\n: 0,\n        \nminutes\n: 0\n      },\n      \nmonthly\n: {\n        \non\n: [],\n        \ndays\n: [],\n        \nlastDate\n: false,\n        \nhours\n: 0,\n        \nminutes\n: 0\n      }\n    },\n    \nnextRun\n: \n2016-12-12T17:33:00+03:00\n,\n    \nACL\n: [\n      \n*\n\n    ]\n  }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCreate new server-side script\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/create\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \ncloudCode\n: {\n        \npath\n: \n                // full path and script name, mandatory\n        \ndescription\n: \n,        // description, optional\n        \ncode\n: \n,               // server-side script code, optional\n        \njobStartAt\n: \ndatetime\n, // timer start datetime, optional\n        \nisActiveJob\n: bool,      // timer activation flag, optional\n        \njobType\n: \n,            // timer type, optional, custom || daily || monthly\n        \nrepeat\n: {               // timer repeat settings, optional\n            \ncustom\n: {\n                \ndays\n: int,\n                \nhours\n: int,\n                \nminutes\n: int\n            },\n            \ndaily\n: {\n                \non\n: [int],\n                \nhours\n: int,\n                \nminutes\n: int\n            }\n            \nmonthly\n: {\n                \non\n: [int],\n                \ndays\n: [int],\n                \nlastDate\n: bool,\n                \nhours\n: int,\n                \nminutes\n: int\n            }\n        }\n        \nACL\n: []                 // server-side script ACL settings, optional, array of user ids and/or \n*\n for anonymous access\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \ncloudCode\n: {\n        \npath\n: \n/AYBABTU.js\n,\n        \ndescription\n: \nAll your base\n,      \n        \ncode\n: \nconsole.log(\\\nQWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\\n);\n,             \n        \njobStartAt\n: \n2016-12-13T17:33:00+03:00\n, \n        \nisActiveJob\n: false,    \n        \njobType\n: \ncustom\n,           \n        \nrepeat\n: {             \n            \ncustom\n: {\n                \ndays\n: 0,\n                \nhours\n: 0,\n                \nminutes\n: 5\n            }\n        },\n        \nACL\n: [\n*\n]\n    }\n}' \nhttps://api.scorocode.ru/api/v1/app/scripts/create\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \nscript\n: {\n    \n_id\n: \n584fad1422a5482feb5b31ab\n,\n    \nappId\n: \n584e64f8982fd55332741516\n,\n    \nname\n: \nAYBABTU.js\n,\n    \npath\n: \n/AYBABTU.js\n,\n    \ndescription\n: \nAll your base\n,\n    \ncode\n: \nconsole.log(\\\nQWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\\n);\n,\n    \njobStartAt\n: \n2016-12-13T17:33:00+03:00\n,\n    \nisActiveJob\n: false,\n    \njobType\n: \ncustom\n,\n    \nrepeat\n: {\n      \ncustom\n: {\n        \ndays\n: 0,\n        \nhours\n: 0,\n        \nminutes\n: 5\n      },\n      \ndaily\n: null,\n      \nmonthly\n: null\n    },\n    \nnextRun\n: \n0001-01-01T00:00:00Z\n,\n    \nACL\n: [\n      \n*\n\n    ]\n  }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUpdate server-side script\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/update\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n\n    {\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \nscript\n: \n             // server-side script identifier, mandatory\n    \ncloudCode\n: {\n        \npath\n: \n                // full path and script name, mandatory\n        \ndescription\n: \n,        // description, optional\n        \ncode\n: \n,               // server-side script code, optional\n        \njobStartAt\n: \ndatetime\n, // timer start datetime, optional\n        \nisActiveJob\n: bool,      // timer activation flag, optional\n        \njobType\n: \n,            // timer type, optional, custom || daily || monthly\n        \nrepeat\n: {               // timer repeat settings, optional\n            \ncustom\n: {\n                \ndays\n: int,\n                \nhours\n: int,\n                \nminutes\n: int\n            },\n            \ndaily\n: {\n                \non\n: [int],\n                \nhours\n: int,\n                \nminutes\n: int\n            }\n            \nmonthly\n: {\n                \non\n: [int],\n                \ndays\n: [int],\n                \nlastDate\n: bool,\n                \nhours\n: int,\n                \nminutes\n: int\n            }\n        },\n        \nACL\n: []                 // server-side script ACL settings, optional, array of user ids and/or \n*\n for anonymous access\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \nscript\n: \n584fad1422a5482feb5b31ab\n,\n    \ncloudCode\n: {\n        \nisActiveJob\n: true    \n    }\n}' \nhttps://api.scorocode.ru/api/v1/app/scripts/update\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \nscript\n: {\n    \n_id\n: \n584fad1422a5482feb5b31ab\n,\n    \nappId\n: \n584e64f8982fd55332741516\n,\n    \nname\n: \nAYBABTU.js\n,\n    \npath\n: \n/AYBABTU.js\n,\n    \ndescription\n: \nAll your base\n,\n    \ncode\n: \nconsole.log(\\\nQWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\\n);\n,\n    \njobStartAt\n: \n2016-12-13T17:33:00+03:00\n,\n    \nisActiveJob\n: true,\n    \njobType\n: \ncustom\n,\n    \nrepeat\n: {\n      \ncustom\n: {\n        \ndays\n: 0,\n        \nhours\n: 0,\n        \nminutes\n: 5\n      },\n      \ndaily\n: null,\n      \nmonthly\n: null\n    },\n    \nnextRun\n: \n0001-01-01T00:00:00Z\n,\n    \nACL\n: [\n      \n*\n\n    ]\n  }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete server-side script\n\n\nhttps://api.scorocode.ru/api/v1/app/scripts/delete\n\n\nMethod: \nPOST\n\n\nHeaders:\n\n\nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \nscript\n: \n             // server-side script identifier, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \nscript\n: \n584fad1422a5482feb5b31ab\n\n}' \nhttps://api.scorocode.ru/api/v1/app/scripts/delete\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetreive bots list\n\n\nhttps://api.scorocode.ru/api/v1/bots\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n                // access key, mandatory, masterKey only\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n\n}' \nhttps://api.scorocode.ru/api/v1/bots\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false,\n  \nitems\n: [\n    {\n      \n_id\n: \n584fb8710c62722cf9fe2617\n,\n      \nname\n: \nbotobot\n,\n      \nbotId\n: \n123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n,\n      \nappId\n: \n584e64f8982fd55332741516\n,\n      \nscriptId\n: \n584fb52f0c62722cf9fe2604\n,\n      \nisActive\n: false\n    }\n  ]\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCreate new bot\n\n\nhttps://api.scorocode.ru/api/v1/bots/create\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \nbot\n: {\n        \nname\n: \n,          // bot name, mandatory\n        \nbotId\n: \n,         // telegram token you received from @BotFather, mandatory \n        \nscriptId\n: \n,      // server-side script identifier, mandatory\n        \nisActive\n: bool     // bot activation flag, optional\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \nbot\n:{\n        \nname\n:\nbotobot\n,\n        \nisActive\n:false,\n        \nbotId\n:\n123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n,\n        \nscriptId\n:\n584fb52f0c62722cf9fe2604\n\n    }\n}' \nhttps://api.scorocode.ru/api/v1/bots/create\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nbot\n: {\n    \n_id\n: \n584fb8710c62722cf9fe2617\n,\n    \nname\n: \nbotobot\n,\n    \nbotId\n: \n123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n,\n    \nappId\n: \n584e64f8982fd55332741516\n,\n    \nscriptId\n: \n584fb52f0c62722cf9fe2604\n,\n    \nisActive\n: false\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUpdate bot\n\n\nhttps://api.scorocode.ru/api/v1/bots/update\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \nbot\n: {\n        \n_id\n: \n,           // bot identifier, mandatory\n        \nname\n: \n,          // bot name, optional\n        \nbotId\n: \n,         // telegram token you received from @BotFather, optional \n        \nscriptId\n: \n,      // server-side script identifier, optional\n        \nisActive\n: bool     // bot activation flag, optional\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \nbot\n: {\n        \n_id\n: \n584fbd067e0b4e222480a7e4\n,\n        \nname\n: \nbotobot\n,\n        \nbotId\n: \n123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew12\n,\n        \nappId\n: \n584e64f8982fd55332741516\n,\n        \nscriptId\n: \n584fb52f0c62722cf9fe2604\n,\n        \nisActive\n: false\n    }\n}' \nhttps://api.scorocode.ru/api/v1/bots/update\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nbot\n: {\n    \n_id\n: \n584fbd067e0b4e222480a7e4\n,\n    \nname\n: \nbotobot\n,\n    \nbotId\n: \n123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew12\n,\n    \nappId\n: \n584e64f8982fd55332741516\n,\n    \nscriptId\n: \n584fb52f0c62722cf9fe2604\n,\n    \nisActive\n: false\n  },\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete bot\n\n\nhttps://api.scorocode.ru/api/v1/bots/delete\n\n\nMethod: \nPOST\n\n\nHeaders:\n\n\nContent-Type: application/json\n\n\n{\n    \napp\n: \n,               // application identifier, mandatory\n    \ncli\n: \n,               // client key, mandatory\n    \nacc\n: \n,               // access key, mandatory, masterKey only\n    \nbot\n: {\n        \n_id\n: \n            // bot identifier, mandatory\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \nacc\n: \nffe86fefg25fbklacsdee8cd4c59644a\n,\n    \napp\n: \n48f172923acd719b42c73ac3a492cfc8\n,\n    \ncli\n: \nd6859f41223c9997ff78c6b4vb3a96bb\n,\n    \nbot\n: {\n        \n_id\n: \n584fbd067e0b4e222480a7e4\n\n    }\n}' \nhttps://api.scorocode.ru/api/v1/bots/delete\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n  \nerror\n: false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Working with application"
        }, 
        {
            "location": "/httpapi/appapi/#get-application-info", 
            "text": "https://api.scorocode.ru/api/v1/app  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :    // access key, mandatory, masterKey only\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb \n}'  https://api.scorocode.ru/api/v1/app   Responses:   Success  {\n   app : {\n     _id :  584e64f8982fd55332741516 ,\n     appId :  48f172923acd719b42c73ac3a492cfc8 ,\n     name :  HTTPApp ,\n     description :  ,\n     userId :  5745b2123evlfh062612e3f ,\n     serverId :  5745a5e63ef62fs0626ftgeb ,\n     limits : {\n       rps : 20,\n       store : 10737418240,\n       pushValue : 0,\n       pushUsed : 0,\n       developers : 1,\n       ws : 200,\n       scriptTimeout : 3\n    },\n     schemas : {\n       devices : {\n         id :  584e64f8982fd55332741515 ,\n         name :  devices ,\n         useDocsACL : false,\n         ACL : {\n           create : [\n             * \n          ],\n           read : [\n             * \n          ],\n           remove : [\n             * \n          ],\n           update : [\n             * \n          ]\n        },\n         triggers : {\n           afterFind : {\n             code :  ,\n             isActive : false\n          },\n           afterInsert : {\n             code :  ,\n             isActive : false\n          },\n           afterRemove : {\n             code :  ,\n             isActive : false\n          },\n           afterUpdate : {\n             code :  ,\n             isActive : false\n          },\n           beforeInsert : {\n             code :  ,\n             isActive : false\n          },\n           beforeRemove : {\n             code :  ,\n             isActive : false\n          },\n           beforeUpdate : {\n             code :  ,\n             isActive : false\n          }\n        },\n         fields : [\n          {\n             name :  readACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  updateACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  removeACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  createdAt ,\n             type :  Date ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          },\n          {\n             name :  updatedAt ,\n             type :  Date ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          },\n          {\n             name :  userId ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  deviceId ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : true\n          },\n          {\n             name :  deviceType ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : true\n          }\n        ],\n         system : true,\n         indexes : []\n      },\n       roles : {\n         id :  584e64f8982fd55332741513 ,\n         name :  roles ,\n         useDocsACL : false,\n         ACL : {\n           create : [\n             * \n          ],\n           read : [\n             * \n          ],\n           remove : [\n             * \n          ],\n           update : [\n             * \n          ]\n        },\n         triggers : {\n           afterFind : {\n             code :  ,\n             isActive : false\n          },\n           afterInsert : {\n             code :  ,\n             isActive : false\n          },\n           afterRemove : {\n             code :  ,\n             isActive : false\n          },\n           afterUpdate : {\n             code :  ,\n             isActive : false\n          },\n           beforeInsert : {\n             code :  ,\n             isActive : false\n          },\n           beforeRemove : {\n             code :  ,\n             isActive : false\n          },\n           beforeUpdate : {\n             code :  ,\n             isActive : false\n          }\n        },\n         fields : [\n          {\n             name :  name ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : true\n          },\n          {\n             name :  readACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  updateACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  removeACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  createdAt ,\n             type :  Date ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          },\n          {\n             name :  updatedAt ,\n             type :  Date ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          }\n        ],\n         system : true,\n         indexes : []\n      },\n       users : {\n         id :  584e64f8982fd55332741514 ,\n         name :  users ,\n         useDocsACL : false,\n         ACL : {\n           create : [\n             * \n          ],\n           read : [\n             * \n          ],\n           remove : [\n             * \n          ],\n           update : [\n             * \n          ]\n        },\n         triggers : {\n           afterFind : {\n             code :  ,\n             isActive : false\n          },\n           afterInsert : {\n             code :  ,\n             isActive : false\n          },\n           afterRemove : {\n             code :  ,\n             isActive : false\n          },\n           afterUpdate : {\n             code :  ,\n             isActive : false\n          },\n           beforeInsert : {\n             code :  ,\n             isActive : false\n          },\n           beforeRemove : {\n             code :  ,\n             isActive : false\n          },\n           beforeUpdate : {\n             code :  ,\n             isActive : false\n          }\n        },\n         fields : [\n          {\n             name :  email ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : true\n          },\n          {\n             name :  phone ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  readACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  updateACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  removeACL ,\n             type :  ACL ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  createdAt ,\n             type :  Date ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          },\n          {\n             name :  updatedAt ,\n             type :  Date ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          },\n          {\n             name :  username ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : true\n          },\n          {\n             name :  password ,\n             type :  Password ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : true\n          },\n          {\n             name :  emailVerified ,\n             type :  Boolean ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          },\n          {\n             name :  roles ,\n             type :  Array ,\n             target :  ,\n             system : true,\n             readonly : false,\n             required : false\n          },\n          {\n             name :  token ,\n             type :  String ,\n             target :  ,\n             system : true,\n             readonly : true,\n             required : false\n          }\n        ],\n         system : true,\n         indexes : []\n      }\n    },\n     accessKeys : {\n       fileKey :  31adc32bac245299cfad0d7b1912bc2a ,\n       masterKey :  ffe86fefg25fbklacsdee8cd4c59644a ,\n       messageKey :  605a1248a2d27424ec43f6bdf435b0a7 ,\n       scriptKey :  333efb738b82c3096a3fgdbabd27f702 ,\n       websocketKey :  9627612736b1129d2ea9d615fb482a41 \n    },\n     clientKeys : {\n       android :  db993776551ed6267fbe256ef0296cb8 ,\n       ios :  840ff61458ec11bf411859dbbf46d46a ,\n       javascript :  d6859f41223c9997ff78c6b4vb3a96bb ,\n       winphone :  3fbce82fafba9dccc60036f92b971654 \n    },\n     readonly : true,\n     ACLPublic : {\n       create : false,\n       read : false,\n       remove : false,\n       update : false\n    },\n     settings : {\n       emailVerified : false,\n       sessionTimeout : 72,\n       androidApiKey :  ,\n       gcmSenderId :  ,\n       mailTemplates : {\n         forgot : {\n           subject :  ,\n           body :  \n        },\n         reg : {\n           subject :  ,\n           body :  \n        }\n      },\n       smtp : null\n    },\n     storage : {\n       user :  ,\n       password :  \n    },\n     npm :  {\\ dependencies\\ :{}} ,\n     stringId :  584e64f8982fd55332741516 \n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Get application info"
        }, 
        {
            "location": "/httpapi/appapi/#retrieve-list-of-collections-and-their-settings", 
            "text": "https://api.scorocode.ru/api/v1/app/collections  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :    // access key, mandatory, masterKey only\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb \n}'  https://api.scorocode.ru/api/v1/app/collections    Success  {\n   collections : {\n     devices : {\n       id :  584e64f8982fd55332741515 ,\n       name :  devices ,\n       useDocsACL : false,\n       ACL : {\n         create : [\n           * \n        ],\n         read : [\n           * \n        ],\n         remove : [\n           * \n        ],\n         update : [\n           * \n        ]\n      },\n       triggers : {\n         afterFind : {\n           code :  ,\n           isActive : false\n        },\n         afterInsert : {\n           code :  ,\n           isActive : false\n        },\n         afterRemove : {\n           code :  ,\n           isActive : false\n        },\n         afterUpdate : {\n           code :  ,\n           isActive : false\n        },\n         beforeInsert : {\n           code :  ,\n           isActive : false\n        },\n         beforeRemove : {\n           code :  ,\n           isActive : false\n        },\n         beforeUpdate : {\n           code :  ,\n           isActive : false\n        }\n      },\n       fields : [\n        {\n           name :  readACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  updateACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  removeACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  createdAt ,\n           type :  Date ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        },\n        {\n           name :  updatedAt ,\n           type :  Date ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        },\n        {\n           name :  userId ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  deviceId ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : true\n        },\n        {\n           name :  deviceType ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : true\n        }\n      ],\n       system : true,\n       indexes : []\n    },\n     roles : {\n       id :  584e64f8982fd55332741513 ,\n       name :  roles ,\n       useDocsACL : false,\n       ACL : {\n         create : [\n           * \n        ],\n         read : [\n           * \n        ],\n         remove : [\n           * \n        ],\n         update : [\n           * \n        ]\n      },\n       triggers : {\n         afterFind : {\n           code :  ,\n           isActive : false\n        },\n         afterInsert : {\n           code :  ,\n           isActive : false\n        },\n         afterRemove : {\n           code :  ,\n           isActive : false\n        },\n         afterUpdate : {\n           code :  ,\n           isActive : false\n        },\n         beforeInsert : {\n           code :  ,\n           isActive : false\n        },\n         beforeRemove : {\n           code :  ,\n           isActive : false\n        },\n         beforeUpdate : {\n           code :  ,\n           isActive : false\n        }\n      },\n       fields : [\n        {\n           name :  name ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : true\n        },\n        {\n           name :  readACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  updateACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  removeACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  createdAt ,\n           type :  Date ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        },\n        {\n           name :  updatedAt ,\n           type :  Date ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        }\n      ],\n       system : true,\n       indexes : []\n    },\n     users : {\n       id :  584e64f8982fd55332741514 ,\n       name :  users ,\n       useDocsACL : false,\n       ACL : {\n         create : [\n           * \n        ],\n         read : [\n           * \n        ],\n         remove : [\n           * \n        ],\n         update : [\n           * \n        ]\n      },\n       triggers : {\n         afterFind : {\n           code :  ,\n           isActive : false\n        },\n         afterInsert : {\n           code :  ,\n           isActive : false\n        },\n         afterRemove : {\n           code :  ,\n           isActive : false\n        },\n         afterUpdate : {\n           code :  ,\n           isActive : false\n        },\n         beforeInsert : {\n           code :  ,\n           isActive : false\n        },\n         beforeRemove : {\n           code :  ,\n           isActive : false\n        },\n         beforeUpdate : {\n           code :  ,\n           isActive : false\n        }\n      },\n       fields : [\n        {\n           name :  email ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : true\n        },\n        {\n           name :  phone ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  readACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  updateACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  removeACL ,\n           type :  ACL ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  createdAt ,\n           type :  Date ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        },\n        {\n           name :  updatedAt ,\n           type :  Date ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        },\n        {\n           name :  username ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : true\n        },\n        {\n           name :  password ,\n           type :  Password ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : true\n        },\n        {\n           name :  emailVerified ,\n           type :  Boolean ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        },\n        {\n           name :  roles ,\n           type :  Array ,\n           target :  ,\n           system : true,\n           readonly : false,\n           required : false\n        },\n        {\n           name :  token ,\n           type :  String ,\n           target :  ,\n           system : true,\n           readonly : true,\n           required : false\n        }\n      ],\n       system : true,\n       indexes : []\n    }\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retrieve list of collections and their settings"
        }, 
        {
            "location": "/httpapi/appapi/#retrieve-collection-info", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/get  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, mandatory, masterKey only\n     coll         :    // collection name, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         coll :  devices \n}'  https://api.scorocode.ru/api/v1/app/collections/get   Responses:   Success  {\n   collection : {\n     id :  584e64f8982fd55332741515 ,\n     name :  devices ,\n     useDocsACL : false,\n     ACL : {\n       create : [\n         * \n      ],\n       read : [\n         * \n      ],\n       remove : [\n         * \n      ],\n       update : [\n         * \n      ]\n    },\n     triggers : {\n       afterFind : {\n         code :  ,\n         isActive : false\n      },\n       afterInsert : {\n         code :  ,\n         isActive : false\n      },\n       afterRemove : {\n         code :  ,\n         isActive : false\n      },\n       afterUpdate : {\n         code :  ,\n         isActive : false\n      },\n       beforeInsert : {\n         code :  ,\n         isActive : false\n      },\n       beforeRemove : {\n         code :  ,\n         isActive : false\n      },\n       beforeUpdate : {\n         code :  ,\n         isActive : false\n      }\n    },\n     fields : [\n      {\n         name :  readACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  updateACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  removeACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  createdAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  updatedAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  userId ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  deviceId ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : true\n      },\n      {\n         name :  deviceType ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : true\n      }\n    ],\n     system : true,\n     indexes : []\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retrieve collection info."
        }, 
        {
            "location": "/httpapi/appapi/#create-new-collection", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/create  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     collection : {          \n         name :  ,          // collection name, mandatory  \n         useDocsACL : bool,  //  use documents ACL  flag, optional\n         ACL : {}            // ACL settings, optional\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         collection : {\n             name :  apicoll ,\n             useDocsACL : false,\n             ACL : {\n                 create : [\n                     R5VGMes94p \n                ],\n                 read : [\n                     * ,\n                     R5VGMes94p \n                ],\n                 remove : [\n                     R5VGMes94p \n                ],\n                 update : [\n                     R5VGMes94p \n                ]\n            }\n        }\n}'  https://api.scorocode.ru/api/v1/app/collections/create   Responses:   Success  {\n   collection : {\n     id :  584e849e7e0b4e222480a282 ,\n     name :  apicoll ,\n     useDocsACL : false,\n     ACL : {\n         create : [\n             R5VGMes94p \n        ],\n         read : [\n             * ,\n             R5VGMes94p \n        ],\n         remove : [\n             R5VGMes94p \n        ],\n         update : [\n             R5VGMes94p \n        ]\n    },\n     triggers : {\n       afterInsert : {\n         code :  ,\n         isActive : false\n      },\n       afterRemove : {\n         code :  ,\n         isActive : false\n      },\n       afterUpdate : {\n         code :  ,\n         isActive : false\n      },\n       beforeInsert : {\n         code :  ,\n         isActive : false\n      },\n       beforeRemove : {\n         code :  ,\n         isActive : false\n      },\n       beforeUpdate : {\n         code :  ,\n         isActive : false\n      }\n    },\n     fields : [\n      {\n         name :  readACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  updateACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  removeACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  createdAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  updatedAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      }\n    ],\n     system : false,\n     indexes : []\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new collection"
        }, 
        {
            "location": "/httpapi/appapi/#update-collection-settings", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/update  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     collection : {\n         id :  ,            // collection identifier, mandatory           \n         name :  ,          // collection name, optional  \n         useDocsACL : bool,  //  use documents ACL  flag, optional\n         ACL : {}            // ACL settings, optional\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         collection : {\n           id :  584e852276e5e715e6ec2e8c ,\n           useDocsACL : true,\n           ACL : {}\n        }\n}'  https://api.scorocode.ru/api/v1/app/collections/update   Responses:   Success  {\n   collection : {\n     id :  584e849e7e0b4e222480a282 ,\n     name :  apicoll ,\n     useDocsACL : true,\n     ACL : {\n         create : [\n             R5VGMes94p \n        ],\n         read : [\n             * ,\n             R5VGMes94p \n        ],\n         remove : [\n             R5VGMes94p \n        ],\n         update : [\n             R5VGMes94p \n        ]\n    },\n     triggers : {\n       afterInsert : {\n         code :  ,\n         isActive : false\n      },\n       afterRemove : {\n         code :  ,\n         isActive : false\n      },\n       afterUpdate : {\n         code :  ,\n         isActive : false\n      },\n       beforeInsert : {\n         code :  ,\n         isActive : false\n      },\n       beforeRemove : {\n         code :  ,\n         isActive : false\n      },\n       beforeUpdate : {\n         code :  ,\n         isActive : false\n      }\n    },\n     fields : [\n      {\n         name :  readACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  updateACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  removeACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  createdAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  updatedAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      }\n    ],\n     system : false,\n     indexes : []\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Update collection settings"
        }, 
        {
            "location": "/httpapi/appapi/#delete-collection", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/delete  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     collection : {\n         id :               // collection identifier, mandatory           \n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         collection : {\n             id :  584e849e7e0b4e222480a282 ,\n}'  https://api.scorocode.ru/api/v1/app/collections/delete   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete collection"
        }, 
        {
            "location": "/httpapi/appapi/#clone-collection", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/clone  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     collection : {\n         id :               // collection identifier, mandatory           \n         name :             // new collection name, mandatory\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         collection : {\n             id :  584e91b77e0b4e222480a316 ,\n             name :  clonedcoll            \n        }\n}'  https://api.scorocode.ru/api/v1/app/collections/clone   Responses:   Success  {\n   collection : {\n     id :  584e91e70c62722cf9fe2191 ,\n     name :  clonedcoll ,\n     useDocsACL : false,\n     ACL : {},\n     triggers : {\n       afterInsert : {\n         code :  ,\n         isActive : false\n      },\n       afterRemove : {\n         code :  ,\n         isActive : false\n      },\n       afterUpdate : {\n         code :  ,\n         isActive : false\n      },\n       beforeInsert : {\n         code :  ,\n         isActive : false\n      },\n       beforeRemove : {\n         code :  ,\n         isActive : false\n      },\n       beforeUpdate : {\n         code :  ,\n         isActive : false\n      }\n    },\n     fields : [\n      {\n         name :  readACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  updateACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  removeACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  createdAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  updatedAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      }\n    ],\n     system : false,\n     indexes : []\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Clone collection"
        }, 
        {
            "location": "/httpapi/appapi/#create-new-collections-index", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/index/create  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     coll :  ,              // collection name, mandatory\n     index : {\n         name :  ,                    // index name, mandatory\n         fields : [\n            {\n                 name :  ,            // field name, mandatory\n                 order : 1 || -1       // sorting order, mandatory\n            }\n        ]\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         coll :  users ,\n         index : {\n             name :  emailIndex ,                    \n             fields : [\n                {\n                     name :  email ,            \n                     order : 1       \n                }\n            ]\n        }\n}'  https://api.scorocode.ru/api/v1/app/collections/index/create   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new collection's index"
        }, 
        {
            "location": "/httpapi/appapi/#delete-collections-index", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/index/delete  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     coll :  ,              // collection name, mandatory\n     index : {\n         name :             // index name, mandatory\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         coll :  users ,\n         index : {\n             name :  emailIndex                     \n        }\n}'  https://api.scorocode.ru/api/v1/app/collections/index/delete   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete collection's index"
        }, 
        {
            "location": "/httpapi/appapi/#create-new-collections-field", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/fields/create  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     coll :  ,              // collection name, mandatory\n     collField : {     \n         name :  ,          // field name, mandatory\n         type :  ,          // field data type, mandatory\n         target :           // target collection name, mandatory for Pointer || Relation data type fields\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     coll :  users ,                       \n     collField : {\n         name :  pointer ,         \n         type :  Pointer ,         \n         target :  devices           \n    }\n}'  https://api.scorocode.ru/api/v1/app/collections/fields/create   Responses:   Success  {\n   error : false,\n   field : {\n     name :  pointer ,\n     type :  Pointer ,\n     target :  devices ,\n     system : false,\n     readonly : false,\n     required : false\n  }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new collection's field"
        }, 
        {
            "location": "/httpapi/appapi/#delete-collections-field", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/fields/delete  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     coll :  ,              // collection name, mandatory\n     collField : {   \n         name :             // field name, mandatory\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     coll :  users ,                       \n     collField : {\n         name :  pointer \n    }\n}'  https://api.scorocode.ru/api/v1/app/collections/fields/delete   Responses:   Success  {\n   collection : {\n     id :  584e64f8982fd55332741514 ,\n     name :  users ,\n     useDocsACL : false,\n     ACL : {\n       create : [\n         * \n      ],\n       read : [\n         * \n      ],\n       remove : [\n         * \n      ],\n       update : [\n         * \n      ]\n    },\n     triggers : {\n       afterFind : {\n         code :  ,\n         isActive : false\n      },\n       afterInsert : {\n         code :  ,\n         isActive : false\n      },\n       afterRemove : {\n         code :  ,\n         isActive : false\n      },\n       afterUpdate : {\n         code :  ,\n         isActive : false\n      },\n       beforeInsert : {\n         code :  ,\n         isActive : false\n      },\n       beforeRemove : {\n         code :  ,\n         isActive : false\n      },\n       beforeUpdate : {\n         code :  ,\n         isActive : false\n      }\n    },\n     fields : [\n      {\n         name :  email ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : true\n      },\n      {\n         name :  phone ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  readACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  updateACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  removeACL ,\n         type :  ACL ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  createdAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  updatedAt ,\n         type :  Date ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  username ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : true\n      },\n      {\n         name :  password ,\n         type :  Password ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : true\n      },\n      {\n         name :  emailVerified ,\n         type :  Boolean ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      },\n      {\n         name :  roles ,\n         type :  Array ,\n         target :  ,\n         system : true,\n         readonly : false,\n         required : false\n      },\n      {\n         name :  token ,\n         type :  String ,\n         target :  ,\n         system : true,\n         readonly : true,\n         required : false\n      }\n    ],\n     system : true,\n     indexes : []\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete collection's field"
        }, 
        {
            "location": "/httpapi/appapi/#update-collections-triggers", 
            "text": "https://api.scorocode.ru/api/v1/app/collections/triggers  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     coll :  ,              // collection name, mandatory\n     triggers : {\n         beforeInsert : {      \n             code :  ,       // trigger code, optional\n             isActive : bool  // trigger activation flag, optional\n        },\n         afterInsert : {\n             code :  ,       // trigger code, optional\n             isActive : bool  // trigger activation flag, optional\n        },\n         beforeUpdate : {\n             code :  ,       // trigger code, optional\n             isActive : bool  // trigger activation flag, optional\n        },\n         afterUpdate : {\n             code :  ,       // trigger code, optional\n             isActive : bool  // trigger activation flag, optional\n        },\n         beforeRemove : {\n             code :  ,       // trigger code, optional\n             isActive : bool  // trigger activation flag, optional\n        },\n         afterRemove : {\n             code :  ,       // trigger code, optional\n             isActive : bool  // trigger activation flag, optional\n        }\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     coll :  users ,                       \n     triggers : {\n          afterInsert : {\n             code :  DataManager.Insert({\\n  coll:'logs', \\n  doc: {\\n    'docId': pool.newDoc._id,\\n    'collection': 'users',\\n    'operation': 'register',\\n    'data': pool.newDoc\\n    }\\n  }); ,       \n             isActive : true\n        }\n    }\n}\n'  https://api.scorocode.ru/api/v1/app/collections/triggers   Responses:   Success  {\n   error : false,\n   triggers : {\n     afterFind : {\n       code :  ,\n       isActive : false\n    },\n     afterInsert : {\n       code :  DataManager.Insert({\\n  coll:'logs', \\n  doc: {\\n    'docId': pool.newDoc._id,\\n    'collection': 'users',\\n    'operation': 'register',\\n    'data': pool.newDoc\\n    }\\n  }); ,\n       isActive : true\n    },\n     afterRemove : {\n       code :  ,\n       isActive : false\n    },\n     afterUpdate : {\n       code :  ,\n       isActive : false\n    },\n     beforeInsert : {\n       code :  ,\n       isActive : false\n    },\n     beforeRemove : {\n       code :  ,\n       isActive : false\n    },\n     beforeUpdate : {\n       code :  ,\n       isActive : false\n    }\n  }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Update collection's triggers"
        }, 
        {
            "location": "/httpapi/appapi/#retreive-folders-and-scripts-list", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/folders  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     path :                 // full path to directory, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     path :  / \n}'  https://api.scorocode.ru/api/v1/app/scripts/folders   Responses:   Success  {\n   error : false,\n   items : [\n    {\n       _id :  ,\n       name :  folder1 ,\n       path :  /folder1 ,\n       isScript : false\n    },\n    {\n       _id :  ,\n       name :  folder2 ,\n       path :  /folder2 ,\n       isScript : false\n    },\n    {\n       _id :  584eb26a42d52f1ba275fdb2 ,\n       name :  somescript.js ,\n       path :  /somescript.js ,\n       isScript : true\n    }\n  ]\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retreive folders and scripts list"
        }, 
        {
            "location": "/httpapi/appapi/#create-new-folder", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/folders/create  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     path :                 // full path to directory, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     path :  /folder1/newfolder \n}'  https://api.scorocode.ru/api/v1/app/scripts/folders/create   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new folder"
        }, 
        {
            "location": "/httpapi/appapi/#delete-folder", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/folders/delete  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     path :                 // full path to directory, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n         acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n         app :  48f172923acd719b42c73ac3a492cfc8 ,\n         cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n         coll :  users ,\n         index : {\n             name :  emailIndex                     \n        }\n}'  https://api.scorocode.ru/api/v1/app/collections/index/delete   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete folder"
        }, 
        {
            "location": "/httpapi/appapi/#retreive-server-side-script", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/get  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     script :               // server-side script identifier, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     script :  584eb54142d52f1ba275fdb3 \n}'  https://api.scorocode.ru/api/v1/app/scripts/get   Responses:   Success  {\n   error : false,\n   script : {\n     _id :  584eb54142d52f1ba275fdb3 ,\n     appId :  584e64f8982fd55332741516 ,\n     name :  AYBABTU.js ,\n     path :  /AYBABTU.js ,\n     description :  ,\n     code :  console.log(\\ QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\ ); ,\n     jobStartAt :  2016-12-12T17:33:00+03:00 ,\n     isActiveJob : false,\n     jobType :  once ,\n     repeat : {\n       custom : {\n         days : 0,\n         hours : 0,\n         minutes : 0\n      },\n       daily : {\n         on : [],\n         hours : 0,\n         minutes : 0\n      },\n       monthly : {\n         on : [],\n         days : [],\n         lastDate : false,\n         hours : 0,\n         minutes : 0\n      }\n    },\n     nextRun :  2016-12-12T17:33:00+03:00 ,\n     ACL : [\n       * \n    ]\n  }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retreive server-side script"
        }, 
        {
            "location": "/httpapi/appapi/#create-new-server-side-script", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/create  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     cloudCode : {\n         path :                  // full path and script name, mandatory\n         description :  ,        // description, optional\n         code :  ,               // server-side script code, optional\n         jobStartAt :  datetime , // timer start datetime, optional\n         isActiveJob : bool,      // timer activation flag, optional\n         jobType :  ,            // timer type, optional, custom || daily || monthly\n         repeat : {               // timer repeat settings, optional\n             custom : {\n                 days : int,\n                 hours : int,\n                 minutes : int\n            },\n             daily : {\n                 on : [int],\n                 hours : int,\n                 minutes : int\n            }\n             monthly : {\n                 on : [int],\n                 days : [int],\n                 lastDate : bool,\n                 hours : int,\n                 minutes : int\n            }\n        }\n         ACL : []                 // server-side script ACL settings, optional, array of user ids and/or  *  for anonymous access\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     cloudCode : {\n         path :  /AYBABTU.js ,\n         description :  All your base ,      \n         code :  console.log(\\ QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\ ); ,             \n         jobStartAt :  2016-12-13T17:33:00+03:00 , \n         isActiveJob : false,    \n         jobType :  custom ,           \n         repeat : {             \n             custom : {\n                 days : 0,\n                 hours : 0,\n                 minutes : 5\n            }\n        },\n         ACL : [ * ]\n    }\n}'  https://api.scorocode.ru/api/v1/app/scripts/create   Responses:   Success  {\n   error : false,\n   script : {\n     _id :  584fad1422a5482feb5b31ab ,\n     appId :  584e64f8982fd55332741516 ,\n     name :  AYBABTU.js ,\n     path :  /AYBABTU.js ,\n     description :  All your base ,\n     code :  console.log(\\ QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\ ); ,\n     jobStartAt :  2016-12-13T17:33:00+03:00 ,\n     isActiveJob : false,\n     jobType :  custom ,\n     repeat : {\n       custom : {\n         days : 0,\n         hours : 0,\n         minutes : 5\n      },\n       daily : null,\n       monthly : null\n    },\n     nextRun :  0001-01-01T00:00:00Z ,\n     ACL : [\n       * \n    ]\n  }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new server-side script"
        }, 
        {
            "location": "/httpapi/appapi/#update-server-side-script", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/update  Method:  POST  Headers:  Content-Type: application/json  {\n\n    {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     script :               // server-side script identifier, mandatory\n     cloudCode : {\n         path :                  // full path and script name, mandatory\n         description :  ,        // description, optional\n         code :  ,               // server-side script code, optional\n         jobStartAt :  datetime , // timer start datetime, optional\n         isActiveJob : bool,      // timer activation flag, optional\n         jobType :  ,            // timer type, optional, custom || daily || monthly\n         repeat : {               // timer repeat settings, optional\n             custom : {\n                 days : int,\n                 hours : int,\n                 minutes : int\n            },\n             daily : {\n                 on : [int],\n                 hours : int,\n                 minutes : int\n            }\n             monthly : {\n                 on : [int],\n                 days : [int],\n                 lastDate : bool,\n                 hours : int,\n                 minutes : int\n            }\n        },\n         ACL : []                 // server-side script ACL settings, optional, array of user ids and/or  *  for anonymous access\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     script :  584fad1422a5482feb5b31ab ,\n     cloudCode : {\n         isActiveJob : true    \n    }\n}'  https://api.scorocode.ru/api/v1/app/scripts/update   Responses:   Success  {\n   error : false,\n   script : {\n     _id :  584fad1422a5482feb5b31ab ,\n     appId :  584e64f8982fd55332741516 ,\n     name :  AYBABTU.js ,\n     path :  /AYBABTU.js ,\n     description :  All your base ,\n     code :  console.log(\\ QWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\\ ); ,\n     jobStartAt :  2016-12-13T17:33:00+03:00 ,\n     isActiveJob : true,\n     jobType :  custom ,\n     repeat : {\n       custom : {\n         days : 0,\n         hours : 0,\n         minutes : 5\n      },\n       daily : null,\n       monthly : null\n    },\n     nextRun :  0001-01-01T00:00:00Z ,\n     ACL : [\n       * \n    ]\n  }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Update server-side script"
        }, 
        {
            "location": "/httpapi/appapi/#delete-server-side-script", 
            "text": "https://api.scorocode.ru/api/v1/app/scripts/delete  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     script :               // server-side script identifier, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     script :  584fad1422a5482feb5b31ab \n}'  https://api.scorocode.ru/api/v1/app/scripts/delete   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete server-side script"
        }, 
        {
            "location": "/httpapi/appapi/#retreive-bots-list", 
            "text": "https://api.scorocode.ru/api/v1/bots  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :                  // access key, mandatory, masterKey only\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb \n}'  https://api.scorocode.ru/api/v1/bots   Responses:   Success  {\n   error : false,\n   items : [\n    {\n       _id :  584fb8710c62722cf9fe2617 ,\n       name :  botobot ,\n       botId :  123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11 ,\n       appId :  584e64f8982fd55332741516 ,\n       scriptId :  584fb52f0c62722cf9fe2604 ,\n       isActive : false\n    }\n  ]\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retreive bots list"
        }, 
        {
            "location": "/httpapi/appapi/#create-new-bot", 
            "text": "https://api.scorocode.ru/api/v1/bots/create  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     bot : {\n         name :  ,          // bot name, mandatory\n         botId :  ,         // telegram token you received from @BotFather, mandatory \n         scriptId :  ,      // server-side script identifier, mandatory\n         isActive : bool     // bot activation flag, optional\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     bot :{\n         name : botobot ,\n         isActive :false,\n         botId : 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11 ,\n         scriptId : 584fb52f0c62722cf9fe2604 \n    }\n}'  https://api.scorocode.ru/api/v1/bots/create   Responses:   Success  {\n   bot : {\n     _id :  584fb8710c62722cf9fe2617 ,\n     name :  botobot ,\n     botId :  123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11 ,\n     appId :  584e64f8982fd55332741516 ,\n     scriptId :  584fb52f0c62722cf9fe2604 ,\n     isActive : false\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new bot"
        }, 
        {
            "location": "/httpapi/appapi/#update-bot", 
            "text": "https://api.scorocode.ru/api/v1/bots/update  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     bot : {\n         _id :  ,           // bot identifier, mandatory\n         name :  ,          // bot name, optional\n         botId :  ,         // telegram token you received from @BotFather, optional \n         scriptId :  ,      // server-side script identifier, optional\n         isActive : bool     // bot activation flag, optional\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     bot : {\n         _id :  584fbd067e0b4e222480a7e4 ,\n         name :  botobot ,\n         botId :  123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew12 ,\n         appId :  584e64f8982fd55332741516 ,\n         scriptId :  584fb52f0c62722cf9fe2604 ,\n         isActive : false\n    }\n}'  https://api.scorocode.ru/api/v1/bots/update   Responses:   Success  {\n   bot : {\n     _id :  584fbd067e0b4e222480a7e4 ,\n     name :  botobot ,\n     botId :  123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew12 ,\n     appId :  584e64f8982fd55332741516 ,\n     scriptId :  584fb52f0c62722cf9fe2604 ,\n     isActive : false\n  },\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Update bot"
        }, 
        {
            "location": "/httpapi/appapi/#delete-bot", 
            "text": "https://api.scorocode.ru/api/v1/bots/delete  Method:  POST  Headers:  Content-Type: application/json  {\n     app :  ,               // application identifier, mandatory\n     cli :  ,               // client key, mandatory\n     acc :  ,               // access key, mandatory, masterKey only\n     bot : {\n         _id :              // bot identifier, mandatory\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     acc :  ffe86fefg25fbklacsdee8cd4c59644a ,\n     app :  48f172923acd719b42c73ac3a492cfc8 ,\n     cli :  d6859f41223c9997ff78c6b4vb3a96bb ,\n     bot : {\n         _id :  584fbd067e0b4e222480a7e4 \n    }\n}'  https://api.scorocode.ru/api/v1/bots/delete   Responses:   Success  {\n   error : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete bot"
        }, 
        {
            "location": "/httpapi/httpapi1/", 
            "text": "New user registration.\n\n\nhttps://api.scorocode.ru/api/v1/register\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nusername\n    : \n, // username, mandatory\n    \nemail\n       : \n, // email, mandatory\n    \npassword\n    : \n, // password, mandatory\n    \ndoc\n         : { } // user field values in the \nusers\n collection, optional\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nusername\n: \nusername\n,\n    \nemail\n: \nuseremail@domain.zone\n,\n    \npassword\n: \nCorrectHorseStapleButton\n,\n    \ndoc\n: {\n        \nexampleField\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n,\n        \nanotherExampleField\n: \nI don't know what to say. I used to want to be an astrophysicist. Unfortunately, this is true.\n\n    }\n}\n' \nhttps://api.scorocode.ru/api/v1/register\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUser authentication\n\n\nhttps://api.scorocode.ru/api/v1/login\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nemail\n       : \n, // email, mandatory\n    \npassword\n    : \n, // password, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nemail\n: \nuseremail@domain.zone\n,\n    \npassword\n: \nCorrectHorseStapleButton\n\n}' \nhttps://api.scorocode.ru/api/v1/login\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : {\n        \nsessionId\n     : \n, // session ID\n        \nuser\n          : {}  // Document containing the user information\n    }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUser deauthentication\n\n\nhttps://api.scorocode.ru/api/v1/logout\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nsess\n        : \n  // session ID, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nsess\n: \n6rnbKKGvLLdU9Sl9\n\n}' \nhttps://api.scorocode.ru/api/v1/logout\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Users"
        }, 
        {
            "location": "/httpapi/httpapi1/#new-user-registration", 
            "text": "https://api.scorocode.ru/api/v1/register  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     username     :  , // username, mandatory\n     email        :  , // email, mandatory\n     password     :  , // password, mandatory\n     doc          : { } // user field values in the  users  collection, optional\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     username :  username ,\n     email :  useremail@domain.zone ,\n     password :  CorrectHorseStapleButton ,\n     doc : {\n         exampleField :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! ,\n         anotherExampleField :  I don't know what to say. I used to want to be an astrophysicist. Unfortunately, this is true. \n    }\n}\n'  https://api.scorocode.ru/api/v1/register   Responses:   Success  {\n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "New user registration."
        }, 
        {
            "location": "/httpapi/httpapi1/#user-authentication", 
            "text": "https://api.scorocode.ru/api/v1/login  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     email        :  , // email, mandatory\n     password     :  , // password, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     email :  useremail@domain.zone ,\n     password :  CorrectHorseStapleButton \n}'  https://api.scorocode.ru/api/v1/login   Responses:   Success  {\n     error        : false,\n     result       : {\n         sessionId      :  , // session ID\n         user           : {}  // Document containing the user information\n    }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "User authentication"
        }, 
        {
            "location": "/httpapi/httpapi1/#user-deauthentication", 
            "text": "https://api.scorocode.ru/api/v1/logout  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     sess         :    // session ID, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     sess :  6rnbKKGvLLdU9Sl9 \n}'  https://api.scorocode.ru/api/v1/logout   Responses:   Success  {\n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "User deauthentication"
        }, 
        {
            "location": "/httpapi/httpapi2/", 
            "text": "Create new document\n\n\nhttps://api.scorocode.ru/api/v1/data/insert\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, optional, masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n    \ncoll\n        : \n, // collection name, mandatory\n    \ndoc\n         : {}, // document with field_name:value pairs\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \ndoc\n: {\n        \nexampleField\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n,\n        \nanotherExampleField\n: \nI don't know what to say. I used to want to be an astrophysicist. Unfortunately, this is true.\n\n    }\n}' \nhttps://api.scorocode.ru/api/v1/data/insert\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : {}        // document with field_name:value pairs\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nDelete collection documents.\n\n\nhttps://api.scorocode.ru/api/v1/data/remove\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, optional, masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n    \ncoll\n        : \n, // collection name, mandatory\n    \nquery\n       : {}, // query with field_name/operator:value pairs, optional\n    \nlimit\n       : int // limit, optional, default value is 1000 \n}\n\n\n\n\n\nLimitations\n\n\nDeletes 1000 documents at max\n\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \nquery\n: {\n        \nexampleField\n: { \n            \n$eq\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n\n        }\n    }\n}' \nhttps://api.scorocode.ru/api/v1/data/remove\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : {\n        \ncount\n       : int, // Amount of deleted documents\n        \ndocs\n        : [] // Array of deleted documents _id's\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUpdate collection documents.\n\n\nhttps://api.scorocode.ru/api/v1/data/update\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, mandatory or masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n    \ncoll\n        : \n, // collection name, mandatory\n    \nquery\n       : {}, // query with field_name/operator:value pairs, optional\n    \ndoc\n         : {}, // document with operator:{field_name:value} pairs, mandatory\n    \nlimit\n       : int // limit, optional, default value is 1000 \n}\n\n\n\n\n\nLimitations\n\n\nUpdates 1000 documents at max\n\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \nquery\n: {\n        \nexampleField\n: { \n            \n$eq\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n\n        }\n    },\n     \ndoc\n: {\n        \n$set\n: {\n            \nexampleField\n: \nHappy Birthday, Muriel!\n\n        }\n    },\n    \nlimit\n: 1\n}' \nhttps://api.scorocode.ru/api/v1/data/update\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : {\n        \ncount\n       : int, // Amount of modified documents\n        \ndocs\n        : [] // Array of modified documents _id's\n    }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nUpdate document by _id.\n\n\nhttps://api.scorocode.ru/api/v1/data/updatebyid\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, mandatory or masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n    \ncoll\n        : \n, // collection name, mandatory\n    \nquery\n       : {}, // query with \n_id\n: \ndocument identifier\n pair, mandatory\n    \ndoc\n         : {}, // document with operator:{field_name:value} pairs, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \nquery\n: {\n        \n_id\n : \njQ4ZwEbBUj\n\n    },\n     \ndoc\n: {\n        \n$set\n: {\n            \nexampleField\n: \nHappy Birthday, Muriel!\n\n        }\n    }\n}' \nhttps://api.scorocode.ru/api/v1/data/updatebyid\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : {} // updated document\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetrieve collection documents.\n\n\nhttps://api.scorocode.ru/api/v1/data/find\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n\n\nLimitations\n\n\nReturns 100 documents at max\n\n\n\n\n\n\nBSON\n\n\nResult will be returned in base64 encoded string with \nBSON\n formatted data.\n\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \nquery\n: {\n        \nexampleField\n: { \n            \n$eq\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n\n        }\n    },\n    \nsort\n: {\n        \nupdatedAt\n: 1\n    }, \n    \nfields\n: [\nupdatedAt\n, \nexampleField\n, \nanotherExampleField\n],\n    \nlimit\n: 10,\n    \nskip\n: 20\n}' \nhttps://api.scorocode.ru/api/v1/data/find\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : string // base64 encoded string with BSON formatted data  \n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nCount collection documents.\n\n\nhttps://api.scorocode.ru/api/v1/data/count\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \nquery\n: {\n        \nexampleField\n: { \n            \n$eq\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n\n        }\n    }\n}' \nhttps://api.scorocode.ru/api/v1/data/count\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresult\n      : int // Returns the count of documents that would match a query\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Data"
        }, 
        {
            "location": "/httpapi/httpapi2/#create-new-document", 
            "text": "https://api.scorocode.ru/api/v1/data/insert  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, optional, masterKey for full access\n     sess         :  , // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n     coll         :  , // collection name, mandatory\n     doc          : {}, // document with field_name:value pairs\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     doc : {\n         exampleField :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! ,\n         anotherExampleField :  I don't know what to say. I used to want to be an astrophysicist. Unfortunately, this is true. \n    }\n}'  https://api.scorocode.ru/api/v1/data/insert   Responses:   Success  {\n     error        : false,\n     result       : {}        // document with field_name:value pairs\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Create new document"
        }, 
        {
            "location": "/httpapi/httpapi2/#delete-collection-documents", 
            "text": "https://api.scorocode.ru/api/v1/data/remove  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, optional, masterKey for full access\n     sess         :  , // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n     coll         :  , // collection name, mandatory\n     query        : {}, // query with field_name/operator:value pairs, optional\n     limit        : int // limit, optional, default value is 1000 \n}   Limitations  Deletes 1000 documents at max    cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     query : {\n         exampleField : { \n             $eq :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! \n        }\n    }\n}'  https://api.scorocode.ru/api/v1/data/remove   Responses:   Success  {\n     error        : false,\n     result       : {\n         count        : int, // Amount of deleted documents\n         docs         : [] // Array of deleted documents _id's\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Delete collection documents."
        }, 
        {
            "location": "/httpapi/httpapi2/#update-collection-documents", 
            "text": "https://api.scorocode.ru/api/v1/data/update  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, mandatory or masterKey for full access\n     sess         :  , // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n     coll         :  , // collection name, mandatory\n     query        : {}, // query with field_name/operator:value pairs, optional\n     doc          : {}, // document with operator:{field_name:value} pairs, mandatory\n     limit        : int // limit, optional, default value is 1000 \n}   Limitations  Updates 1000 documents at max    cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     query : {\n         exampleField : { \n             $eq :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! \n        }\n    },\n      doc : {\n         $set : {\n             exampleField :  Happy Birthday, Muriel! \n        }\n    },\n     limit : 1\n}'  https://api.scorocode.ru/api/v1/data/update   Responses:   Success  {\n     error        : false,\n     result       : {\n         count        : int, // Amount of modified documents\n         docs         : [] // Array of modified documents _id's\n    }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Update collection documents."
        }, 
        {
            "location": "/httpapi/httpapi2/#update-document-by-_id", 
            "text": "https://api.scorocode.ru/api/v1/data/updatebyid  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, mandatory or masterKey for full access\n     sess         :  , // session ID, mandatory if acc != masterKey and app security settings do not allow anonymous access for this operation\n     coll         :  , // collection name, mandatory\n     query        : {}, // query with  _id :  document identifier  pair, mandatory\n     doc          : {}, // document with operator:{field_name:value} pairs, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     query : {\n         _id  :  jQ4ZwEbBUj \n    },\n      doc : {\n         $set : {\n             exampleField :  Happy Birthday, Muriel! \n        }\n    }\n}'  https://api.scorocode.ru/api/v1/data/updatebyid   Responses:   Success  {\n     error        : false,\n     result       : {} // updated document\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Update document by _id."
        }, 
        {
            "location": "/httpapi/httpapi2/#retrieve-collection-documents", 
            "text": "https://api.scorocode.ru/api/v1/data/find  Method:  POST  Headers:  Content-Type: application/json   Limitations  Returns 100 documents at max    BSON  Result will be returned in base64 encoded string with  BSON  formatted data.    cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     query : {\n         exampleField : { \n             $eq :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! \n        }\n    },\n     sort : {\n         updatedAt : 1\n    }, \n     fields : [ updatedAt ,  exampleField ,  anotherExampleField ],\n     limit : 10,\n     skip : 20\n}'  https://api.scorocode.ru/api/v1/data/find   Responses:   Success  {\n     error        : false,\n     result       : string // base64 encoded string with BSON formatted data  \n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retrieve collection documents."
        }, 
        {
            "location": "/httpapi/httpapi2/#count-collection-documents", 
            "text": "https://api.scorocode.ru/api/v1/data/count  Method:  POST  Headers:  Content-Type: application/json   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     query : {\n         exampleField : { \n             $eq :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! \n        }\n    }\n}'  https://api.scorocode.ru/api/v1/data/count   Responses:   Success  {\n     error        : false,\n     result       : int // Returns the count of documents that would match a query\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Count collection documents."
        }, 
        {
            "location": "/httpapi/httpapi3/", 
            "text": "Uploading a file to storage.\n\n\nhttps://api.scorocode.ru/api/v1/upload\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, mandatory, fileKey or masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory, if acc != masterKey\n    \ncoll\n        : \n, // collection name, mandatory\n    \ndocId\n       : \n, // document ID, mandatory\n    \nfield\n       : \n, // field name, mandatory\n    \nfile\n        : \n, // file name, mandatory\n    \ncontent\n     : \n  // file body, base64 encoding, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n8c23d74f447f63ce495cc8fd9ee4d543\n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nitems\n,\n    \ndocId\n: \nY3bET236FX\n,\n    \nfield\n: \nattachment\n,\n    \nfile\n: \nfile.txt\n,\n    \ncontent\n: \nVEhJUyBJUyBGSUxFLUUtRS1FLUUtRS1FIQ==\n\n}' \nhttps://api.scorocode.ru/api/v1/upload\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nRetrieve file.\n\n\nhttps://api.scorocode.ru/api/v1/getfile/{app}/{coll}/{field}/{docId}/{file}\n\n\nMethod: \nGET\n\n\nQuery:\n\n\nhttps://api.scorocode.ru/api/v1/getfile/{app}/{coll}/{field}/{docId}/{file}\n\n\n\n, where\n\n\n    {app}     - application identifier, mandatory\n    {coll}    - collection name, mandatory\n    {field}   - field name, mandatory\n    {docId}   - document identifier, mandatory\n    {file}    - file name, mandatory\n\n\n\n\n\ncURL example\n\n\ncurl -X GET -H \nContent-Type: application/json\n \nhttps://api.scorocode.ru/api/v1/getfile/db8a1b41b8543397a798a181d9891b4c/items/attachment/Y3bET236FX/file.txt\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n    File content\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nFile removal.\n\n\nhttps://api.scorocode.ru/api/v1/deletefile\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, mandatory, fileKey or masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory, if acc != masterKey\n    \ncoll\n        : \n, // collection name, mandatory\n    \ndocId\n       : \n, // document ID, mandatory\n    \nfield\n       : \n, // field name, mandatory\n    \nfile\n        : \n  // file name, mandatory\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n8c23d74f447f63ce495cc8fd9ee4d543\n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,git\n    \ncoll\n: \nitems\n,\n    \ndocId\n: \nY3bET236FX\n,\n    \nfield\n: \nattachment\n,\n    \nfile\n: \nfile.txt\n\n}' \nhttps://api.scorocode.ru/api/v1/deletefile\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Files"
        }, 
        {
            "location": "/httpapi/httpapi3/#uploading-a-file-to-storage", 
            "text": "https://api.scorocode.ru/api/v1/upload  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, mandatory, fileKey or masterKey for full access\n     sess         :  , // session ID, mandatory, if acc != masterKey\n     coll         :  , // collection name, mandatory\n     docId        :  , // document ID, mandatory\n     field        :  , // field name, mandatory\n     file         :  , // file name, mandatory\n     content      :    // file body, base64 encoding, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  8c23d74f447f63ce495cc8fd9ee4d543 ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  items ,\n     docId :  Y3bET236FX ,\n     field :  attachment ,\n     file :  file.txt ,\n     content :  VEhJUyBJUyBGSUxFLUUtRS1FLUUtRS1FIQ== \n}'  https://api.scorocode.ru/api/v1/upload   Responses:   Success  {\n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Uploading a file to storage."
        }, 
        {
            "location": "/httpapi/httpapi3/#retrieve-file", 
            "text": "https://api.scorocode.ru/api/v1/getfile/{app}/{coll}/{field}/{docId}/{file}  Method:  GET  Query:  https://api.scorocode.ru/api/v1/getfile/{app}/{coll}/{field}/{docId}/{file}  , where      {app}     - application identifier, mandatory\n    {coll}    - collection name, mandatory\n    {field}   - field name, mandatory\n    {docId}   - document identifier, mandatory\n    {file}    - file name, mandatory   cURL example  curl -X GET -H  Content-Type: application/json   https://api.scorocode.ru/api/v1/getfile/db8a1b41b8543397a798a181d9891b4c/items/attachment/Y3bET236FX/file.txt   Responses:   Success      File content    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Retrieve file."
        }, 
        {
            "location": "/httpapi/httpapi3/#file-removal", 
            "text": "https://api.scorocode.ru/api/v1/deletefile  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, mandatory, fileKey or masterKey for full access\n     sess         :  , // session ID, mandatory, if acc != masterKey\n     coll         :  , // collection name, mandatory\n     docId        :  , // document ID, mandatory\n     field        :  , // field name, mandatory\n     file         :    // file name, mandatory\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  8c23d74f447f63ce495cc8fd9ee4d543 ,\n     sess :  rYgRe6xL2y8VccMJ ,git\n     coll :  items ,\n     docId :  Y3bET236FX ,\n     field :  attachment ,\n     file :  file.txt \n}'  https://api.scorocode.ru/api/v1/deletefile   Responses:   Success  {\n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "File removal."
        }, 
        {
            "location": "/httpapi/httpapi4/", 
            "text": "Sending push notifications to devices.\n\n\nhttps://api.scorocode.ru/api/v1/sendpush\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n,     // application identifier, mandatory\n    \ncli\n         : \n,     // client key, mandatory\n    \nacc\n         : \n,     // access key, mandatory, messageKey or masterKey for full access\n    \nsess\n        : \n,     // session ID, mandatory, if acc != masterKey\n    \ncoll\n        : \n,     // collection name, mandatory, \nusers\n, \nroles\n or \ndevices\n\n    \nquery\n       : {},     // devices collection query for sampling addressees with field_name/operator:value pairs, optional\n    \nmsg\n         : {\n        \ndata\n    : {\n            \ngcm\n: {        // data for Android devices, optional\n                \nprotocol\n: \nhttp\n,   // protocol to be used: 'http' || 'xmpp', optional\n                \nnotification\n: {\n                    \nbody\n : \ngreat match!\n,\n                    \ntitle\n : \nPortugal vs. Denmark\n,\n                    \nicon\n : \nmyicon\n\n                },\n                \ndata\n: {\n                    \nkey\n: \nvalue\n\n                }\n            },\n            \napns\n: {       // data for iOs devices, optional\n                \nid\n: \n123e4567-e89b-12d3-a456-42665544000\n, // apns-id, optional\n                \ntopic\n: \ncom.sideshow.Apns2\n,               // apns-topic, optional\n                \ncollapseId\n: \nmy_collapse\n,                 // apns-collapse-id, optional\n                \nexpiration\n: \n2006-01-02T15:04:05Z07:00\n,   // apns-expiration, optional\n                \npriority\n:5,                                // apns-priority, optional\n                \naps\n : {\n                    \nalert\n : {\n                        \ntitle\n : \nPortugal vs. Denmark\n,\n                        \nbody\n : \ngreat match!\n,\n                        \naction-loc-key\n : \nWatch\n\n                    },\n                    \nbadge\n : 5\n                },\n                \nacme1\n : \nbar\n,\n                \nacme2\n : [ \nbang\n,  \nwhiz\n ]\n            }\n        }\n    }\n}\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \nfb33e473e08515ff6b57ef6f59392e5d\n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \ndevices\n,\n    \nquery\n: {\n        \nuserId\n: {\n            \n$exists\n: true\n        }\n    },\n    \nmsg\n: {\n         \ndata\n: {\n          \ngcm\n: {\n                \nprotocol\n: \nhttp\n,\n                \nnotification\n: {\n                    \nbody\n : \ngreat match!\n,\n                    \ntitle\n : \nPortugal vs. Denmark\n,\n                    \nicon\n : \nmyicon\n\n                },\n                \ndata\n: {\n                    \nkey\n: \nvalue\n\n                }\n            },\n            \napns\n: {\n                \naps\n : {\n                    \nalert\n : {\n                        \ntitle\n : \nPortugal vs. Denmark\n,\n                        \nbody\n : \ngreat match!\n,\n                        \naction-loc-key\n : \nWatch\n\n                    },\n                    \nbadge\n : 5\n                },\n                \nacme1\n : \nbar\n,\n                \nacme2\n : [ \nbang\n,  \nwhiz\n ]\n            }\n        }\n    }\n}' \nhttps://api.scorocode.ru/api/v1/sendpush\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \ncount\n       : int,       \n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}\n\n\n\n\n\n\n\nSending SMS to users.\n\n\nhttps://api.scorocode.ru/api/v1/sendsms\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n,     // application identifier, mandatory\n    \ncli\n         : \n,     // client key, mandatory\n    \nacc\n         : \n,     // access key, mandatory, messageKey or masterKey for full access\n    \nsess\n        : \n,     // session ID, mandatory, if acc != masterKey\n    \ncoll\n        : \n,     // collection name, mandatory, \nusers\n or \nroles\n\n    \nquery\n       : {},     // users collection query for sampling the addressees with field_name/operator:value pairs, optional\n    \nmsg\n         : {\n        \ntext\n        : \n // sms text\n    }\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \nfb33e473e08515ff6b57ef6f59392e5d\n,\n    \nsess\n: \nrYgRe6xL2y8VccMJ\n,\n    \ncoll\n: \nusers\n,\n    \nquery\n: {\n        \nphone\n: {\n            \n$exists\n: true\n        }\n    },\n    \nmsg\n: {\n        \ntext\n: \nSMS text\n\n    }\n}' \nhttps://api.scorocode.ru/api/v1/sendsms\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \ncount\n       : int,      \n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Messages"
        }, 
        {
            "location": "/httpapi/httpapi4/#sending-push-notifications-to-devices", 
            "text": "https://api.scorocode.ru/api/v1/sendpush  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  ,     // application identifier, mandatory\n     cli          :  ,     // client key, mandatory\n     acc          :  ,     // access key, mandatory, messageKey or masterKey for full access\n     sess         :  ,     // session ID, mandatory, if acc != masterKey\n     coll         :  ,     // collection name, mandatory,  users ,  roles  or  devices \n     query        : {},     // devices collection query for sampling addressees with field_name/operator:value pairs, optional\n     msg          : {\n         data     : {\n             gcm : {        // data for Android devices, optional\n                 protocol :  http ,   // protocol to be used: 'http' || 'xmpp', optional\n                 notification : {\n                     body  :  great match! ,\n                     title  :  Portugal vs. Denmark ,\n                     icon  :  myicon \n                },\n                 data : {\n                     key :  value \n                }\n            },\n             apns : {       // data for iOs devices, optional\n                 id :  123e4567-e89b-12d3-a456-42665544000 , // apns-id, optional\n                 topic :  com.sideshow.Apns2 ,               // apns-topic, optional\n                 collapseId :  my_collapse ,                 // apns-collapse-id, optional\n                 expiration :  2006-01-02T15:04:05Z07:00 ,   // apns-expiration, optional\n                 priority :5,                                // apns-priority, optional\n                 aps  : {\n                     alert  : {\n                         title  :  Portugal vs. Denmark ,\n                         body  :  great match! ,\n                         action-loc-key  :  Watch \n                    },\n                     badge  : 5\n                },\n                 acme1  :  bar ,\n                 acme2  : [  bang ,   whiz  ]\n            }\n        }\n    }\n}\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  fb33e473e08515ff6b57ef6f59392e5d ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  devices ,\n     query : {\n         userId : {\n             $exists : true\n        }\n    },\n     msg : {\n          data : {\n           gcm : {\n                 protocol :  http ,\n                 notification : {\n                     body  :  great match! ,\n                     title  :  Portugal vs. Denmark ,\n                     icon  :  myicon \n                },\n                 data : {\n                     key :  value \n                }\n            },\n             apns : {\n                 aps  : {\n                     alert  : {\n                         title  :  Portugal vs. Denmark ,\n                         body  :  great match! ,\n                         action-loc-key  :  Watch \n                    },\n                     badge  : 5\n                },\n                 acme1  :  bar ,\n                 acme2  : [  bang ,   whiz  ]\n            }\n        }\n    }\n}'  https://api.scorocode.ru/api/v1/sendpush   Responses:   Success  {\n     count        : int,       \n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Sending push notifications to devices."
        }, 
        {
            "location": "/httpapi/httpapi4/#sending-sms-to-users", 
            "text": "https://api.scorocode.ru/api/v1/sendsms  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  ,     // application identifier, mandatory\n     cli          :  ,     // client key, mandatory\n     acc          :  ,     // access key, mandatory, messageKey or masterKey for full access\n     sess         :  ,     // session ID, mandatory, if acc != masterKey\n     coll         :  ,     // collection name, mandatory,  users  or  roles \n     query        : {},     // users collection query for sampling the addressees with field_name/operator:value pairs, optional\n     msg          : {\n         text         :   // sms text\n    }\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  fb33e473e08515ff6b57ef6f59392e5d ,\n     sess :  rYgRe6xL2y8VccMJ ,\n     coll :  users ,\n     query : {\n         phone : {\n             $exists : true\n        }\n    },\n     msg : {\n         text :  SMS text \n    }\n}'  https://api.scorocode.ru/api/v1/sendsms   Responses:   Success  {\n     count        : int,      \n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Sending SMS to users."
        }, 
        {
            "location": "/httpapi/httpapi5/", 
            "text": "Sending a task to execute the server-side script.\n\n\nhttps://api.scorocode.ru/api/v1/scripts\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n, // access key, mandatory, scriptKey or masterKey for full access\n    \nsess\n        : \n, // session ID, mandatory, if acc != masterKey\n    \nscript\n      : \n, // script ID, mandatory\n    \npool\n        : {}  // data pool for transferring to a script context, optional\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n28f06b89b62165c33de55265166d8781\n,\n    \nsess\n: \n6rnbKKGvLLdU9Sl9\n\n    \nscript\n: \n57484fb91c5666544db25675\n,\n    \npool\n: {\n        \ncollname\n: \nitems\n,\n        \nkey\n: \nexampleField\n,\n        \nval\n: \nToday is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel!\n\n    }\n}' \nhttps://api.scorocode.ru/api/v1/scripts\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Scripts"
        }, 
        {
            "location": "/httpapi/httpapi5/#sending-a-task-to-execute-the-server-side-script", 
            "text": "https://api.scorocode.ru/api/v1/scripts  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :  , // access key, mandatory, scriptKey or masterKey for full access\n     sess         :  , // session ID, mandatory, if acc != masterKey\n     script       :  , // script ID, mandatory\n     pool         : {}  // data pool for transferring to a script context, optional\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  28f06b89b62165c33de55265166d8781 ,\n     sess :  6rnbKKGvLLdU9Sl9 \n     script :  57484fb91c5666544db25675 ,\n     pool : {\n         collname :  items ,\n         key :  exampleField ,\n         val :  Today is June, 18. It's Muriel's birthday! Muriel is now 20 years old. Happy Birthday, Muriel! \n    }\n}'  https://api.scorocode.ru/api/v1/scripts   Responses:   Success  {\n     error        : false\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Sending a task to execute the server-side script."
        }, 
        {
            "location": "/httpapi/httpapi6/", 
            "text": "Application statistics retrieval.\n\n\nhttps://api.scorocode.ru/api/v1/stat\n\n\nMethod: \nPOST\n\n\nHeaders: \nContent-Type: application/json\n\n\n{\n    \napp\n         : \n, // application identifier, mandatory\n    \ncli\n         : \n, // client key, mandatory\n    \nacc\n         : \n  // access key, mandatory, masterKey only\n}\n\n\n\n\n\ncURL example\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d '{\n    \napp\n: \ndb8a1b41b8543397a798a181d9891b4c\n,\n    \ncli\n: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    \nacc\n: \n2aceceec7d2e96b1121ec399f5afa101\n\n}' \nhttps://api.scorocode.ru/api/v1/stat\n\n\n\n\n\nResponses:\n\n\n\n\nSuccess\n\n\n{\n    \nerror\n       : false,\n    \nresults\n     : {\n        \ndataSize\n    : int, // Application data size, bytes\n        \nindexSize\n   : int, // \nSize\n of application indexes, bytes\n        \nfilesSize\n   : int  // Application file size, bytes\n    }\n}\n\n\n\n\n\n\n\nError\n\n\n{\n    \nerror\n       : true,\n    \nerrCode\n     : 4XX/5XX, // Error code\n    \nerrMsg\n      : \nError text\n\n}", 
            "title": "Stats"
        }, 
        {
            "location": "/httpapi/httpapi6/#application-statistics-retrieval", 
            "text": "https://api.scorocode.ru/api/v1/stat  Method:  POST  Headers:  Content-Type: application/json  {\n     app          :  , // application identifier, mandatory\n     cli          :  , // client key, mandatory\n     acc          :    // access key, mandatory, masterKey only\n}   cURL example  curl -X POST -H  Content-Type: application/json  -d '{\n     app :  db8a1b41b8543397a798a181d9891b4c ,\n     cli :  ad6a8fe72ef7dfb9c46958aacb15196a ,\n     acc :  2aceceec7d2e96b1121ec399f5afa101 \n}'  https://api.scorocode.ru/api/v1/stat   Responses:   Success  {\n     error        : false,\n     results      : {\n         dataSize     : int, // Application data size, bytes\n         indexSize    : int, //  Size  of application indexes, bytes\n         filesSize    : int  // Application file size, bytes\n    }\n}    Error  {\n     error        : true,\n     errCode      : 4XX/5XX, // Error code\n     errMsg       :  Error text \n}", 
            "title": "Application statistics retrieval."
        }, 
        {
            "location": "/JS/javascript/", 
            "text": "You can download Scorocode JavaScript SDK \nhere\n.\n\n\nSDK integration\n\n\nTo use SDK on the browser side, download the \nlib/browser/scorocode.min.js\n library and connect it to your project: \n\n\nscript src=\njs/scorocode.min.js\n/script\n\n\n\nTo use SDK on the server side (NodeJS), install the SDK module \nnpm install scorocode\n and connect it to the project:\n\n\nvar Scorocode = require('scorocode');\n\n\n\nFast Start\n\n\nRegister and create an application with any name inside \nScorocode\n.\n\n\nFor the purpose of showing you an example development process, we are using the \nreact\n library and the \ncreate-react-app\n utility for fast development of an application template. Installation requirements are available upon the links above. To install the utility you can use the following console command:\n\n\nnpm install -g create-react-app\n\n\n\nCreate a new application and install JS SDK with the following console commands sequence:\n\n\ncreate-react-app first-scorocode\ncd first-scorocode\nnpm install scorocode --save\n\n\n\nOpen the \nsrc/index.js\n file and add the code lines below, replacing \"xxx\" keys with the appropriate keys from your application security settings:\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport Scorocode from 'scorocode' \n\n// Initiate SDK\nScorocode.Init({\n    ApplicationID: \nxxx\n, // \n- replace xxx with appId application key\n    JavaScriptKey: \nxxx\n, // \n- replace xxx with javascript application key\n    MasterKey:     \nxxx\n  // \n- replace xxx with masterKey application key\n});\n\nReactDOM.render(\n  \nlt;App /\ngt;,\n  document.getElementById('root')\n);\n\n\n\nOpen  the \nsrc/App.js\n file and replace its contents with the following code:\n\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Scorocode from 'scorocode' // \n- add SDK import\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Creating variables to store request results  \n        this.state = {\n            registerResult: \n,\n            loginResult: \n\n        };\n    }\n\n    // Changing the content\n    // Let's create two forms: a registration one and an authorization one\n    render() {\n        return (\n            \nlt;div\ngt;\n                \nlt;h2\ngt;Registration\nlt;/h2\ngt;\n                \nlt;form onSubmit={(event) =\ngt; {this.handleRegister(event)}}\ngt;\n                    \nlt;input type=\ntext\n placeholder=\nuser name\n/\ngt; {' '}\n                    \nlt;input type=\nemail\n placeholder=\nemail\n/\ngt; {' '}\n                    \nlt;input type=\npassword\n placeholder=\npassword\n/\ngt;\n                    \nlt;button type=\nsubmit\ngt;Register\nlt;/button\ngt;\n                \nlt;/form\ngt;\n\n                \nlt;pre\ngt;{this.state.registerResult}\nlt;/pre\ngt;\n\n                \nlt;h2\ngt;System Login\nlt;/h2\ngt;\n                \nlt;form onSubmit={(event) =\ngt; {this.handleLogin(event)}}\ngt;\n                    \nlt;input type=\nemail\n placeholder=\nemail\n/\ngt; {' '}\n                    \nlt;input type=\npassword\n placeholder=\npassword\n/\ngt;\n                    \nlt;button type=\nsubmit\ngt;Login\nlt;/button\ngt;\n                \nlt;/form\ngt;\n\n                \nlt;pre\ngt;{this.state.loginResult}\nlt;/pre\ngt;\n            \nlt;/div\ngt;\n        );\n    }\n\n    // Handling the registration form\n    handleRegister(event) {\n        event.preventDefault()\n        const username = event.target.elements[0].value\n        const email = event.target.elements[1].value\n        const password = event.target.elements[2].value\n\n        // Clearing the result variable \n        this.setState({registerResult: \n})\n\n        // Creating new Scorocode.User sample\n        var appUser = new Scorocode.User();\n\n        // Setting data needed to register an application user\n        appUser\n            .set(\nusername\n, username)\n            .set(\nemail\n, email)\n            .set(\npassword\n, password);\n\n        // Registering a new application user\n        appUser.signup()\n            // Event handler for a successful request run\n            .then((data)=\n{\n                // Updating the result variable by transferring the object in the code line\n                this.setState({registerResult: JSON.stringify(data, null, 2)})\n            })\n            .catch((err) =\n {\n                // Updating the result variable by transferring the object in the code line\n                this.setState({registerResult: JSON.stringify(err, null, 2)})\n            })\n    }\n\n    // Handling the authorization form\n    handleLogin(event) {\n        event.preventDefault()\n        const email = event.target.elements[0].value\n        const password = event.target.elements[1].value\n\n        // Clearing the result variable\n        this.setState({loginResult: \n})\n\n        // Creating new Scorocode.User sample\n        var appUser = new Scorocode.User();\n\n        // Authenticating an application user with their email and password\n        appUser.login(email, password)\n            // Event handler for a successful request run\n            .then((data)=\n{\n                // \u041eUpdating the result variable by transferring the object in the code line\n                this.setState({loginResult: JSON.stringify(data, null, 2)})\n            })\n            .catch((err) =\n {\n                // Updating the result variable by transferring the object in the code line\n                this.setState({loginResult: JSON.stringify(err, null, 2)})\n            })\n    }\n}\n\nexport default App;\n\n\n\nSave the file and run your application with the console command:\n\n\nnpm start\n\n\n\nAs a result, a page with two forms will open in your browser: a registration form and an authorization form.\nExperiment with users registration and authorization, and check the Scorocode API responses.\nAfter a successful registration you can see the added user in the User collection and authorize it using its email and password.", 
            "title": "JavaScript SDK"
        }, 
        {
            "location": "/JS/javascript/#sdk-integration", 
            "text": "To use SDK on the browser side, download the  lib/browser/scorocode.min.js  library and connect it to your project:   script src= js/scorocode.min.js /script  To use SDK on the server side (NodeJS), install the SDK module  npm install scorocode  and connect it to the project:  var Scorocode = require('scorocode');", 
            "title": "SDK integration"
        }, 
        {
            "location": "/JS/javascript/#fast-start", 
            "text": "Register and create an application with any name inside  Scorocode .  For the purpose of showing you an example development process, we are using the  react  library and the  create-react-app  utility for fast development of an application template. Installation requirements are available upon the links above. To install the utility you can use the following console command:  npm install -g create-react-app  Create a new application and install JS SDK with the following console commands sequence:  create-react-app first-scorocode\ncd first-scorocode\nnpm install scorocode --save  Open the  src/index.js  file and add the code lines below, replacing \"xxx\" keys with the appropriate keys from your application security settings:  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport Scorocode from 'scorocode' \n\n// Initiate SDK\nScorocode.Init({\n    ApplicationID:  xxx , //  - replace xxx with appId application key\n    JavaScriptKey:  xxx , //  - replace xxx with javascript application key\n    MasterKey:      xxx   //  - replace xxx with masterKey application key\n});\n\nReactDOM.render(\n   lt;App / gt;,\n  document.getElementById('root')\n);  Open  the  src/App.js  file and replace its contents with the following code:  import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Scorocode from 'scorocode' //  - add SDK import\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Creating variables to store request results  \n        this.state = {\n            registerResult:  ,\n            loginResult:  \n        };\n    }\n\n    // Changing the content\n    // Let's create two forms: a registration one and an authorization one\n    render() {\n        return (\n             lt;div gt;\n                 lt;h2 gt;Registration lt;/h2 gt;\n                 lt;form onSubmit={(event) = gt; {this.handleRegister(event)}} gt;\n                     lt;input type= text  placeholder= user name / gt; {' '}\n                     lt;input type= email  placeholder= email / gt; {' '}\n                     lt;input type= password  placeholder= password / gt;\n                     lt;button type= submit gt;Register lt;/button gt;\n                 lt;/form gt;\n\n                 lt;pre gt;{this.state.registerResult} lt;/pre gt;\n\n                 lt;h2 gt;System Login lt;/h2 gt;\n                 lt;form onSubmit={(event) = gt; {this.handleLogin(event)}} gt;\n                     lt;input type= email  placeholder= email / gt; {' '}\n                     lt;input type= password  placeholder= password / gt;\n                     lt;button type= submit gt;Login lt;/button gt;\n                 lt;/form gt;\n\n                 lt;pre gt;{this.state.loginResult} lt;/pre gt;\n             lt;/div gt;\n        );\n    }\n\n    // Handling the registration form\n    handleRegister(event) {\n        event.preventDefault()\n        const username = event.target.elements[0].value\n        const email = event.target.elements[1].value\n        const password = event.target.elements[2].value\n\n        // Clearing the result variable \n        this.setState({registerResult:  })\n\n        // Creating new Scorocode.User sample\n        var appUser = new Scorocode.User();\n\n        // Setting data needed to register an application user\n        appUser\n            .set( username , username)\n            .set( email , email)\n            .set( password , password);\n\n        // Registering a new application user\n        appUser.signup()\n            // Event handler for a successful request run\n            .then((data)= {\n                // Updating the result variable by transferring the object in the code line\n                this.setState({registerResult: JSON.stringify(data, null, 2)})\n            })\n            .catch((err) =  {\n                // Updating the result variable by transferring the object in the code line\n                this.setState({registerResult: JSON.stringify(err, null, 2)})\n            })\n    }\n\n    // Handling the authorization form\n    handleLogin(event) {\n        event.preventDefault()\n        const email = event.target.elements[0].value\n        const password = event.target.elements[1].value\n\n        // Clearing the result variable\n        this.setState({loginResult:  })\n\n        // Creating new Scorocode.User sample\n        var appUser = new Scorocode.User();\n\n        // Authenticating an application user with their email and password\n        appUser.login(email, password)\n            // Event handler for a successful request run\n            .then((data)= {\n                // \u041eUpdating the result variable by transferring the object in the code line\n                this.setState({loginResult: JSON.stringify(data, null, 2)})\n            })\n            .catch((err) =  {\n                // Updating the result variable by transferring the object in the code line\n                this.setState({loginResult: JSON.stringify(err, null, 2)})\n            })\n    }\n}\n\nexport default App;  Save the file and run your application with the console command:  npm start  As a result, a page with two forms will open in your browser: a registration form and an authorization form.\nExperiment with users registration and authorization, and check the Scorocode API responses.\nAfter a successful registration you can see the added user in the User collection and authorize it using its email and password.", 
            "title": "Fast Start"
        }, 
        {
            "location": "/JS/Scorocode/", 
            "text": "Scorocode\n\n\n.Init(opt) - Initializing the SDK\n\n\n\n\n\n\n\n\n\n\n.Init(opt) - SDK initialization\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nopt\n\n\nObject\n\n\nKeys for ititialisation: application identifier, your platform client key and access keys that necessary.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nApplicationID\n\n\nString\n\n\nApplication identifier\n\n\n\n\n\n\nJavaScriptKey\n\n\nString\n\n\nClient key for JavaScript platform\n\n\n\n\n\n\nFileKey\n\n\nString\n\n\nFile access key\n\n\n\n\n\n\nScriptKey\n\n\nString\n\n\nServer-side scripts access key\n\n\n\n\n\n\nMessageKey\n\n\nString\n\n\nMessages access key\n\n\n\n\n\n\nWebSocketKey\n\n\nString\n\n\nWebSocket access key\n\n\n\n\n\n\nMasterKey\n\n\nString\n\n\nApplication master-key\n\n\n\n\n\n\n\n\nExample\n  \n\n\nScorocode.Init({\n    ApplicationID: \na3d04e75e157b2f7ae20c2fce02f63d6\n,\n    JavaScriptKey: \nad6a8fe72ef7dfb9c46958aacb15196a\n,\n    FileKey: \n2aceceec7d2e96b1487ec399f5afa101\n,\n    MessageKey: \ne215ed465646775b42d65cca2d2f5db9\n\n});", 
            "title": "Scorocode"
        }, 
        {
            "location": "/JS/Scorocode/#initopt-sdk-initialization", 
            "text": "Parameter  Type  Description      opt  Object  Keys for ititialisation: application identifier, your platform client key and access keys that necessary.     Properties     Parameter  Type  Description      ApplicationID  String  Application identifier    JavaScriptKey  String  Client key for JavaScript platform    FileKey  String  File access key    ScriptKey  String  Server-side scripts access key    MessageKey  String  Messages access key    WebSocketKey  String  WebSocket access key    MasterKey  String  Application master-key     Example     Scorocode.Init({\n    ApplicationID:  a3d04e75e157b2f7ae20c2fce02f63d6 ,\n    JavaScriptKey:  ad6a8fe72ef7dfb9c46958aacb15196a ,\n    FileKey:  2aceceec7d2e96b1487ec399f5afa101 ,\n    MessageKey:  e215ed465646775b42d65cca2d2f5db9 \n});", 
            "title": ".Init(opt) - SDK initialization"
        }, 
        {
            "location": "/JS/Scorocode.Object/", 
            "text": ".Object\n\n\nnew Object(collName)\n \u21d2 \nScorocode.Object\n\n\n.getById(_id, options)\n \u21d2 \npromise.\nScorocode.Object\n\n\n.get(key)\n\n\n.getFileLink(field)\n \u21d2 \nString\n\n\n.uploadFile(field, filename, file, options)\n \u21d2 \npromise.\nString\n\n\n.save(options)\n \u21d2 \npromise.\nScorocode.Object\n\n\n.remove(options)\n \u21d2 \npromise.{count: Number, docs: Array}\n\n\n.extend(collName, childObject)\n \u21d2 \n[Scorocode.Object]\n\n\n.set(data)\n\n\n.push(key, value)\n \n\n\n.pull(key, value)\n \n\n\n.pullAll(key, value)\n \n\n\n.addToSet(key, value)\n \n\n\n.pop(key, pos)\n \n\n\n.inc(key, amount)\n\n\n.currentDate()\n\n\n.mul(key, number)\n\n\n.min()\n\n\n.max()\n\n\n\n\n\n\n\n\n\n\n\n\nnew Object(collName)\n\n\nScorocode.Object represents the application data object and includes methods for handling this data. The constructor creates a minimal basic \"wrap\" for user data.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncollName\n\n\nString\n\n\nName of the collection where the object is added\n\n\n\n\n\n\n\n\nExample\n \n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar questItem = new Scorocode.Object(\nitems\n); \nquestItem.set(\nname\n, \nWater chip\n).set(\nrelatedquests\n, [\nhuNr3L7QDh\n]); \nquestItem.save()\n    .then((saved) =\n {\n         console.log(saved);\n     })\n    .catch((error) =\n {\n         console.log(error)\n    });\n\nSee.\n\n\n\n\n.set(data)\n\n\n.save(options)\n \u21d2 \nScorocode.Object\n\n\n\n\nExceptions\n:\n\n\n\n\nError\n \"Invalid collection name\" \n\n\n\n\n{ \n    errCode: 404,\n    errMsg: 'Invalid collection: \\'items\\'',\n    error: true \n}\n\n\n\n\n\n\n\n.getById(_id, options)\n\n\nMethod for retrieving a collection object from DB by its _id.\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_id\n\n\nString\n\n\nObject identifier\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItem = new Scorocode.Object(\nitems\n);\ngetItem.getById(\nNseSaqqd5v\n)\n    .then((success) =\n {\n         console.log(success);\n     })\n    .catch((error) =\n {\n         console.log(error)\n    });\n\n\n\nsee\n\n\n\n\nnew Object(collName)\n\n\n.getById(_id, options)\n \u21d2 \nPromise.\nScorocode.Object\n\n\n\n\nReturns\n: \nPromise.\nScorocode.Object\n -  Returns promise that returns the requested object.\n\n\n{\n    _id: 'NseSaqqd5v',\n    name: 'Water chip',\n    relatedquests: [ 'huNr3L7QDh' ],\n    createdAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    updatedAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    readACL: [],\n    updateACL: [],\n    removeACL: []\n}\n\n\n\nException\n:\n\n\n\n\nError\n \"Document not found\"\n\n\n\n\n [Error: Document not found]\n\n\n\n\n\n\n\n.get(key)\n\n\nMethod for retrieving data from a specified object field.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be retrieved\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItem = new Scorocode.Object(\nitems\n);\ngetItem.getById(\nNseSaqqd5v\n)\n    .then((success) =\n {\n        console.log(getItem.get(\nname\n));\n     })\n    .catch((error) =\n {\n         console.log(error)\n    });\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n    \n\n\n.getById(_id, options)\n \u21d2 \nPromise.\nScorocode.Object\n\n\n\n\nReturns\n: \nvalue\n - Returns the field value\n\nWater chip\n\n\n\n\n\n\n.uploadFile(field, filename, file, options)\n\n\nFile upload method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nCollection field name\n\n\n\n\n\n\nfilename\n\n\nString\n\n\nFile name\n\n\n\n\n\n\nfile\n\n\nString\n\n\nFile content in base64 format\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    FileKey: \nfileKey\n\n});\n\nvar attachToItem = new Scorocode.Object(\nitems\n);\nattachToItem.getById(\nxL0uOFtiJx\n)\n    .then((success)=\n{\n        attachToItem.uploadFile(\nattachment\n, \nfile.txt\n, \nVEhJUyBJUyBGSUxFLUUtRS1FLUUtRS1FIQ==\n)\n        .then((uploaded)=\n{\n            console.log(uploaded);\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n    })\n    .catch((error) =\n {\n        console.log(error)\n    });\n\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.getById(_id, options)\n \u21d2 \nPromise.\nScorocode.Object\n\n\n\n\nReturns\n: \npromise.\nString\n - Returns promise that returns the uploaded file name\n\nfile.txt\n\n\nExceptions\n:\n\n\n\n\nString\n 'You must first create a document' \n\n\n\n\n\n\n\n\n.save(options)\n\n\nThe method saves the object in the data warehouse or updates an object that already exists there\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar questItem = new Scorocode.Object(\nitems\n); \nquestItem.set(\nname\n, \nWater chip\n).set(\nrelatedquests\n, [\nhuNr3L7QDh\n]); \nquestItem.save()\n    .then((saved) =\n {\n         console.log(\nsaved\n);\n     })\n    .catch((error) =\n {\n         console.log(error);\n    });\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.set(data)\n\n\n\n\nReturns\n: \nPromise.\nScorocode.Object\n - Returns promise that returns the saved object.\n\n\n { \n    _id: 'NseSaqqd5v',\n    name: 'Water chip',\n    relatedquests: [ 'huNr3L7QDh' ],\n    createdAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    updatedAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    readACL: [],\n    updateACL: [],\n    removeACL: [] \n}\n\n\n\n\n\n\n\n.removeFile(options)\n\n\nMethod for removing the file\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nCollection field name\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItem = new Scorocode.Object(\nitems\n);\ngetItem.getById(\nhejJU4BEGP\n)\n    .then((success)=\n{\n        getItem.removeFile(\nattachment\n)\n        .then((removed)=\n{\n            console.log(removed);\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.getById(_id, options)\n \u21d2 \nPromise.\nScorocode.Object\n\n\n\n\nReturns\n: \nPromise.{error: Boolean}\n - Returns promise that returns the result:\n\n\n{ \n    error: false \n}\n\n\n\n\n\n\n\n.remove(options)\n\n\nMethod for removing the selected object\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItem = new Scorocode.Object(\nitems\n);\ngetItem.getById(\nhejJU4BEGP\n)\n    .then((success)=\n{\n        getItem.remove(success)\n        .then((removed)=\n{\n            console.log(removed);\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.getById(_id, options)\n \u21d2 \nPromise.\nScorocode.Object\n\n\n\n\nReturns\n: \nPromise.{count: Number, docs: Array}\n - Returns promise that returns the object:\n\n\n\n\n\"count\" - \nNumber\n  -  number of removed objects\n\n\n\"doc\" - \nArray\n  - array of removed objects' Ids\n\n\n\n\n{ \n    count: 1, \n    docs: [ 'hejJU4BEGP' ] \n}\n\n\n\n\n\n\n\n.extend(collName, childObject)\n\n\nMethod for converting the Scorocode.Query sample data into individiual Scorocode.Object instances\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncollName\n\n\nString\n\n\nCollection name\n\n\n\n\n\n\nchildObject\n\n\nObject\n\n\nData to be converted\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar data = new Scorocode.Query(\nitems\n);\ndata.find()\n    .then((finded) =\n{\n        var objects = finded.result.map((data)=\n{\n            return Scorocode.Object.extend(\nitems\n, data)\n        });\n        return objects;\n    })\n    .then((result) =\n {\n        console.log(result);\n    })\n    .catch((err)=\n{\n        console.log(err)\n    });    \n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.find(options)\n \u21d2 \nPromise.{error: Boolean, limit: Number, skip: Number, result: [{Scorocode.Object}]}\n\n\n\n\nReturns\n: \nScorocode.Object\n - Returns Scorocode.Object\n\n\n\n\n\n\n.set(data)\n\n\nMethod for transferring data to object\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nObject\n\n\nData in {\"key\", \"value\"} format, where key is the collection field name.\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar questItem = new Scorocode.Object(\nitems\n); \nquestItem.set(\n_id\n, \nNseSaqqd5v\n).set(\nname\n, \nWater chip\n); \nquestItem.save()\n    .then((success) =\n {\n         console.log(success);\n     })\n    .catch((error) =\n {\n         console.log(error)\n    });\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.save(options)\n \u21d2 \nScorocode.Object\n\n\n\n\n\n\n\n\n.push(key, value)\n\n\nMethod for adding an element to an array\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object \n\n\nValue of the new array element\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\nNseSaqqd5v\n)\n    .then((success)=\n{\n        console.log(success);\n        Item.push(\narrayField\n, \nnew element\n);\n        Item.save()\n        .then((saved)=\n{\n            console.log(saved);\n        })\n        .catch((error) =\n {\n            console.log(error);\n        })\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\n\n\n\n\n.pull(key, value)\n\n\nMethod for removing all array elements whose values are the same as the specified one.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object \n\n\nValue to be removed\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\nMgYs9BEQUM\n)\n    .then((getted) =\n {\n        Item.pull(\narrayField\n, {\nDelete\n: true});\n        Item.save()\n            .then((result) =\n {\n                console.log(result);\n            })\n            .catch((error) =\n {\n                console.log(error)\n            });\n    })   \n    .catch((error) =\n {\n         console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n \"For a new document use the method Set\"\n\n\nError\n 'Field must by a type of array'\n\n\n\n\n\n\n\n\n.pullAll(key, value)\n\n\nMethod for removing all array elements whose values are the same as one of the specified values.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nArray of values to be removed\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\nCrT49joIxn\n)\n    .then((getted) =\n {\n        Item.pullAll(\narrayField\n, [\nDelete me\n, 42, {\nimportant\n: false}]);\n        Item.save()\n        .then((result) =\n {\n            console.log(result);\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n    })   \n    .catch((error) =\n {\n         console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of array'\n\n\nError\n 'Value must by a type of array'\n\n\n\n\n\n\n\n\n.addToSet(key, value)\n\n\nMethod for adding an element to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object\n\n\nValue of the added element\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\nCrT49joIxn\n)\n    .then((getted) =\n {\n        Item.addToSet(\narrayField\n, [\nFirst element\n, {\nisSecond\n: true}]);\n        Item.save()\n        .then((result) =\n {\n            console.log(result);\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n    })   \n    .catch((error) =\n {\n         console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of array'\n\n\n\n\n\n\n\n\n.pop(key, pos)\n\n\nMethod for removing the first or the last array element\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\npos\n\n\nNumber\n\n\nPosition of the element to be removed in the array: -1 for the first element and 1 for the last\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItem = new Scorocode.Object(\nitems\n); \ngetItem.getById(\nNseSaqqd5v\n)\n    .then((success)=\n{\n        console.log(success);\n        getItem.pop(\narrayField\n, 1);\n        getItem.save()\n        .then((saved)=\n{\n            console.log(saved);\n        })\n        .catch((error) =\n {\n            console.log(error);\n        })\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of array'\n\n\n\n\n\n\n\n\n.inc(key, amount)\n\n\nThe method increments the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\namount\n\n\nNumber\n\n\nIncrement step\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\ngNxzwAfvDj\n)\n    .then((success)=\n{\n        console.log(Item.get(\nprice\n)); //44.42\n        Item.inc(\nprice\n, -2.42);\n        Item.save()\n        .then((incremented)=\n{\n            console.log(Item.get(\nprice\n)); // 42\n        })\n        .catch((error) =\n {\n            console.log(error);\n        })\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\n\n\n\n\n\n\n.currentDate()\n\n\nSets the current time as the field's value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\ntype\n\n\nString / Boolean\n\n\nDate type. Accepts the following values: true, \"date\" or \"timestamp\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n);\nItem.set(\n_id\n, \ngNxzwAfvDj\n).currentDate(\nsomeDate\n, true);\nItem.save()\n    .then((success)=\n{\n        console.log(Item.get(\nsomeDate\n)); // 2016-05-27T14:10:00.013+03:00\n    })\n    .catch((error) =\n {\n        console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Invalid type'\n\n\n\n\n\n\n\n\n.mul(key, number)\n\n\nThe method multiplies the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nnumber\n\n\nNumber\n\n\nMultiplier\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\n8Qcfll2GwE\n)\n    .then((success)=\n{\n        console.log(Item.get(\nprice\n)); // 42\n        Item.mul(\nprice\n, -1);\n        Item.save()\n        .then((incremented)=\n{\n            console.log(Item.get(\nprice\n)); // -42\n        })\n        .catch((error) =\n {\n            console.log(error);\n        })\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\nError\n 'Value must by a type of number'\n\n\n\n\n\n\n\n\n.min()\n\n\nThe method updates the numeric field value only if the new value is less than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nnumber\n\n\nNumber\n\n\nNew value\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\nCrT49joIxn\n)\n    .then((success)=\n{\n        console.log(Item.get(\nprice\n)); // 42\n        Item.min(\nprice\n, 41.999);\n        Item.save()\n        .then((changed)=\n{\n            console.log(Item.get(\nprice\n)); // 41.999\n        })\n        .catch((error) =\n {\n            console.log(error);\n        })\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\nError\n 'Value must by a type of number'\n\n\n\n\n\n\n\n\n.max()\n\n\nThe method updates the numeric field value only if the new value is greater than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nnumber\n\n\nNumber\n\n\nNew value\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Item = new Scorocode.Object(\nitems\n); \nItem.getById(\nCrT49joIxn\n)\n    .then((success)=\n{\n        console.log(Item.get(\nprice\n)); // 41.999\n        Item.max(\nprice\n, 40);\n        Item.save()\n        .then((changed)=\n{\n            console.log(Item.get(\nprice\n)); // 41.999\n        })\n        .catch((error) =\n {\n            console.log(error);\n        })\n    })\n    .catch((error) =\n {\n            console.log(error)\n    });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\nError\n 'Value must by a type of number'", 
            "title": "Scorocode.Object"
        }, 
        {
            "location": "/JS/Scorocode.Object/#new-objectcollname", 
            "text": "Scorocode.Object represents the application data object and includes methods for handling this data. The constructor creates a minimal basic \"wrap\" for user data.     Parameter  Type  Description      collName  String  Name of the collection where the object is added     Example   var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar questItem = new Scorocode.Object( items ); \nquestItem.set( name ,  Water chip ).set( relatedquests , [ huNr3L7QDh ]); \nquestItem.save()\n    .then((saved) =  {\n         console.log(saved);\n     })\n    .catch((error) =  {\n         console.log(error)\n    }); \nSee.   .set(data)  .save(options)  \u21d2  Scorocode.Object   Exceptions :   Error  \"Invalid collection name\"    { \n    errCode: 404,\n    errMsg: 'Invalid collection: \\'items\\'',\n    error: true \n}", 
            "title": "new Object(collName)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#getbyid_id-options", 
            "text": "Method for retrieving a collection object from DB by its _id.  Parameters     Parameter  Type  Description      _id  String  Object identifier    options  Object  Success and error callbacks for the executed query.     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItem = new Scorocode.Object( items );\ngetItem.getById( NseSaqqd5v )\n    .then((success) =  {\n         console.log(success);\n     })\n    .catch((error) =  {\n         console.log(error)\n    });  see   new Object(collName)  .getById(_id, options)  \u21d2  Promise. Scorocode.Object   Returns :  Promise. Scorocode.Object  -  Returns promise that returns the requested object.  {\n    _id: 'NseSaqqd5v',\n    name: 'Water chip',\n    relatedquests: [ 'huNr3L7QDh' ],\n    createdAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    updatedAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    readACL: [],\n    updateACL: [],\n    removeACL: []\n}  Exception :   Error  \"Document not found\"    [Error: Document not found]", 
            "title": ".getById(_id, options)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#getkey", 
            "text": "Method for retrieving data from a specified object field.     Parameter  Type  Description      key  String  Name of the field whose value should be retrieved     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItem = new Scorocode.Object( items );\ngetItem.getById( NseSaqqd5v )\n    .then((success) =  {\n        console.log(getItem.get( name ));\n     })\n    .catch((error) =  {\n         console.log(error)\n    });  See   new Object(collName)       .getById(_id, options)  \u21d2  Promise. Scorocode.Object   Returns :  value  - Returns the field value Water chip", 
            "title": ".get(key)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#uploadfilefield-filename-file-options", 
            "text": "File upload method     Parameter  Type  Description      field  String  Collection field name    filename  String  File name    file  String  File content in base64 format    options  Object  Success and error callbacks for the executed query.     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    FileKey:  fileKey \n});\n\nvar attachToItem = new Scorocode.Object( items );\nattachToItem.getById( xL0uOFtiJx )\n    .then((success)= {\n        attachToItem.uploadFile( attachment ,  file.txt ,  VEhJUyBJUyBGSUxFLUUtRS1FLUUtRS1FIQ== )\n        .then((uploaded)= {\n            console.log(uploaded);\n        })\n        .catch((error) =  {\n            console.log(error)\n        });\n    })\n    .catch((error) =  {\n        console.log(error)\n    });  See   new Object(collName)  .getById(_id, options)  \u21d2  Promise. Scorocode.Object   Returns :  promise. String  - Returns promise that returns the uploaded file name file.txt  Exceptions :   String  'You must first create a document'", 
            "title": ".uploadFile(field, filename, file, options)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#saveoptions", 
            "text": "The method saves the object in the data warehouse or updates an object that already exists there     Parameter  Type  Description      options  Object  Success and error callbacks for the executed query.     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar questItem = new Scorocode.Object( items ); \nquestItem.set( name ,  Water chip ).set( relatedquests , [ huNr3L7QDh ]); \nquestItem.save()\n    .then((saved) =  {\n         console.log( saved );\n     })\n    .catch((error) =  {\n         console.log(error);\n    });  See   new Object(collName)  .set(data)   Returns :  Promise. Scorocode.Object  - Returns promise that returns the saved object.   { \n    _id: 'NseSaqqd5v',\n    name: 'Water chip',\n    relatedquests: [ 'huNr3L7QDh' ],\n    createdAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    updatedAt: Mon May 23 2016 19:37:04 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n    readACL: [],\n    updateACL: [],\n    removeACL: [] \n}", 
            "title": ".save(options)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#removefileoptions", 
            "text": "Method for removing the file     Parameter  Type  Description      field  String  Collection field name     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItem = new Scorocode.Object( items );\ngetItem.getById( hejJU4BEGP )\n    .then((success)= {\n        getItem.removeFile( attachment )\n        .then((removed)= {\n            console.log(removed);\n        })\n        .catch((error) =  {\n            console.log(error)\n        });\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  See   new Object(collName)  .getById(_id, options)  \u21d2  Promise. Scorocode.Object   Returns :  Promise.{error: Boolean}  - Returns promise that returns the result:  { \n    error: false \n}", 
            "title": ".removeFile(options)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#removeoptions", 
            "text": "Method for removing the selected object     Parameter  Type  Description      options  Object  Success and error callbacks for the executed query.     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItem = new Scorocode.Object( items );\ngetItem.getById( hejJU4BEGP )\n    .then((success)= {\n        getItem.remove(success)\n        .then((removed)= {\n            console.log(removed);\n        })\n        .catch((error) =  {\n            console.log(error)\n        });\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  See   new Object(collName)  .getById(_id, options)  \u21d2  Promise. Scorocode.Object   Returns :  Promise.{count: Number, docs: Array}  - Returns promise that returns the object:   \"count\" -  Number   -  number of removed objects  \"doc\" -  Array   - array of removed objects' Ids   { \n    count: 1, \n    docs: [ 'hejJU4BEGP' ] \n}", 
            "title": ".remove(options)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#extendcollname-childobject", 
            "text": "Method for converting the Scorocode.Query sample data into individiual Scorocode.Object instances     Parameter  Type  Description      collName  String  Collection name    childObject  Object  Data to be converted     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar data = new Scorocode.Query( items );\ndata.find()\n    .then((finded) = {\n        var objects = finded.result.map((data)= {\n            return Scorocode.Object.extend( items , data)\n        });\n        return objects;\n    })\n    .then((result) =  {\n        console.log(result);\n    })\n    .catch((err)= {\n        console.log(err)\n    });      See   new Object(collName)  .find(options)  \u21d2  Promise.{error: Boolean, limit: Number, skip: Number, result: [{Scorocode.Object}]}   Returns :  Scorocode.Object  - Returns Scorocode.Object", 
            "title": ".extend(collName, childObject)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#setdata", 
            "text": "Method for transferring data to object     Parameter  Type  Description      data  Object  Data in {\"key\", \"value\"} format, where key is the collection field name.     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar questItem = new Scorocode.Object( items ); \nquestItem.set( _id ,  NseSaqqd5v ).set( name ,  Water chip ); \nquestItem.save()\n    .then((success) =  {\n         console.log(success);\n     })\n    .catch((error) =  {\n         console.log(error)\n    });  See   new Object(collName)  .save(options)  \u21d2  Scorocode.Object", 
            "title": ".set(data)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#pushkey-value", 
            "text": "Method for adding an element to an array     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  String / Number / Boolean / Date / Array / Object   Value of the new array element     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( NseSaqqd5v )\n    .then((success)= {\n        console.log(success);\n        Item.push( arrayField ,  new element );\n        Item.save()\n        .then((saved)= {\n            console.log(saved);\n        })\n        .catch((error) =  {\n            console.log(error);\n        })\n    })\n    .catch((error) =  {\n            console.log(error)\n    });", 
            "title": ".push(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#pullkey-value", 
            "text": "Method for removing all array elements whose values are the same as the specified one.     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  String / Number / Boolean / Date / Array / Object   Value to be removed     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( MgYs9BEQUM )\n    .then((getted) =  {\n        Item.pull( arrayField , { Delete : true});\n        Item.save()\n            .then((result) =  {\n                console.log(result);\n            })\n            .catch((error) =  {\n                console.log(error)\n            });\n    })   \n    .catch((error) =  {\n         console.log(error)\n    });  Exceptions :   Error  \"For a new document use the method Set\"  Error  'Field must by a type of array'", 
            "title": ".pull(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#pullallkey-value", 
            "text": "Method for removing all array elements whose values are the same as one of the specified values.     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  Array  Array of values to be removed     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( CrT49joIxn )\n    .then((getted) =  {\n        Item.pullAll( arrayField , [ Delete me , 42, { important : false}]);\n        Item.save()\n        .then((result) =  {\n            console.log(result);\n        })\n        .catch((error) =  {\n            console.log(error)\n        });\n    })   \n    .catch((error) =  {\n         console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of array'  Error  'Value must by a type of array'", 
            "title": ".pullAll(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#addtosetkey-value", 
            "text": "Method for adding an element to an array only if there are no elements with the same name in the array.     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  String / Number / Boolean / Date / Array / Object  Value of the added element     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( CrT49joIxn )\n    .then((getted) =  {\n        Item.addToSet( arrayField , [ First element , { isSecond : true}]);\n        Item.save()\n        .then((result) =  {\n            console.log(result);\n        })\n        .catch((error) =  {\n            console.log(error)\n        });\n    })   \n    .catch((error) =  {\n         console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of array'", 
            "title": ".addToSet(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#popkey-pos", 
            "text": "Method for removing the first or the last array element     Parameter  Type  Description      key  String  Name of the field whose value should be updated    pos  Number  Position of the element to be removed in the array: -1 for the first element and 1 for the last     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItem = new Scorocode.Object( items ); \ngetItem.getById( NseSaqqd5v )\n    .then((success)= {\n        console.log(success);\n        getItem.pop( arrayField , 1);\n        getItem.save()\n        .then((saved)= {\n            console.log(saved);\n        })\n        .catch((error) =  {\n            console.log(error);\n        })\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of array'", 
            "title": ".pop(key, pos)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#inckey-amount", 
            "text": "The method increments the numeric field value by a defined number     Parameter  Type  Description      key  String  Name of the field whose value should be updated    amount  Number  Increment step     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( gNxzwAfvDj )\n    .then((success)= {\n        console.log(Item.get( price )); //44.42\n        Item.inc( price , -2.42);\n        Item.save()\n        .then((incremented)= {\n            console.log(Item.get( price )); // 42\n        })\n        .catch((error) =  {\n            console.log(error);\n        })\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'", 
            "title": ".inc(key, amount)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#currentdate", 
            "text": "Sets the current time as the field's value     Parameter  Type  Description      key  String  Name of the field whose value should be updated    type  String / Boolean  Date type. Accepts the following values: true, \"date\" or \"timestamp\"     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items );\nItem.set( _id ,  gNxzwAfvDj ).currentDate( someDate , true);\nItem.save()\n    .then((success)= {\n        console.log(Item.get( someDate )); // 2016-05-27T14:10:00.013+03:00\n    })\n    .catch((error) =  {\n        console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Invalid type'", 
            "title": ".currentDate()"
        }, 
        {
            "location": "/JS/Scorocode.Object/#mulkey-number", 
            "text": "The method multiplies the numeric field value by a defined number     Parameter  Type  Description      key  String  Name of the field whose value should be updated    number  Number  Multiplier     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( 8Qcfll2GwE )\n    .then((success)= {\n        console.log(Item.get( price )); // 42\n        Item.mul( price , -1);\n        Item.save()\n        .then((incremented)= {\n            console.log(Item.get( price )); // -42\n        })\n        .catch((error) =  {\n            console.log(error);\n        })\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'  Error  'Value must by a type of number'", 
            "title": ".mul(key, number)"
        }, 
        {
            "location": "/JS/Scorocode.Object/#min", 
            "text": "The method updates the numeric field value only if the new value is less than the current field value     Parameter  Type  Description      key  String  Name of the field whose value should be updated    number  Number  New value     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( CrT49joIxn )\n    .then((success)= {\n        console.log(Item.get( price )); // 42\n        Item.min( price , 41.999);\n        Item.save()\n        .then((changed)= {\n            console.log(Item.get( price )); // 41.999\n        })\n        .catch((error) =  {\n            console.log(error);\n        })\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'  Error  'Value must by a type of number'", 
            "title": ".min()"
        }, 
        {
            "location": "/JS/Scorocode.Object/#max", 
            "text": "The method updates the numeric field value only if the new value is greater than the current field value     Parameter  Type  Description      key  String  Name of the field whose value should be updated    number  Number  New value     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Item = new Scorocode.Object( items ); \nItem.getById( CrT49joIxn )\n    .then((success)= {\n        console.log(Item.get( price )); // 41.999\n        Item.max( price , 40);\n        Item.save()\n        .then((changed)= {\n            console.log(Item.get( price )); // 41.999\n        })\n        .catch((error) =  {\n            console.log(error);\n        })\n    })\n    .catch((error) =  {\n            console.log(error)\n    });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'  Error  'Value must by a type of number'", 
            "title": ".max()"
        }, 
        {
            "location": "/JS/Scorocode.Query/", 
            "text": ".Query\n\n\nnew Query(collName)\n \u21d2 \nScorocode.Object\n\n\n.find(options)\n \u21d2 \npromise.{error: Boolean, limit: Number, skip: Number, result: [{Scorocode.Object}]}\n\n\n.count(options)\n \u21d2 \npromise.{error: Boolean, result: Number}\n\n\n.update(Object, options)\n \u21d2 \npromise.{error: Boolean, result: {count: Number, docs: Array}}\n\n\n.remove(options)\n \u21d2 \npromise.{count: Number, docs: Array}\n \n\n\n.reset()\n \n\n\n.equalTo(field, value)\n \n\n\n.notEqualTo(field, value)\n \n\n\n.containedIn(field, value)\n \n\n\n.containsAll(field, value)\n \n\n\n.notContainedIn(field, value)\n \n\n\n.greaterThan(field, value)\n \n\n\n.greaterThanOrEqualTo(field, value)\n \n\n\n.lessThan(field, value)\n \n\n\n.lessThanOrEqualTo(field, value)\n \n\n\n.exists(field)\n \n\n\n.doesNotExist(field)\n \n\n\n.contains(field, value)\n \n\n\n.startsWith(field, value)\n \n\n\n.endsWith(field, value)\n \n\n\n.limit(limit)\n \n\n\n.skip(skip)\n\n\n.page(page)\n \n\n\n.ascending(field)\n\n\n.descending(field)\n \n\n\n.or(query)\n\n\n.and(query)\n \n\n\n.select()\n \n\n\n.raw(filter)\n \n\n\n\n\n\n\n\n\n\n\n\n\nnew Query(collName)\n\n\nInstance of a collection data query\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncollName\n\n\nString\n\n\nCollection name\n\n\n\n\n\n\n\n\nExample\n\n\nvar sc = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar data = new Scorocode.Query(\nitems\n);\ndata.find()\n    .then((finded) =\n{\n        console.log(finded);\n    })\n    .catch((err)=\n{\n        console.log(err)\n    });    \n\n\nReturns\n: \nScorocode.Query\n - Returns the \nScorocode.Query\n\n\nException\n:\n\n\n\n\nString\n 'Collection name must be a type of string'\n\n\n\n\n\n\n\n\n.find(options)\n\n\nMethod for requesting a document from a collection. Returns data of the objects that match the sampling criteria. If no criteria are set, the first 50 objects of the collection are returned by default.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar data = new Scorocode.Query(\nitems\n);\ndata.find()\n    .then((finded) =\n{\n        var util = require('util');\n        console.log(util.inspect(finded, {showHidden: false, depth: null}))\n    })\n    .catch((err)=\n{\n        console.log(err)\n    });    \n\n\n\nReturns\n: \npromise.{error: Boolean, limit: Number, skip: Number, result: [{Scorocode.Object}]}\n - Returns promise, which returns the object containing the result of the query execution.\n\n\n\n\n\"error\" - \nBoolean\n - Error flag\n\n\n\"limit\" - \nNumber\n  - Sampling size limit\n\n\n\"skip\" - \nNumber\n  - How many documents were skipped during the sampling\n\n\n\"result\" - \nArray\n  - Obtained data array\n\n\n\n\n{ \n    error: false,\n    limit: 100,\n    skip: 0,\n    result:\n    [ \n       { _id: 'CrT49joIxn',\n           createdAt: Wed May 25 2016 17:24:17 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           updatedAt: Wed May 25 2016 22:15:03 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           readACL: [],\n           updateACL: [],\n           removeACL: [],\n           arrayField: [ false,\n,42.42,[1,2,3],[\nArray\n,{\n123\n: 4}],{ \nObject\n: true }],\n           price: 41.999 \n       },\n       // ...\n       { _id: 'NseSaqqd5v',\n           createdAt: Wed May 25 2016 17:24:17 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           updatedAt: Wed May 25 2016 22:15:03 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           readACL: [],\n           updateACL: [],\n           removeACL: []\n       } \n    ]\n}\n\n\n\n\n\n\n\n.count(options)\n\n\nMethod for counting objects that meet the query conditions.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar countItems = new Scorocode.Query(\nitems\n);\ncountItems.exists(\nprice\n)\n    .count()\n        .then((counted) =\n {\n            console.log(counted) // { error: false, result: 5 }\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nReturns\n: \npromise.{error: Boolean, result: Number}\n -  Returns promise, which returns the object containing the result of the query execution.\n\n\n\n\n\"error\" - \nBoolean\n - Error flag\n\n\n\"result\" - \nNumber\n  - Number of objects that meet the sampling condition.\n\n\n\n\n\n\n\n\n.update(Object, options)\n\n\nMethod for updating the requested objects.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nScorocode.UpdateOps\n\n\nScorocode.UpdateOps\n object to which the updated data is transferred.\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.notEqualTo(\nprice\n, 42)\n    .find()\n        .then((result) =\n {\n            updateItems.set(\nprice\n, 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\nReturns\n: \npromise.{error: Boolean, result: {count: Number, docs: Array}}\n - Returns promise, which returns the object containing the result of the query execution.\n\n\n\n\n\"error\" - \nBoolean\n - Error flag\n\n\n\"result\" - \nObject\n  - Query execution result\n\n\n\"count\" - \nNumber\n  - Number of modified objects\n\n\n\"docs\" - \nArray\n  - _id array of modified objects\n\n\n\n\n\n\n\n\n{ error: false,\n  result:\n   { count: 8,\n     docs:[ \n        'CrT49joIxn',\n        '8Qcfll2GwE',\n        'dMSYsK8jld',\n        '6TFVG5UqV6',\n        'gNxzwAfvDj',\n        'eoVWeg9oeY',\n        'vRf58kEDpo',\n        'abOkjQAnYE' \n        ] \n    } \n}\n\n\n\n\n\n\n\n.remove(options)\n\n\nMethod for removing the requested objects.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nItems.exists(\narrayField\n)\n    .find()\n        .then((finded) =\n {\n            Items.remove(finded)\n                .then((result) =\n {\n                    console.log(result);\n                })  \n                .catch((error) =\n {\n                    console.log(error)\n                });\n        })\n        .catch((error) =\n {\n                console.log(error)\n        });\n\n\n\nReturns\n: \npromise.{ecount: Number, docs: Array}\n - Returns promise, which returns the object containing the result of the query execution.\n\n\n\n\n\"count\" - \nNumber\n  - Number of deleted objects\n\n\n\"docs\" - \nArray\n  - _id array of deleted objects\n\n\n\n\n{ \n    count: 4, \n    docs:[ \n        'CrT49joIxn', \n        'eoVWeg9oeY', \n        'vRf58kEDpo', \n        'abOkjQAnYE'\n        ] \n}\n\n\n\n\n\n\n\n.reset()\n\n\nMethod for resetting the sampling conditions\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.equalTo(\nprice\n, 42)\n    .find()\n        .then((result) =\n {\n            console.log(result)\n        })\n        .catch((error) =\n {\n            getItems.reset()\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.equalTo(field, value)\n\n\nMethod for retrieving all objects with the field value indicated in the condition.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object\n\n\nField value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.equalTo(\nprice\n, 42)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n            getItems.reset()\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.notEqualTo(field, value)\n\n\nMethod for retrieving all objects except for objects with the field value indicated in the condition.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object \n\n\nField value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.notEqualTo(\nprice\n, 42)\n    .find()\n        .then((result) =\n {\n            console.log(result) // { error: false, result: 5 }\n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.containedIn(field, value)\n\n\nMethod for retrieving all objects whose field value contains the array elements specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nArray of values\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.containedIn(\nprice\n,[-42, 41.999, 42])\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n\n\n\n\nString\n 'Value must be of \u0422\u0438\u043f: Array'\n\n\n\n\n\n\n\n\n.containsAll(field, value)\n\n\nMethod for retrieving all objects whose field value contains all array elements specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nArray of values\n\n\n\n\n\n\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.containsAll(\narrayField\n,[4, 8, 15, 16, 23, 42])\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nString\n 'Value must be of \u0422\u0438\u043f: Array'\n\n\n\n\n\n\n\n\n.notContainedIn(field, value)\n\n\nMethod for retrieving all objects whose field value does not contain the array elements specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nArray of values\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.notContainedIn(\nprice\n,[41.999, 42])\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nString\n 'Value must be of \u0422\u0438\u043f: Array'\n\n\n\n\n\n\n\n\n.greaterThan(field, value)\n\n\nMethod for retrieving all objects whose field value is greater than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nNumber / Date\n\n\nCondition value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.greaterThan(\ncreatedAt\n, \n2016-05-19T15:35:16.000Z\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.greaterThanOrEqualTo(field, value)\n\n\nMethod for retrieving all objects whose field value is no less than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nNumber / Date\n\n\nCondition value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.greaterThanOrEqualTo(\nprice\n, 41.999)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.lessThan(field, value)\n\n\nMethod for retrieving all objects whose field value is less than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nNumber / Date\n\n\nCondition value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.lessThan(\nprice\n, 41)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.lessThanOrEqualTo(field, value)\n\n\nMethod for retrieving all objects whose field value is no greater than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nNumber / Date\n\n\nCondition value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.lessThanOrEqualTo(\nupdatedAt\n, \n2016-05-19T15:35:16.000Z\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.exists(field)\n\n\nMethod for retrieving all objects with an existing value of a defined field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nItems.exists(\nprice\n)\n    .find()\n        .then((result) =\n {\n            console.log(result)\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.doesNotExist(field)\n\n\nMethod for retrieving all objects with a missing value in a defined field.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nItems.doesNotExist(\nprice\n)\n    .find()\n        .then((result) =\n {\n            console.log(result)\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.contains(field, value)\n\n\nMethod for retrieving all objects with a value of a defined field that matches a defined regular expression.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nRegular expression\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.contains(\nsomeString\n,\n[0-9]\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n:\n\n\n\n\nString\n '\"Value must be a string\"'\n\n\n\n\n\n\n\n\n.startsWith(field, value)\n\n\nMethod for retrieving all objects with a value of a defined field starting from a specified string.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nName of the field for which a condition is defined\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nCondition value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.startsWith(\nname\n, \nite\n);\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n:\n\n\n\n\nString\n \"Value must be a string\"\n\n\n\n\n\n\n\n\n.endsWith(field, value)\n\n\nMethod for retrieving all objects with a value of a defined field ending with a specified string.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nField name\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nCondition value\n\n\n\n\n\n\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.endsWith(\nname\n, \nwaterchip\n);\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n:\n\n\n\n\nString\n \"Value must be a string\"\n\n\n\n\n\n\n\n\n.limit(limit)\n\n\nMethod for specifying a limit for the number of sampling objects\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nSampling limit\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.limit(1000).contains(\nsomeString\n,\n[a-zA-Z-0-9]\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n:\n\n\n\n\nString\n \"Limit must be a positive number\"\n\n\n\n\n\n\n\n\n.skip(skip)\n\n\nMethod for skipping some objects before sampling.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nskip\n\n\nNumber\n\n\nNumber of skipped objects\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.limit(1000).skip(1000).contains(\nsomeString\n,\n[a-zA-Z-0-9]\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n\n\n\n\nString\n \"Skip must be a positive number\"\n\n\n\n\n\n\n\n\n.page(page)\n\n\nMethod for sampling results page by page\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nPage number\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.limit(30).page(2).contains(\nsomeString\n,\n[a-zA-Z-0-9]\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n:\n\n\n\n\nString\n \"Page must be a positive number\"\n\n\n\n\n\n\n\n\n.ascending(field)\n\n\nMethod for sorting a specified field data in ascending order before sampling.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nField name\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.limit(30).ascending(\nupdatedAt\n).page(1).contains(\nsomeString\n,\n[a-zA-Z-0-9]\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.descending(field)\n\n\nMethod for sorting a specified field data in descending order before sampling.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nField name\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\ngetItems.limit(30).descending(\nprice\n).page(1).contains(\nsomeString\n,\n[a-zA-Z-0-9]\n)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.or(query)\n\n\nMethod for logical addition of several samplings conditions\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nScorocode.Query\n\n\nQuery that is included in the disjunction operation\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\nvar range1 = new Scorocode.Query(\nitems\n);\nvar range2 = new Scorocode.Query(\nitems\n);\n\nvar getItems = new Scorocode.Query(\nitems\n);\nrange1.lessThanOrEqualTo(\ncreatedAt\n, \n2016-05-19T10:00:00.000Z\n);\nrange2.greaterThanOrEqualTo(\ncreatedAt\n, \n2016-05-21T15:00:00.000Z\n);\ngetItems.or(range1).or(range2)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nException\n:\n\n\n\n\nString\n \"Invalid type of Query\"\n\n\n\n\n\n\n\n\n.and(query)\n\n\nMethod for logical multiplication of several samplings conditions\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nScorocode.Query\n\n\nQuery that is included in the conjunction operation\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar getItems = new Scorocode.Query(\nitems\n);\nvar range = new Scorocode.Query(\nitems\n);\nvar price = new Scorocode.Query(\nitems\n);\n\nvar getItems = new Scorocode.Query(\nitems\n);\nrange.greaterThanOrEqualTo(\ncreatedAt\n, \n2016-05-19T10:00:00.000Z\n);\nprice.doesNotExists(\nprice\n);\ngetItems.and(range).and(price)\n    .find()\n        .then((result) =\n {\n            console.log(result) \n        })\n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.select()\n\n\nMethod for specifying a list of returned fields.\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar data = new Scorocode.Query(\nitems\n);\ndata.select(\nprice\n, \nreward\n).find()\n    .then((finded) =\n{\n        console.log(finded);\n    })\n    .catch((err)=\n{\n        console.log(err)\n    });    \n\n\n\n\n\n\n\n\n.raw(filter)\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilter\n\n\nObject\n\n\nApplied filter in the MongoDB query language format\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar query = Scorocode.Query(\nitems\n);\nquery.raw(\n{ \\\nfieldString\\\n : \\\nString\\\n }\n);\nquery.find()\n    .then((finded) =\n{\n        console.log(finded);\n    })\n    .catch((err)=\n{\n        console.log(err)\n    });", 
            "title": "Scorocode.Query"
        }, 
        {
            "location": "/JS/Scorocode.Query/#new-querycollname", 
            "text": "Instance of a collection data query     Parameter  Type  Description      collName  String  Collection name     Example  var sc = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar data = new Scorocode.Query( items );\ndata.find()\n    .then((finded) = {\n        console.log(finded);\n    })\n    .catch((err)= {\n        console.log(err)\n    });      Returns :  Scorocode.Query  - Returns the  Scorocode.Query  Exception :   String  'Collection name must be a type of string'", 
            "title": "new Query(collName)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#findoptions", 
            "text": "Method for requesting a document from a collection. Returns data of the objects that match the sampling criteria. If no criteria are set, the first 50 objects of the collection are returned by default.     Parameter  Type  Description      options  Object  Success and error callbacks for the executed query.     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar data = new Scorocode.Query( items );\ndata.find()\n    .then((finded) = {\n        var util = require('util');\n        console.log(util.inspect(finded, {showHidden: false, depth: null}))\n    })\n    .catch((err)= {\n        console.log(err)\n    });      Returns :  promise.{error: Boolean, limit: Number, skip: Number, result: [{Scorocode.Object}]}  - Returns promise, which returns the object containing the result of the query execution.   \"error\" -  Boolean  - Error flag  \"limit\" -  Number   - Sampling size limit  \"skip\" -  Number   - How many documents were skipped during the sampling  \"result\" -  Array   - Obtained data array   { \n    error: false,\n    limit: 100,\n    skip: 0,\n    result:\n    [ \n       { _id: 'CrT49joIxn',\n           createdAt: Wed May 25 2016 17:24:17 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           updatedAt: Wed May 25 2016 22:15:03 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           readACL: [],\n           updateACL: [],\n           removeACL: [],\n           arrayField: [ false, ,42.42,[1,2,3],[ Array ,{ 123 : 4}],{  Object : true }],\n           price: 41.999 \n       },\n       // ...\n       { _id: 'NseSaqqd5v',\n           createdAt: Wed May 25 2016 17:24:17 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           updatedAt: Wed May 25 2016 22:15:03 GMT+0300 (RTZ 2 (\u0437\u0438\u043c\u0430)),\n           readACL: [],\n           updateACL: [],\n           removeACL: []\n       } \n    ]\n}", 
            "title": ".find(options)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#countoptions", 
            "text": "Method for counting objects that meet the query conditions.     Parameter  Type  Description      options  Object  Success and error callbacks for the executed query.     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar countItems = new Scorocode.Query( items );\ncountItems.exists( price )\n    .count()\n        .then((counted) =  {\n            console.log(counted) // { error: false, result: 5 }\n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Returns :  promise.{error: Boolean, result: Number}  -  Returns promise, which returns the object containing the result of the query execution.   \"error\" -  Boolean  - Error flag  \"result\" -  Number   - Number of objects that meet the sampling condition.", 
            "title": ".count(options)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#updateobject-options", 
            "text": "Method for updating the requested objects.     Parameter  Type  Description      Object  Scorocode.UpdateOps  Scorocode.UpdateOps  object to which the updated data is transferred.    options  Object  Success and error callbacks for the executed query.     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.notEqualTo( price , 42)\n    .find()\n        .then((result) =  {\n            updateItems.set( price , 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Returns :  promise.{error: Boolean, result: {count: Number, docs: Array}}  - Returns promise, which returns the object containing the result of the query execution.   \"error\" -  Boolean  - Error flag  \"result\" -  Object   - Query execution result  \"count\" -  Number   - Number of modified objects  \"docs\" -  Array   - _id array of modified objects     { error: false,\n  result:\n   { count: 8,\n     docs:[ \n        'CrT49joIxn',\n        '8Qcfll2GwE',\n        'dMSYsK8jld',\n        '6TFVG5UqV6',\n        'gNxzwAfvDj',\n        'eoVWeg9oeY',\n        'vRf58kEDpo',\n        'abOkjQAnYE' \n        ] \n    } \n}", 
            "title": ".update(Object, options)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#removeoptions", 
            "text": "Method for removing the requested objects.     Parameter  Type  Description      options  Object  Success and error callbacks for the executed query.     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nItems.exists( arrayField )\n    .find()\n        .then((finded) =  {\n            Items.remove(finded)\n                .then((result) =  {\n                    console.log(result);\n                })  \n                .catch((error) =  {\n                    console.log(error)\n                });\n        })\n        .catch((error) =  {\n                console.log(error)\n        });  Returns :  promise.{ecount: Number, docs: Array}  - Returns promise, which returns the object containing the result of the query execution.   \"count\" -  Number   - Number of deleted objects  \"docs\" -  Array   - _id array of deleted objects   { \n    count: 4, \n    docs:[ \n        'CrT49joIxn', \n        'eoVWeg9oeY', \n        'vRf58kEDpo', \n        'abOkjQAnYE'\n        ] \n}", 
            "title": ".remove(options)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#reset", 
            "text": "Method for resetting the sampling conditions  Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.equalTo( price , 42)\n    .find()\n        .then((result) =  {\n            console.log(result)\n        })\n        .catch((error) =  {\n            getItems.reset()\n            console.log(error)\n        });", 
            "title": ".reset()"
        }, 
        {
            "location": "/JS/Scorocode.Query/#equaltofield-value", 
            "text": "Method for retrieving all objects with the field value indicated in the condition.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  String / Number / Boolean / Date / Array / Object  Field value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.equalTo( price , 42)\n    .find()\n        .then((result) =  {\n            console.log(result) \n            getItems.reset()\n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".equalTo(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#notequaltofield-value", 
            "text": "Method for retrieving all objects except for objects with the field value indicated in the condition.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  String / Number / Boolean / Date / Array / Object   Field value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.notEqualTo( price , 42)\n    .find()\n        .then((result) =  {\n            console.log(result) // { error: false, result: 5 }\n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".notEqualTo(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#containedinfield-value", 
            "text": "Method for retrieving all objects whose field value contains the array elements specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Array  Array of values     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.containedIn( price ,[-42, 41.999, 42])\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions   String  'Value must be of \u0422\u0438\u043f: Array'", 
            "title": ".containedIn(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#containsallfield-value", 
            "text": "Method for retrieving all objects whose field value contains all array elements specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Array  Array of values     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.containsAll( arrayField ,[4, 8, 15, 16, 23, 42])\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   String  'Value must be of \u0422\u0438\u043f: Array'", 
            "title": ".containsAll(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#notcontainedinfield-value", 
            "text": "Method for retrieving all objects whose field value does not contain the array elements specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Array  Array of values     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.notContainedIn( price ,[41.999, 42])\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   String  'Value must be of \u0422\u0438\u043f: Array'", 
            "title": ".notContainedIn(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#greaterthanfield-value", 
            "text": "Method for retrieving all objects whose field value is greater than the number specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Number / Date  Condition value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.greaterThan( createdAt ,  2016-05-19T15:35:16.000Z )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".greaterThan(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#greaterthanorequaltofield-value", 
            "text": "Method for retrieving all objects whose field value is no less than the number specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Number / Date  Condition value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.greaterThanOrEqualTo( price , 41.999)\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".greaterThanOrEqualTo(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#lessthanfield-value", 
            "text": "Method for retrieving all objects whose field value is less than the number specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Number / Date  Condition value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.lessThan( price , 41)\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".lessThan(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#lessthanorequaltofield-value", 
            "text": "Method for retrieving all objects whose field value is no greater than the number specified in the query.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  Number / Date  Condition value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.lessThanOrEqualTo( updatedAt ,  2016-05-19T15:35:16.000Z )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".lessThanOrEqualTo(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#existsfield", 
            "text": "Method for retrieving all objects with an existing value of a defined field     Parameter  Type  Description      field  String  Name of the field for which a condition is defined     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nItems.exists( price )\n    .find()\n        .then((result) =  {\n            console.log(result)\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".exists(field)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#doesnotexistfield", 
            "text": "Method for retrieving all objects with a missing value in a defined field.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nItems.doesNotExist( price )\n    .find()\n        .then((result) =  {\n            console.log(result)\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".doesNotExist(field)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#containsfield-value", 
            "text": "Method for retrieving all objects with a value of a defined field that matches a defined regular expression.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  String  Regular expression     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.contains( someString , [0-9] )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception :   String  '\"Value must be a string\"'", 
            "title": ".contains(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#startswithfield-value", 
            "text": "Method for retrieving all objects with a value of a defined field starting from a specified string.     Parameter  Type  Description      field  String  Name of the field for which a condition is defined    value  String  Condition value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.startsWith( name ,  ite );\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception :   String  \"Value must be a string\"", 
            "title": ".startsWith(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#endswithfield-value", 
            "text": "Method for retrieving all objects with a value of a defined field ending with a specified string.     Parameter  Type  Description      field  String  Field name    value  String  Condition value     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.endsWith( name ,  waterchip );\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception :   String  \"Value must be a string\"", 
            "title": ".endsWith(field, value)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#limitlimit", 
            "text": "Method for specifying a limit for the number of sampling objects     Parameter  Type  Description      limit  Number  Sampling limit     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.limit(1000).contains( someString , [a-zA-Z-0-9] )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception :   String  \"Limit must be a positive number\"", 
            "title": ".limit(limit)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#skipskip", 
            "text": "Method for skipping some objects before sampling.     Parameter  Type  Description      skip  Number  Number of skipped objects     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.limit(1000).skip(1000).contains( someString , [a-zA-Z-0-9] )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception   String  \"Skip must be a positive number\"", 
            "title": ".skip(skip)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#pagepage", 
            "text": "Method for sampling results page by page     Parameter  Type  Description      page  Number  Page number     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.limit(30).page(2).contains( someString , [a-zA-Z-0-9] )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception :   String  \"Page must be a positive number\"", 
            "title": ".page(page)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#ascendingfield", 
            "text": "Method for sorting a specified field data in ascending order before sampling.     Parameter  Type  Description      field  String  Field name     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.limit(30).ascending( updatedAt ).page(1).contains( someString , [a-zA-Z-0-9] )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".ascending(field)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#descendingfield", 
            "text": "Method for sorting a specified field data in descending order before sampling.     Parameter  Type  Description      field  String  Field name     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\ngetItems.limit(30).descending( price ).page(1).contains( someString , [a-zA-Z-0-9] )\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".descending(field)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#orquery", 
            "text": "Method for logical addition of several samplings conditions     Parameter  Type  Description      query  Scorocode.Query  Query that is included in the disjunction operation     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\nvar range1 = new Scorocode.Query( items );\nvar range2 = new Scorocode.Query( items );\n\nvar getItems = new Scorocode.Query( items );\nrange1.lessThanOrEqualTo( createdAt ,  2016-05-19T10:00:00.000Z );\nrange2.greaterThanOrEqualTo( createdAt ,  2016-05-21T15:00:00.000Z );\ngetItems.or(range1).or(range2)\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });  Exception :   String  \"Invalid type of Query\"", 
            "title": ".or(query)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#andquery", 
            "text": "Method for logical multiplication of several samplings conditions     Parameter  Type  Description      query  Scorocode.Query  Query that is included in the conjunction operation     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar getItems = new Scorocode.Query( items );\nvar range = new Scorocode.Query( items );\nvar price = new Scorocode.Query( items );\n\nvar getItems = new Scorocode.Query( items );\nrange.greaterThanOrEqualTo( createdAt ,  2016-05-19T10:00:00.000Z );\nprice.doesNotExists( price );\ngetItems.and(range).and(price)\n    .find()\n        .then((result) =  {\n            console.log(result) \n        })\n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".and(query)"
        }, 
        {
            "location": "/JS/Scorocode.Query/#select", 
            "text": "Method for specifying a list of returned fields.  Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar data = new Scorocode.Query( items );\ndata.select( price ,  reward ).find()\n    .then((finded) = {\n        console.log(finded);\n    })\n    .catch((err)= {\n        console.log(err)\n    });", 
            "title": ".select()"
        }, 
        {
            "location": "/JS/Scorocode.Query/#rawfilter", 
            "text": "Parameter  Type  Description      filter  Object  Applied filter in the MongoDB query language format     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar query = Scorocode.Query( items );\nquery.raw( { \\ fieldString\\  : \\ String\\  } );\nquery.find()\n    .then((finded) = {\n        console.log(finded);\n    })\n    .catch((err)= {\n        console.log(err)\n    });", 
            "title": ".raw(filter)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/", 
            "text": ".UpdateOps\n\n\n.set(data)\n\n\n.push(key, value)\n \n\n\n.pull(key, value)\n \n\n\n.pullAll(key, value)\n \n\n\n.addToSet(key, value)\n \n\n\n.pop(key, pos)\n \n\n\n.inc(key, amount)\n\n\n.currentDate()\n\n\n.mul(key, number)\n\n\n.min()\n\n\n.max()\n\n\n\n\n\n\n\n\n\n\n\n\nnew UpdateOps()\n\n\nClass for multiple object update operations\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.notEqualTo(\nprice\n, 42)\n    .find()\n        .then((result) =\n {\n            updateItems.set(\nprice\n, 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(\nSomething went wrong: \\n\n, error)\n        });\n\n\n\nReturns\n: \nUpdateOps\n - Returns the Scorocode.UpdateOps instance  \n\n\n\n\n\n\n.set(data)\n\n\nMethod for transferring data to object\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nObject\n\n\nData in {\"key\", \"value\"} format, where key is the collection field name.\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.notEqualTo(\nprice\n, 42)\n    .find()\n        .then((result) =\n {\n            updateItems.set(\nprice\n, 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nSee\n\n\n\n\nnew Object(collName)\n\n\n.save(options)\n \u21d2 \nScorocode.UpdateOps\n\n\n\n\n\n\n\n\n.push(key, value)\n\n\nMethod for adding an element to an array\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object \n\n\nValue of the new array element\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\narrayField\n)\n    .find()\n        .then((result) =\n {\n            updateItems.push(\narrayField\n, \nNew element\n);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\n\n\n\n\n.pull(key, value)\n\n\nMethod for removing all array elements whose values are the same as the specified one.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object \n\n\nValue to be removed\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\narrayField\n)\n    .find()\n        .then((result) =\n {\n            updateItems.pull(\narrayField\n, {\nremove\n: true});\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(\nSomething went wrong \\n\n, error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n \"For a new document use the method Set\"\n\n\nError\n 'Field must by a type of array'\n\n\n\n\n\n\n\n\n.pullAll(key, value)\n\n\nMethod for removing all array elements whose values are the same as one of the specified values.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nArray of values to be removed\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\narrayField\n)\n    .find()\n        .then((result) =\n {\n            updateItems.pullAll(\narrayField\n, [\nDelete me\n, 42, {\nImportant\n: false}]);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of array'\n\n\nError\n 'Value must by a type of array'\n\n\n\n\n\n\n\n\n.addToSet(key, value)\n\n\nMethod for adding an element to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nvalue\n\n\nString / Number / Boolean / Date / Array / Object\n\n\nValue of the added element\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\narrayField\n)\n    .find()\n        .then((result) =\n {\n            updateItems.addToSet(\narrayField\n, [\nFirst element of new element\n, {\nsecond\n: true}]);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of array'\n\n\n\n\n\n\n\n\n.pop(key, pos)\n\n\nMethod for removing the first or the last array element\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\npos\n\n\nNumber\n\n\nPosition of the element to be removed in the array: -1 for the first element and 1 for the last\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\narrayField\n)\n    .find()\n        .then((result) =\n {\n            updateItems.pop(\narrayField\n, 1);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of array'\n\n\n\n\n\n\n\n\n.inc(key, amount)\n\n\nThe method increments the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\namount\n\n\nNumber\n\n\nIncrement step\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\nprice\n)\n    .find()\n        .then((result) =\n {\n            updateItems.inc(\nprice\n, -2.42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\n\n\n\n\n\n\n.currentDate()\n\n\nSets the current time as the field's value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\ntype\n\n\nString / Boolean\n\n\nDate type. Accepts the following values: true, \"date\" or \"timestamp\"\n\n\n\n\n\n\n\n\nExample\n:\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.find()\n        .then((result) =\n {\n            updateItems.currentDate(\nsomeDate\n, \ntimestamp\n);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Invalid type'\n\n\n\n\n\n\n\n\n.mul(key, number)\n\n\nThe method multiplies the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nnumber\n\n\nNumber\n\n\nMultiplier\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\nprice\n)\n    .find()\n        .then((result) =\n {\n            updateItems.mul(\nprice\n, 0.5);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\nError\n 'Value must by a type of number'\n\n\n\n\n\n\n\n\n.min()\n\n\nThe method updates the numeric field value only if the new value is less than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nnumber\n\n\nNumber\n\n\nNew value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\nprice\n)\n    .find()\n        .then((result) =\n {\n            updateItems.min(\nprice\n, 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\nError\n 'Value must by a type of number'\n\n\n\n\n\n\n\n\n.max()\n\n\nThe method updates the numeric field value only if the new value is greater than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nName of the field whose value should be updated\n\n\n\n\n\n\nnumber\n\n\nNumber\n\n\nNew value\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar Items = new Scorocode.Query(\nitems\n);\nvar updateItems = new Scorocode.UpdateOps(\nitems\n);\n\nItems.exists(\nprice\n)\n    .find()\n        .then((result) =\n {\n            updateItems.max(\nprice\n, 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =\n {\n            console.log(updated);\n        }) \n        .catch((error) =\n {\n            console.log(error)\n        });\n\n\n\nExceptions\n:\n\n\n\n\nError\n 'For a new document use the method Set'\n\n\nError\n 'Field must by a type of number'\n\n\nError\n 'Value must by a type of number'", 
            "title": "Scorocode.UpdateOps"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#new-updateops", 
            "text": "Class for multiple object update operations  Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.notEqualTo( price , 42)\n    .find()\n        .then((result) =  {\n            updateItems.set( price , 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log( Something went wrong: \\n , error)\n        });  Returns :  UpdateOps  - Returns the Scorocode.UpdateOps instance", 
            "title": "new UpdateOps()"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#setdata", 
            "text": "Method for transferring data to object     Parameter  Type  Description      data  Object  Data in {\"key\", \"value\"} format, where key is the collection field name.     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.notEqualTo( price , 42)\n    .find()\n        .then((result) =  {\n            updateItems.set( price , 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  See   new Object(collName)  .save(options)  \u21d2  Scorocode.UpdateOps", 
            "title": ".set(data)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#pushkey-value", 
            "text": "Method for adding an element to an array     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  String / Number / Boolean / Date / Array / Object   Value of the new array element     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( arrayField )\n    .find()\n        .then((result) =  {\n            updateItems.push( arrayField ,  New element );\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });", 
            "title": ".push(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#pullkey-value", 
            "text": "Method for removing all array elements whose values are the same as the specified one.     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  String / Number / Boolean / Date / Array / Object   Value to be removed     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( arrayField )\n    .find()\n        .then((result) =  {\n            updateItems.pull( arrayField , { remove : true});\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log( Something went wrong \\n , error)\n        });  Exceptions :   Error  \"For a new document use the method Set\"  Error  'Field must by a type of array'", 
            "title": ".pull(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#pullallkey-value", 
            "text": "Method for removing all array elements whose values are the same as one of the specified values.     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  Array  Array of values to be removed     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( arrayField )\n    .find()\n        .then((result) =  {\n            updateItems.pullAll( arrayField , [ Delete me , 42, { Important : false}]);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of array'  Error  'Value must by a type of array'", 
            "title": ".pullAll(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#addtosetkey-value", 
            "text": "Method for adding an element to an array only if there are no elements with the same name in the array.     Parameter  Type  Description      key  String  Name of the field whose value should be updated    value  String / Number / Boolean / Date / Array / Object  Value of the added element     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( arrayField )\n    .find()\n        .then((result) =  {\n            updateItems.addToSet( arrayField , [ First element of new element , { second : true}]);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of array'", 
            "title": ".addToSet(key, value)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#popkey-pos", 
            "text": "Method for removing the first or the last array element     Parameter  Type  Description      key  String  Name of the field whose value should be updated    pos  Number  Position of the element to be removed in the array: -1 for the first element and 1 for the last     Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( arrayField )\n    .find()\n        .then((result) =  {\n            updateItems.pop( arrayField , 1);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of array'", 
            "title": ".pop(key, pos)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#inckey-amount", 
            "text": "The method increments the numeric field value by a defined number     Parameter  Type  Description      key  String  Name of the field whose value should be updated    amount  Number  Increment step     Example    var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( price )\n    .find()\n        .then((result) =  {\n            updateItems.inc( price , -2.42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'", 
            "title": ".inc(key, amount)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#currentdate", 
            "text": "Sets the current time as the field's value     Parameter  Type  Description      key  String  Name of the field whose value should be updated    type  String / Boolean  Date type. Accepts the following values: true, \"date\" or \"timestamp\"     Example :  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.find()\n        .then((result) =  {\n            updateItems.currentDate( someDate ,  timestamp );\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Invalid type'", 
            "title": ".currentDate()"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#mulkey-number", 
            "text": "The method multiplies the numeric field value by a defined number     Parameter  Type  Description      key  String  Name of the field whose value should be updated    number  Number  Multiplier     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( price )\n    .find()\n        .then((result) =  {\n            updateItems.mul( price , 0.5);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'  Error  'Value must by a type of number'", 
            "title": ".mul(key, number)"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#min", 
            "text": "The method updates the numeric field value only if the new value is less than the current field value     Parameter  Type  Description      key  String  Name of the field whose value should be updated    number  Number  New value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( price )\n    .find()\n        .then((result) =  {\n            updateItems.min( price , 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'  Error  'Value must by a type of number'", 
            "title": ".min()"
        }, 
        {
            "location": "/JS/Scorocode.UpdateOps/#max", 
            "text": "The method updates the numeric field value only if the new value is greater than the current field value     Parameter  Type  Description      key  String  Name of the field whose value should be updated    number  Number  New value     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar Items = new Scorocode.Query( items );\nvar updateItems = new Scorocode.UpdateOps( items );\n\nItems.exists( price )\n    .find()\n        .then((result) =  {\n            updateItems.max( price , 42);\n            return Items.update(updateItems)\n        })\n        .then((updated) =  {\n            console.log(updated);\n        }) \n        .catch((error) =  {\n            console.log(error)\n        });  Exceptions :   Error  'For a new document use the method Set'  Error  'Field must by a type of number'  Error  'Value must by a type of number'", 
            "title": ".max()"
        }, 
        {
            "location": "/JS/Scorocode.User/", 
            "text": ".User\n\n\nnew User()\n\n\n.signup(options)\n \u21d2 \npromise.\nScorocode.User\n\n\n.login(email, password, options)\n \u21d2 \npromise.\nScorocode.User\n\n\n.logout(options)\n \n\n\n\n\n\n\n\n\n\n\n\n\nnew User()\n\n\nClass for application user handling.\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar appUser = new Scorocode.User();\nappUser.set(\nemail\n, \nuser@mailserver.domain\n).set(\npassword\n, \n52c7ab3dab2c\n).set(\nusername\n, \nChosenOne\n);\nappUser.signup()\n    .then((success)=\n{\n        console.log(success);\n    })\n    .catch((error)=\n{\n        console.log(error)\n    });\n\n\n\n\n\n\n\n.signup(options)\n\n\nMethod for application user registration.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nObject\n\n\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar appUser = new Scorocode.User();\nappUser.set(\nemail\n, \nuser@domain.zone\n).set(\npassword\n, \nCorrectHorseBatteryStaple\n).set(\nusername\n, \nChosenOne\n);\nappUser.signup()\n    .then((success)=\n{\n        console.log(success);\n    })\n    .catch((error)=\n{\n        console.log(error)\n    });\n\n\n\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n \npromise.{Scorocode.User}\n - returns promise that returns \nScorocode.User\n data\n\n\n\n\n\n\n.login(email, password, options)\n\n\nMethod for application user authentication and user session retrieval.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nString\n\n\nMandatory\n\n\nUser email\n\n\n\"user@domain.zone\"\n\n\n\n\n\n\npassword\n\n\nString\n\n\nMandatory\n\n\nUser password\n\n\n\"CorrectHorseBatteryStaple\"\n\n\n\n\n\n\ncallback\n\n\nObject\n\n\nOptional\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n\n});\n\nvar appUser = new Scorocode.User();\nappUser.login(\nuser@domain.zone\n, \nCorrectHorseBatteryStaple\n)\n    .then((loggedIn)=\n{\n        console.log(\nUser successfully logged in \\n\n, loggedIn);\n        setTimeout( function () {\n            appUser.logout()\n                .then((loggedOut)=\n{\n                    console.log(\nUser successfully logged out \\n\n);\n                })\n                .catch((errLogout)=\n{\n                    console.log(errLogout)\n                });\n            },10000);\n    })\n    .catch((errLogin)=\n{\n        console.log(errLogin)\n    });\n\n\n\nReturns\n \npromise.{Scorocode.User}\n -  returns promise that returns \nScorocode.User\n data\n\n\n\n\n\n\n.logout(options)\n\n\nMethod for application user deauthentication and user session deletion.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nObject\n\n\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar appUser = new Scorocode.User();\nappUser.login(\nuser@domain.zone\n, \nCorrectHorseBatteryStaple\n)\n    .then((loggedIn)=\n{\n        console.log(\nUser successfully logged in \\n\n, loggedIn);\n        setTimeout( function () {\n            appUser.logout()\n                .then((loggedOut)=\n{\n                    console.log(\nUser successfully logged out \\n\n);\n                })\n                .catch((errLogout)=\n{\n                    console.log(errLogout)\n                });\n            },10000);\n    })\n    .catch((errLogin)=\n{\n        console.log(errLogin)\n    });", 
            "title": "Scorocode.User"
        }, 
        {
            "location": "/JS/Scorocode.User/#new-user", 
            "text": "Class for application user handling.  Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar appUser = new Scorocode.User();\nappUser.set( email ,  user@mailserver.domain ).set( password ,  52c7ab3dab2c ).set( username ,  ChosenOne );\nappUser.signup()\n    .then((success)= {\n        console.log(success);\n    })\n    .catch((error)= {\n        console.log(error)\n    });", 
            "title": "new User()"
        }, 
        {
            "location": "/JS/Scorocode.User/#signupoptions", 
            "text": "Method for application user registration.     Parameter  Type  Properties  Description  Value example      callback  Object   Success and error callbacks for the executed query.      Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar appUser = new Scorocode.User();\nappUser.set( email ,  user@domain.zone ).set( password ,  CorrectHorseBatteryStaple ).set( username ,  ChosenOne );\nappUser.signup()\n    .then((success)= {\n        console.log(success);\n    })\n    .catch((error)= {\n        console.log(error)\n    });  \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442   promise.{Scorocode.User}  - returns promise that returns  Scorocode.User  data", 
            "title": ".signup(options)"
        }, 
        {
            "location": "/JS/Scorocode.User/#loginemail-password-options", 
            "text": "Method for application user authentication and user session retrieval.     Parameter  Type  Properties  Description  Value example      email  String  Mandatory  User email  \"user@domain.zone\"    password  String  Mandatory  User password  \"CorrectHorseBatteryStaple\"    callback  Object  Optional  Success and error callbacks for the executed query.      Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey \n});\n\nvar appUser = new Scorocode.User();\nappUser.login( user@domain.zone ,  CorrectHorseBatteryStaple )\n    .then((loggedIn)= {\n        console.log( User successfully logged in \\n , loggedIn);\n        setTimeout( function () {\n            appUser.logout()\n                .then((loggedOut)= {\n                    console.log( User successfully logged out \\n );\n                })\n                .catch((errLogout)= {\n                    console.log(errLogout)\n                });\n            },10000);\n    })\n    .catch((errLogin)= {\n        console.log(errLogin)\n    });  Returns   promise.{Scorocode.User}  -  returns promise that returns  Scorocode.User  data", 
            "title": ".login(email, password, options)"
        }, 
        {
            "location": "/JS/Scorocode.User/#logoutoptions", 
            "text": "Method for application user deauthentication and user session deletion.     Parameter  Type  Properties  Description  Value example      callback  Object   Success and error callbacks for the executed query.      Example  var appUser = new Scorocode.User();\nappUser.login( user@domain.zone ,  CorrectHorseBatteryStaple )\n    .then((loggedIn)= {\n        console.log( User successfully logged in \\n , loggedIn);\n        setTimeout( function () {\n            appUser.logout()\n                .then((loggedOut)= {\n                    console.log( User successfully logged out \\n );\n                })\n                .catch((errLogout)= {\n                    console.log(errLogout)\n                });\n            },10000);\n    })\n    .catch((errLogin)= {\n        console.log(errLogin)\n    });", 
            "title": ".logout(options)"
        }, 
        {
            "location": "/JS/Scorocode.Messenger/", 
            "text": "Messenger\n\n\nnew Messenger()\n\n\n.sendPush(options, callbacks)\n \u21d2 \n{error: Boolean, count: Number}\n\n\n.sendSms(options, callbacks)\n \u21d2 \n{error: Boolean, count: Number}\n\n\n\n\n\n\n\n\n\n\n\n\nnew Messenger()\n\n\nClass for message sending\n\n\nExample\n\n\nvar broadcast = new Scorocode.Messenger();\n\n\n\n\n\n\n.sendPush(options, callbacks)\n\n\nMethod to send Push notifications\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nMessage parameters\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    MessageKey: \nmessageKey\n\n});\n\nvar devices = new Scorocode.Query(\ndevices\n);\nvar broadcast = new Scorocode.Messenger();\nBroadcast.sendPush({\n        where: devices,\n        data: {\n            \ndata\n: {\n                \nmessage\n: \nPUSH text!\n,\n                }           \n            }\n        })\n        .then((success)=\n{\n            console.log(success);\n        })\n        .catch((error)=\n{\n            console.log(error)\n        });\n\n\n\nReturns\n: \npromise.{error: Boolean, count: Number}\n - Returns a promise, which returns the object containing the result of the query execution.\n\n\n\n\n\"error\" - \nBoolean\n - Error flag\n\n\n\"count\" - \nNumber\n  - Number of messages sent\n\n\n\n\nException\n:\n\n\n\n\nString\n 'Invalid options type'\n\n\nString\n 'Where must be a type of Query'\n\n\nString\n 'Invalid data type'\n\n\nString\n 'Missing subject or text message'\n\n\n\n\n\n\n\n\n.sendSms(options, callbacks)\n\n\nMethod to send SMS\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nMessage parameters\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\nSuccess and error callbacks for the executed query.\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    MessageKey: \nmessageKey\n\n});\n\nvar findUsers = new Scorocode.Query(\nusers\n);\nvar broadcast = new Scorocode.Messenger();\nbroadcast.sendPush({\n        where: findUsers,\n        data: {\n            \ntext\n: \nSMS text\n     \n            }\n        })\n        .then((success)=\n{\n            console.log(success);\n        })\n        .catch((error)=\n{\n            console.log(error)\n        });\n\n\n\nReturns\n: \n{error: Boolean, count: Number}\n - Returns a promise, which returns the object containing the result of the query execution.\n\n\n\n\n\"error\" - \nBoolean\n - Error flag\n\n\n\"count\" - \nNumber\n  - Number of messages sent", 
            "title": "Scorocode.Messenger"
        }, 
        {
            "location": "/JS/Scorocode.Messenger/#new-messenger", 
            "text": "Class for message sending  Example  var broadcast = new Scorocode.Messenger();", 
            "title": "new Messenger()"
        }, 
        {
            "location": "/JS/Scorocode.Messenger/#sendpushoptions-callbacks", 
            "text": "Method to send Push notifications     Parameter  Type  Properties      options  Object  Message parameters    callbacks  Object  Success and error callbacks for the executed query.     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    MessageKey:  messageKey \n});\n\nvar devices = new Scorocode.Query( devices );\nvar broadcast = new Scorocode.Messenger();\nBroadcast.sendPush({\n        where: devices,\n        data: {\n             data : {\n                 message :  PUSH text! ,\n                }           \n            }\n        })\n        .then((success)= {\n            console.log(success);\n        })\n        .catch((error)= {\n            console.log(error)\n        });  Returns :  promise.{error: Boolean, count: Number}  - Returns a promise, which returns the object containing the result of the query execution.   \"error\" -  Boolean  - Error flag  \"count\" -  Number   - Number of messages sent   Exception :   String  'Invalid options type'  String  'Where must be a type of Query'  String  'Invalid data type'  String  'Missing subject or text message'", 
            "title": ".sendPush(options, callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.Messenger/#sendsmsoptions-callbacks", 
            "text": "Method to send SMS     Parameter  Type  Properties      options  Object  Message parameters    callbacks  Object  Success and error callbacks for the executed query.     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    MessageKey:  messageKey \n});\n\nvar findUsers = new Scorocode.Query( users );\nvar broadcast = new Scorocode.Messenger();\nbroadcast.sendPush({\n        where: findUsers,\n        data: {\n             text :  SMS text      \n            }\n        })\n        .then((success)= {\n            console.log(success);\n        })\n        .catch((error)= {\n            console.log(error)\n        });  Returns :  {error: Boolean, count: Number}  - Returns a promise, which returns the object containing the result of the query execution.   \"error\" -  Boolean  - Error flag  \"count\" -  Number   - Number of messages sent", 
            "title": ".sendSms(options, callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.CloudCode/", 
            "text": "Class for handling server-side scripts \n\n\nContents:\n\n\n\n\n.CloudCode\n\n\nnew CloudCode(id)\n\n\n.run(pool, callbacks)\n \u21d2 \npromise.{error: Boolean}\n\n\n\n\n\n\n\n\n\n\n\n\nnew CloudCode(id)\n\n\nCreates a new subclass of Scorocode.CloudCode() for the given script identifier\n\n\nReturns\n: \nScorocode.CloudCode\n - Returns new Scorocode.CloudCode instance\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nServer-side script identifier\n\n\n\n\n\n\nlogger\n\n\nObject\n\n\nLogger object for debugging\n\n\n\n\n\n\n\n\n\n\n\n\n.run(pool, debug, callbacks)\n\n\nServer code running method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npool\n\n\nObject\n\n\nObject with the data that will be passed to the server-side script\n\n\n\n\n\n\ndebug\n\n\nBoolean\n\n\nFlag for debug mode\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\nSuccess and error callbacks for the executed query\n\n\n\n\n\n\n\n\nExample\n\n\n// \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c SDK \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e. \nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    ScriptKey: \nscriptKey\n\n});\n\nvar Prompt = require('prompt');\nPrompt.start();\nPrompt.get(['email', 'password', 'username'], function (err, result) {\n    var newUserRegistration = new Scorocode.CloudCode(\n574860d2781267d34f7a2415\n);\n    var pool = {\n        \nemail\n:result.email,\n        \npassword\n:result.password,\n        \nusername\n:result.username\n    };\n    newUserRegistration.run(pool)\n        .then((success)=\n{\n            console.log(success);\n        })\n        .catch((error)=\n{\n            console.log(error)\n        });\n  });\n\n\n\nReturns\n: \npromise.{error: Boolean}\n - Returns promise that returns object \n\n\n{\n    error: false\n}\n\n\n\nExceptions\n:\n\n\n\n\nString\n 'Invalid type of pool'\n\n\n\n\n\n\nDebug\n\n\nWhen you use JavaScript SDK it can be possible to debug server-side scripts. To access debug mode you need to initialise sdk \nScorocode.Init({})\n with MasterKey and WebsocketKey. \n\n\nYou need to create \nLogger\n object to activate debug mode.\n\n\nExample\n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    ScriptKey: \nscriptKey\n\n    MasterKey: \nmasterKey\n // necessary for debug\n    WebSocketKey: \nwebsocketKey\n // necessary for debug\n});\n\nvar Prompt = require('prompt');\nPrompt.start();\nPrompt.get(['email', 'password', 'username'], function (err, result) {\n\nvar newUserRegistration = new Scorocode.CloudCode(\n574860d2781267d34f7a2415\n, {logger: new Scorocode.Logger()});\n\nvar pool = {\n    \nemail\n:result.email,\n    \npassword\n:result.password,\n    \nusername\n:result.username\n};\n\nnewUserRegistration.run(pool, true)\n    .then((success)=\n{\n        console.log(success);\n    })\n    .catch((error)=\n{\n        console.log(error)\n    });\n});", 
            "title": "Scorocode.CloudCode"
        }, 
        {
            "location": "/JS/Scorocode.CloudCode/#new-cloudcodeid", 
            "text": "Creates a new subclass of Scorocode.CloudCode() for the given script identifier  Returns :  Scorocode.CloudCode  - Returns new Scorocode.CloudCode instance     Parameter  Type  Description      id  String  Server-side script identifier    logger  Object  Logger object for debugging", 
            "title": "new CloudCode(id)"
        }, 
        {
            "location": "/JS/Scorocode.CloudCode/#runpool-debug-callbacks", 
            "text": "Server code running method     Parameter  Type  Description      pool  Object  Object with the data that will be passed to the server-side script    debug  Boolean  Flag for debug mode    callbacks  Object  Success and error callbacks for the executed query     Example  // \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c SDK \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e. \nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    ScriptKey:  scriptKey \n});\n\nvar Prompt = require('prompt');\nPrompt.start();\nPrompt.get(['email', 'password', 'username'], function (err, result) {\n    var newUserRegistration = new Scorocode.CloudCode( 574860d2781267d34f7a2415 );\n    var pool = {\n         email :result.email,\n         password :result.password,\n         username :result.username\n    };\n    newUserRegistration.run(pool)\n        .then((success)= {\n            console.log(success);\n        })\n        .catch((error)= {\n            console.log(error)\n        });\n  });  Returns :  promise.{error: Boolean}  - Returns promise that returns object   {\n    error: false\n}  Exceptions :   String  'Invalid type of pool'", 
            "title": ".run(pool, debug, callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.CloudCode/#debug", 
            "text": "When you use JavaScript SDK it can be possible to debug server-side scripts. To access debug mode you need to initialise sdk  Scorocode.Init({})  with MasterKey and WebsocketKey.   You need to create  Logger  object to activate debug mode.  Example  var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    ScriptKey:  scriptKey \n    MasterKey:  masterKey  // necessary for debug\n    WebSocketKey:  websocketKey  // necessary for debug\n});\n\nvar Prompt = require('prompt');\nPrompt.start();\nPrompt.get(['email', 'password', 'username'], function (err, result) {\n\nvar newUserRegistration = new Scorocode.CloudCode( 574860d2781267d34f7a2415 , {logger: new Scorocode.Logger()});\n\nvar pool = {\n     email :result.email,\n     password :result.password,\n     username :result.username\n};\n\nnewUserRegistration.run(pool, true)\n    .then((success)= {\n        console.log(success);\n    })\n    .catch((error)= {\n        console.log(error)\n    });\n});", 
            "title": "Debug"
        }, 
        {
            "location": "/JS/Scorocode.Bot/", 
            "text": ".Bot\n\n\nnew Bot(botId)\n\n\n.send(data)\n \n\n\n\n\n\n\n\n\n\n\n\n\nnew Bot(botId)\n\n\nConstructor sc.Bot\n\n\nReturns\n: \nsc.Bot\n - returns the \nsc.Bot\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbotId\n\n\nString\n\n\nTelegram Bot identifier given by \n@BotFather\n\n\n\n\n\n\n\n\nExample\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \nxxx\n, // \n- replace xxx with ApplicationID  key\n    JavaScriptKey: \nxxx\n, // \n- replace xxx with JavaScriptKey  key\n    MasterKey: \nxxx\n // \n- replace xxx with MasterKey\n});\n\nvar bot = new sc.Bot(\n321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg\n);\n\nvar data = {\n    \nmethod\n: \nmethodname\n, // Telegram bot API method name \n    \nmethod_params\n: {\n        // Telegram Bot API method params\n    }};\nbot.send(data)\n\n\n\n\n\n\n\n.send(data)\n\n\nMaking request to Telegram Bot API\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nObject\n\n\nObject, containing data to request Telegram Bot API\n\n\n\n\n\n\n\n\ndata\n object properties.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nString\n\n\nTelegram bot API method name\n\n\n\n\n\n\nmethod_params\n\n\nObject\n\n\nTelegram Bot API method params\n\n\n\n\n\n\n\n\nExample\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \nxxx\n, // \n- replace xxx with ApplicationID  key\n    JavaScriptKey: \nxxx\n, // \n- replace xxx with JavaScriptKey  key\n    MasterKey: \nxxx\n // \n- replace xxx with MasterKey\n});\n\nvar bot = new sc.Bot(\n321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg\n);\n\nvar data = {\n    \nmethod\n: \nmethodname\n, // Telegram bot API method name \n    \nmethod_params\n: {\n        // Telegram Bot API method params\n    }};\n\nbot.send(data);", 
            "title": "Scorocode.Bot"
        }, 
        {
            "location": "/JS/Scorocode.Bot/#new-botbotid", 
            "text": "Constructor sc.Bot  Returns :  sc.Bot  - returns the  sc.Bot     Parameter  Type  Description      botId  String  Telegram Bot identifier given by  @BotFather     Example  var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  xxx , //  - replace xxx with ApplicationID  key\n    JavaScriptKey:  xxx , //  - replace xxx with JavaScriptKey  key\n    MasterKey:  xxx  //  - replace xxx with MasterKey\n});\n\nvar bot = new sc.Bot( 321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg );\n\nvar data = {\n     method :  methodname , // Telegram bot API method name \n     method_params : {\n        // Telegram Bot API method params\n    }};\nbot.send(data)", 
            "title": "new Bot(botId)"
        }, 
        {
            "location": "/JS/Scorocode.Bot/#senddata", 
            "text": "Making request to Telegram Bot API     Parameter  Type  Description      data  Object  Object, containing data to request Telegram Bot API     data  object properties.     Name  Type  Description      method  String  Telegram bot API method name    method_params  Object  Telegram Bot API method params     Example  var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  xxx , //  - replace xxx with ApplicationID  key\n    JavaScriptKey:  xxx , //  - replace xxx with JavaScriptKey  key\n    MasterKey:  xxx  //  - replace xxx with MasterKey\n});\n\nvar bot = new sc.Bot( 321196098:AAEDbOYD6iLWsHD7w28vqf3a9oBeJAPXXpg );\n\nvar data = {\n     method :  methodname , // Telegram bot API method name \n     method_params : {\n        // Telegram Bot API method params\n    }};\n\nbot.send(data);", 
            "title": ".send(data)"
        }, 
        {
            "location": "/JS/Scorocode.Websocket/", 
            "text": "Class for WebSocket connection handling.\n\n\nAn example of implementing a chat application using Scorocode.WebSocket \u2013 \nScorochat\n. The application's source code is published on GitHub in the following repository: \nNikSmith/niksmith.github.io\n\n\n\n\n.WebSocket\n\n\nnew WebSocket(channame)\n\n\n.on(event, callback)\n \n\n\n.send(message)\n \n\n\n\n\n\n\n\n\n\n\n\n\nnew WebSocket(channame)\n\n\nWebSocket channel opening.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nchanname\n\n\nString\n\n\nMandatory\n\n\nChannel name\n\n\n\"chatroom\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar WS = new Scorocode.WebSocket('chatroom');\n\n\n\n\n\n\n\n.on(event, callback)\n\n\nMethod for assigning a callback to one of the events:\n\n\n\n\nopen - Connection established\n\n\nclose - Connection closed\n\n\nerror - Error\n\n\nmessage -  Data received\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nevent\n\n\nString\n\n\nMandatory, value from the list\n\n\nEvent to which a callback is assigned\n\n\n\"open\", \"message\", \"error\", \"close\"\n\n\n\n\n\n\ncallback\n\n\nObject\n\n\n\n\nCallback for an event\n\n\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\n\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    WebSocketKey: \nwebSocketKey\n\n});\n\n\nvar WS = new Scorocode.WebSocket('Helloworld');\n\n\nWS.on(\nopen\n, onOpen () {});\nWS.on(\nclose\n, onClose () {});\nWS.on(\nerror\n, onError () {});\nWS.on(\nmessage\n, onMessage(data) {\n    console.log(data)\n    });\n\nvar data = \nWello Horld\n;\nWS.send(data);\n\n\n\n\n\n\n\n.send(message)\n\n\nMethod for sending a message to channel\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nString\n\n\nMandatory\n\n\nMessage to be sent to the channel\n\n\n\"Wello Horld\"\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID: \napplicationId\n,\n    JavaScriptKey: \njavascriptKey\n,\n    WebSocketKey: \nwebSocketKey\n\n});\n\nvar WS = new Scorocode.WebSocket('Helloworld');\nvar data = \nWello Horld\n;\n\nWS.on('open', function(){\n    WS.send(data);\n});", 
            "title": "Scorocode.WebSocket"
        }, 
        {
            "location": "/JS/Scorocode.Websocket/#new-websocketchanname", 
            "text": "WebSocket channel opening.     Parameter  Type  Properties  Description  Value example      channame  String  Mandatory  Channel name  \"chatroom\"     Example  var WS = new Scorocode.WebSocket('chatroom');", 
            "title": "new WebSocket(channame)"
        }, 
        {
            "location": "/JS/Scorocode.Websocket/#onevent-callback", 
            "text": "Method for assigning a callback to one of the events:   open - Connection established  close - Connection closed  error - Error  message -  Data received      Parameter  Type  Properties  Description  Value example      event  String  Mandatory, value from the list  Event to which a callback is assigned  \"open\", \"message\", \"error\", \"close\"    callback  Object   Callback for an event      Example     var Scorocode = require('scorocode');\n\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    WebSocketKey:  webSocketKey \n});\n\n\nvar WS = new Scorocode.WebSocket('Helloworld');\n\n\nWS.on( open , onOpen () {});\nWS.on( close , onClose () {});\nWS.on( error , onError () {});\nWS.on( message , onMessage(data) {\n    console.log(data)\n    });\n\nvar data =  Wello Horld ;\nWS.send(data);", 
            "title": ".on(event, callback)"
        }, 
        {
            "location": "/JS/Scorocode.Websocket/#sendmessage", 
            "text": "Method for sending a message to channel     Parameter  Type  Properties  Description  Value example      message  String  Mandatory  Message to be sent to the channel  \"Wello Horld\"     Example     var Scorocode = require('scorocode');\nScorocode.Init({\n    ApplicationID:  applicationId ,\n    JavaScriptKey:  javascriptKey ,\n    WebSocketKey:  webSocketKey \n});\n\nvar WS = new Scorocode.WebSocket('Helloworld');\nvar data =  Wello Horld ;\n\nWS.on('open', function(){\n    WS.send(data);\n});", 
            "title": ".send(message)"
        }, 
        {
            "location": "/JS/Scorocode.System/", 
            "text": "Contents\n\n\n\n\n.System\n\n\nnew System()\n\n\n.getDataStats(callbacks)\n \n\n\n.getApp(callbacks)\n \n\n\nApp.getCollections(callbacks)\n\n\nApp.getFolderContent(path, callbacks)\n\n\nApp.getScript(id, callbacks}\n\n\nApp.getBots(skip, limit, callbacks)\n\n\n\n\n\n\n\n\n\n\n\n\nnew System()\n\n\nScorocode.System. Designer \n\n\nvar sys = new sc.System();\n\n\n\n\n\nNote\n\n\nTo use system methods you need to initialize the SDK and indicate a MasterKey.\n\n\n\n\n\n\n\n\n.getDataStats(callbacks)\n\n\nMethod to get the application stats.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nVariable Example\n\n\n\n\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\noptional\n\n\nsuccess and error callbacks for the executed query\n\n\nsee example below\n\n\n\n\n\n\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \n5c46ec2f6f94aa92sdfef83122ff1gc\n,\n    JavaScriptKey: \n86df1sd52d81dbhskn32f1d6a8e15936\n,\n    MasterKey: \ne9c6vf5b9d6acd5tyu3aav1405c1e6dc3\n\n});\n\nvar sys = new sc.System();\n\nsys.getDataStats()\n   .then((stats)=\n{\n        console.log(stats);\n    })\n    .catch((error)=\n{\n        console.log(error)\n    });\n\n\n\nReturns\n: \npromise.{dataSize: int, filesSize: int, indexSize: int, store: int}\n - Returns a promise, which returns an object with the application statistics:\n\n\n\n\ndataSize - application data size;\n\n\nfileSize - application files data size;\n\n\nindexSixe - application indexes data size;\n\n\nstore - free data available for the application.\n\n\n\n\n\n\n\n\n.getApp(callbacks)\n\n\nMethod to get full information about the application.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nVariable Example\n\n\n\n\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\noptional\n\n\nsuccess and error callbacks for the executed query\n\n\nsee example below\n\n\n\n\n\n\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \n5c46ec2f6f94aa92sdfef83122ff1gc\n,\n    JavaScriptKey: \n86df1sd52d81dbhskn32f1d6a8e15936\n,\n    MasterKey: \ne9c6vf5b9d6acd5tyu3aav1405c1e6dc3\n\n});\n\nvar sys = new sc.System();\n\nsys.getApp()\n   .then((app)=\n{\n        console.log(app);\n    })\n    .catch((error)=\n{\n        console.log(error)\n    });\n\n\n\nReturns\n: \npromise.\nApp\n - Returns a promise, which returns the \nApp\n object.\n\n\n\n\n\n\nApp.getCollections(callbacks)\n\n\nMethod to get a list of collections.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nVariable Example\n\n\n\n\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\noptional\n\n\nsuccess and error callbacks for the executed query\n\n\nsee example below\n\n\n\n\n\n\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \n5c46ec2f6f94aa92sdfef83122ff1gc\n,\n    JavaScriptKey: \n86df1sd52d81dbhskn32f1d6a8e15936\n,\n    MasterKey: \ne9c6vf5b9d6acd5tyu3aav1405c1e6dc3\n\n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)=\n{\n        app.getCollections()\n            .then((result) =\n {\n                console.log(result);\n          })\n  })\n  .catch((error)=\n{\n      console.log(error)\n  });\n\n\n\nReturns\n: \npromise.[Collection]\n - Returns a promise, which returns an array of \nCollection\n objects.\n\n\n\n\n\n\nApp.getFolderContent(path, callbacks)\n\n\nMethod to get a folder at the specified path.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nVariable Example\n\n\n\n\n\n\n\n\n\n\npath\n\n\nString\n\n\nmandatory\n\n\nspecified folder path\n\n\n\"/\"\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\noptional\n\n\nsuccess and error callbacks for the executed query\n\n\nsee example below\n\n\n\n\n\n\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \n5c46ec2f6f94aa92sdfef83122ff1gc\n,\n    JavaScriptKey: \n86df1sd52d81dbhskn32f1d6a8e15936\n,\n    MasterKey: \ne9c6vf5b9d6acd5tyu3aav1405c1e6dc3\n\n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)=\n{\n        app.getFolderContent(\n/\n)\n            .then((result) =\n {\n                console.log(result);\n          })\n  })\n  .catch((error)=\n{\n      console.log(error)\n  });\n\n\n\nReturns\n: \npromise.[Script, Folder]\n - Returns a promise, which returns an array of \nScript\n \u0438 \nFolder\n objects.\n\n\n\n\n\n\nApp.getScript(id, callbacks}\n\n\nMethod to get a script and its ID.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nVariable Example\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\nmandatory\n\n\nscript ID\n\n\n\"574860d2781267d34f7a2415\"\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\noptional\n\n\nsuccess and error callbacks for the executed query\n\n\nsee example below\n\n\n\n\n\n\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \n5c46ec2f6f94aa92sdfef83122ff1gc\n,\n    JavaScriptKey: \n86df1sd52d81dbhskn32f1d6a8e15936\n,\n    MasterKey: \ne9c6vf5b9d6acd5tyu3aav1405c1e6dc3\n\n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)=\n{\n        app.getScript(\n57c941e50293e02aea8b5b14\n)\n            .then((result) =\n {\n                console.log(result);\n          })\n  })\n  .catch((error)=\n{\n      console.log(error)\n  });\n\n\n\nReturns\n: \npromise.Script\n - Returns a promise, which returns the \nScript\n object.\n\n\n\n\n\n\nApp.getBots(skip, limit, callbacks)\n\n\nMethod to get a list of bots.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nVariable Example\n\n\n\n\n\n\n\n\n\n\nskip\n\n\nNumber\n\n\noptional, by-default 0\n\n\nNumber of skipped objects\n\n\n1\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\noptional, by-default 50\n\n\nSampling size limit\n\n\n5\n\n\n\n\n\n\ncallbacks\n\n\nObject\n\n\noptional\n\n\nsuccess and error callbacks for the executed query\n\n\nsee example below\n\n\n\n\n\n\n\n\nvar sc = require('scorocode');\n\nsc.Init({\n    ApplicationID: \n5c46ec2f6f94aa92sdfef83122ff1gc\n,\n    JavaScriptKey: \n86df1sd52d81dbhskn32f1d6a8e15936\n,\n    MasterKey: \ne9c6vf5b9d6acd5tyu3aav1405c1e6dc3\n\n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)=\n{\n        app.getBots()\n            .then((result) =\n {\n                console.log(result);\n          })\n  })\n  .catch((error)=\n{\n      console.log(error)\n  });\n\n\n\nReturns\n: \npromise.\nBot\n - Returns a promise, which returns the \nBot\n object.", 
            "title": "Scorocode.System"
        }, 
        {
            "location": "/JS/Scorocode.System/#new-system", 
            "text": "Scorocode.System. Designer   var sys = new sc.System();   Note  To use system methods you need to initialize the SDK and indicate a MasterKey.", 
            "title": "new System()"
        }, 
        {
            "location": "/JS/Scorocode.System/#getdatastatscallbacks", 
            "text": "Method to get the application stats.     Parameter  Type  Properties  Description  Variable Example      callbacks  Object  optional  success and error callbacks for the executed query  see example below     var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  5c46ec2f6f94aa92sdfef83122ff1gc ,\n    JavaScriptKey:  86df1sd52d81dbhskn32f1d6a8e15936 ,\n    MasterKey:  e9c6vf5b9d6acd5tyu3aav1405c1e6dc3 \n});\n\nvar sys = new sc.System();\n\nsys.getDataStats()\n   .then((stats)= {\n        console.log(stats);\n    })\n    .catch((error)= {\n        console.log(error)\n    });  Returns :  promise.{dataSize: int, filesSize: int, indexSize: int, store: int}  - Returns a promise, which returns an object with the application statistics:   dataSize - application data size;  fileSize - application files data size;  indexSixe - application indexes data size;  store - free data available for the application.", 
            "title": ".getDataStats(callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.System/#getappcallbacks", 
            "text": "Method to get full information about the application.     Parameter  Type  Properties  Description  Variable Example      callbacks  Object  optional  success and error callbacks for the executed query  see example below     var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  5c46ec2f6f94aa92sdfef83122ff1gc ,\n    JavaScriptKey:  86df1sd52d81dbhskn32f1d6a8e15936 ,\n    MasterKey:  e9c6vf5b9d6acd5tyu3aav1405c1e6dc3 \n});\n\nvar sys = new sc.System();\n\nsys.getApp()\n   .then((app)= {\n        console.log(app);\n    })\n    .catch((error)= {\n        console.log(error)\n    });  Returns :  promise. App  - Returns a promise, which returns the  App  object.", 
            "title": ".getApp(callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.System/#appgetcollectionscallbacks", 
            "text": "Method to get a list of collections.     Parameter  Type  Properties  Description  Variable Example      callbacks  Object  optional  success and error callbacks for the executed query  see example below     var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  5c46ec2f6f94aa92sdfef83122ff1gc ,\n    JavaScriptKey:  86df1sd52d81dbhskn32f1d6a8e15936 ,\n    MasterKey:  e9c6vf5b9d6acd5tyu3aav1405c1e6dc3 \n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)= {\n        app.getCollections()\n            .then((result) =  {\n                console.log(result);\n          })\n  })\n  .catch((error)= {\n      console.log(error)\n  });  Returns :  promise.[Collection]  - Returns a promise, which returns an array of  Collection  objects.", 
            "title": "App.getCollections(callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.System/#appgetfoldercontentpath-callbacks", 
            "text": "Method to get a folder at the specified path.     Parameter  Type  Properties  Description  Variable Example      path  String  mandatory  specified folder path  \"/\"    callbacks  Object  optional  success and error callbacks for the executed query  see example below     var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  5c46ec2f6f94aa92sdfef83122ff1gc ,\n    JavaScriptKey:  86df1sd52d81dbhskn32f1d6a8e15936 ,\n    MasterKey:  e9c6vf5b9d6acd5tyu3aav1405c1e6dc3 \n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)= {\n        app.getFolderContent( / )\n            .then((result) =  {\n                console.log(result);\n          })\n  })\n  .catch((error)= {\n      console.log(error)\n  });  Returns :  promise.[Script, Folder]  - Returns a promise, which returns an array of  Script  \u0438  Folder  objects.", 
            "title": "App.getFolderContent(path, callbacks)"
        }, 
        {
            "location": "/JS/Scorocode.System/#appgetscriptid-callbacks", 
            "text": "Method to get a script and its ID.     Parameter  Type  Properties  Description  Variable Example      id  String  mandatory  script ID  \"574860d2781267d34f7a2415\"    callbacks  Object  optional  success and error callbacks for the executed query  see example below     var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  5c46ec2f6f94aa92sdfef83122ff1gc ,\n    JavaScriptKey:  86df1sd52d81dbhskn32f1d6a8e15936 ,\n    MasterKey:  e9c6vf5b9d6acd5tyu3aav1405c1e6dc3 \n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)= {\n        app.getScript( 57c941e50293e02aea8b5b14 )\n            .then((result) =  {\n                console.log(result);\n          })\n  })\n  .catch((error)= {\n      console.log(error)\n  });  Returns :  promise.Script  - Returns a promise, which returns the  Script  object.", 
            "title": "App.getScript(id, callbacks}"
        }, 
        {
            "location": "/JS/Scorocode.System/#appgetbotsskip-limit-callbacks", 
            "text": "Method to get a list of bots.     Parameter  Type  Properties  Description  Variable Example      skip  Number  optional, by-default 0  Number of skipped objects  1    limit  Number  optional, by-default 50  Sampling size limit  5    callbacks  Object  optional  success and error callbacks for the executed query  see example below     var sc = require('scorocode');\n\nsc.Init({\n    ApplicationID:  5c46ec2f6f94aa92sdfef83122ff1gc ,\n    JavaScriptKey:  86df1sd52d81dbhskn32f1d6a8e15936 ,\n    MasterKey:  e9c6vf5b9d6acd5tyu3aav1405c1e6dc3 \n});\n\nvar system = new sc.System();\nsystem.getApp()\n  .then((app)= {\n        app.getBots()\n            .then((result) =  {\n                console.log(result);\n          })\n  })\n  .catch((error)= {\n      console.log(error)\n  });  Returns :  promise. Bot  - Returns a promise, which returns the  Bot  object.", 
            "title": "App.getBots(skip, limit, callbacks)"
        }, 
        {
            "location": "/SWIFT/SWIFT/", 
            "text": "SDK integration\n\n\nSDK provides access to the Scorocode platform for creating swift-based applications. Details can be found on our website: https://scorocode.ru Scorocode SWIFT SDK distribution pack can be found in the repository (https://github.com/Scorocode/scorocode-sdk-swift)\n\n\nInstallation\n\n\nConnecting a library to a project\n\n\nInstall \nCarthage\n\n\nCreate an application\n\n\nCreate the \"Cartfile\" file in the project root and write the following lines in it:\n\n\ngithub \nAlamofire/Alamofire\n ~\n 3.3\ngithub \nSwiftyJSON/SwiftyJSON\n\ngithub \ndaltoniam/Starscream\n\n\n\nClose the project in Xcode, start in the console:\n\n\ncarthage update --platform iOS,Mac\n\nRe-open the project in Xcode. To Target -\n General -\n Linked Frameworks and Libraries from \n -\n Carthage -\n Build -\n iOS, drag and drop 3 files:\n\n\nAlamofire.framework\nSwiftyJSON.framework\nStarscream.framework\n\n\n\nTo Target -\n Build Phases, add New Run Script Phase:\n\n\nScript:\n\n\n/usr/local/bin/carthage copy-frameworks\n\nThree Input Files:\n\n\n$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework\n\n\n$(SRCROOT)/Carthage/Build/iOS/SwiftyJSON.framework\n\nand\n\n$(SRCROOT)/Carthage/Build/iOS/Starscream.framework\n\n\nIf bridging header is missing, create it with the following contents:\n\n\n#import \nBSONSerialization.h\n\n\n\nCreate a new group in the project (for example, SCLib).\n\n\nAdd three folders to it (BSON, API, Model) from the SCLib project folder retrieved from the repository.", 
            "title": "SWIFT SDK"
        }, 
        {
            "location": "/SWIFT/SWIFT/#sdk-integration", 
            "text": "SDK provides access to the Scorocode platform for creating swift-based applications. Details can be found on our website: https://scorocode.ru Scorocode SWIFT SDK distribution pack can be found in the repository (https://github.com/Scorocode/scorocode-sdk-swift)", 
            "title": "SDK integration"
        }, 
        {
            "location": "/SWIFT/SWIFT/#installation", 
            "text": "Connecting a library to a project  Install  Carthage  Create an application  Create the \"Cartfile\" file in the project root and write the following lines in it:  github  Alamofire/Alamofire  ~  3.3\ngithub  SwiftyJSON/SwiftyJSON \ngithub  daltoniam/Starscream  Close the project in Xcode, start in the console:  carthage update --platform iOS,Mac \nRe-open the project in Xcode. To Target -  General -  Linked Frameworks and Libraries from   -  Carthage -  Build -  iOS, drag and drop 3 files:  Alamofire.framework\nSwiftyJSON.framework\nStarscream.framework  To Target -  Build Phases, add New Run Script Phase:  Script:  /usr/local/bin/carthage copy-frameworks \nThree Input Files:  $(SRCROOT)/Carthage/Build/iOS/Alamofire.framework  $(SRCROOT)/Carthage/Build/iOS/SwiftyJSON.framework \nand $(SRCROOT)/Carthage/Build/iOS/Starscream.framework  If bridging header is missing, create it with the following contents:  #import  BSONSerialization.h  Create a new group in the project (for example, SCLib).  Add three folders to it (BSON, API, Model) from the SCLib project folder retrieved from the repository.", 
            "title": "Installation"
        }, 
        {
            "location": "/SWIFT/SC/", 
            "text": "Core class for SDK handling\n\n\n\n\nSC\n\n\n.initWith(opt)\n\n\n\n\n\n\n\n\n\n\n\n\n.initWith(applicationId, clientId, accessKey, fileKey, messageKey)\n\n\nSDK initialization. Parameter values are defined in AppDelegate.swift\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\napplicationId\n\n\nString\n\n\nMandatory\n\n\nApplication identifier\n\n\n\"db8a1b41b8543397a798a181d9891b4c\"\n\n\n\n\n\n\nclientId\n\n\nString\n\n\nMandatory\n\n\nClient key for the iOs platform\n\n\n\"563452bbc611d8106d5da767365897de\"\n\n\n\n\n\n\naccessKey\n\n\nString\n\n\nMandatory\n\n\nAuthentication key (master key, script key)\n\n\n\"28f06b89b62165c33de55265166d8781\"\n\n\n\n\n\n\nfileKey\n\n\nString\n\n\n\n\nAuthentication keys for access to files\n\n\n\"6305ee7ac8023191a333d9267f1a07e8\"\n\n\n\n\n\n\nmessageKey\n\n\nString\n\n\n\n\nAuthentication key for sending messages\n\n\n\"9d774f6fa704f192e6aef53933f44e4f\"\n\n\n\n\n\n\n\n\nExample\n  \n\n\nIn \nAppDelegate.swift\n, specify initialization parameter values in the \ndidFinishLaunchingWithOptions\n method:\n\n\nlet applicationId = \ndb8a1b41b8543397a798a181d9891b4c\n\nlet clientId = \n563452bbc611d8106d5da767365897de\n\nlet accessKey = \n28f06b89b62165c33de55265166d8781\n\nlet fileKey = \n6305ee7ac8023191a333d9267f1a07e8\n\nlet messageKey = \n9d774f6fa704f192e6aef53933f44e4f\n\n\n\nSDK initialization\n\n\nSC.initWith(applicationId: applicationId, clientId: clientId, accessKey: accessKey, fileKey: fileKey, messageKey: messageKey)", 
            "title": "SC"
        }, 
        {
            "location": "/SWIFT/SC/#initwithapplicationid-clientid-accesskey-filekey-messagekey", 
            "text": "SDK initialization. Parameter values are defined in AppDelegate.swift     Parameter  Type  Properties  Description  Value example      applicationId  String  Mandatory  Application identifier  \"db8a1b41b8543397a798a181d9891b4c\"    clientId  String  Mandatory  Client key for the iOs platform  \"563452bbc611d8106d5da767365897de\"    accessKey  String  Mandatory  Authentication key (master key, script key)  \"28f06b89b62165c33de55265166d8781\"    fileKey  String   Authentication keys for access to files  \"6305ee7ac8023191a333d9267f1a07e8\"    messageKey  String   Authentication key for sending messages  \"9d774f6fa704f192e6aef53933f44e4f\"     Example     In  AppDelegate.swift , specify initialization parameter values in the  didFinishLaunchingWithOptions  method:  let applicationId =  db8a1b41b8543397a798a181d9891b4c \nlet clientId =  563452bbc611d8106d5da767365897de \nlet accessKey =  28f06b89b62165c33de55265166d8781 \nlet fileKey =  6305ee7ac8023191a333d9267f1a07e8 \nlet messageKey =  9d774f6fa704f192e6aef53933f44e4f  SDK initialization  SC.initWith(applicationId: applicationId, clientId: clientId, accessKey: accessKey, fileKey: fileKey, messageKey: messageKey)", 
            "title": ".initWith(applicationId, clientId, accessKey, fileKey, messageKey)"
        }, 
        {
            "location": "/SWIFT/SCValue/", 
            "text": "Protocol for data handling.\n\n\n\n\nSCValue\n\n\nSCBool(value)\n\n\nSCString(value)\n \n\n\nSCInt(value)\n\n\nSCDouble(value)\n  \n\n\nSCDate(value)\n \n\n\nSCArray(value)\n \n\n\nSCDictionary(value)\n\n\n\n\n\n\n\n\n\n\n \n\n\nSCBool(value)\n\n\nScorocode Boolean type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nBool\n\n\nMandatory\n\n\nLogical value\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\n\n\nlet dataBool = SCBool(true)\n\n\n\n\n\n \n\n\nSCString(value)\n\n\nScorocode String type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nMandatory\n\n\nString value\n\n\n\"This is string\"\n\n\n\n\n\n\n\n\nlet dataString = SCString(\nAbCdE\n)\n\n\n\n\n\n \n\n\nSCInt(value)\n\n\nScorocode Boolean type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nInt\n\n\nMandatory\n\n\nInteger value\n\n\n-42\n\n\n\n\n\n\n\n\nlet dataInt = SCInt(5)\n\n\n\n\n\n \n\n\nSCDouble(value)\n\n\nScorocode Double type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nDouble\n\n\nMandatory\n\n\nFloating-point value\n\n\n3.1415926\n\n\n\n\n\n\n\n\nlet dataDouble = SCDouble(3.1415926)\n\n\n\n\n\n \n\n\nSCDate(value)\n\n\nScorocode Date type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nNSDate\n\n\nMandatory\n\n\nDate value\n\n\n2016-05-31\n\n\n\n\n\n\n\n\nlet dataDate = SCDate(dateFormatter.dateFromString(\n2016-05-31\n)!)\n\n\n\n\n\n \n\n\nSCArray(value)\n\n\nScorocode Boolean type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\n[SCValue]\n\n\nMandatory\n\n\nArray value\n\n\n[SCInt(4), SCInt(8), SCInt(15), SCInt(16), SCInt(23), SCInt(42)]\n\n\n\n\n\n\n\n\nlet dataBool = SCBool(true)\nlet dataString = SCString(\nAbCdE\n)\nlet dataInt = SCInt(5)\nlet dataDouble = SCDouble(3.1415926)\nlet dataDate = SCDate(dateFormatter.dateFromString(\n2016-05-31\n)!)\nlet dataDictionary = SCDictionary([\nname\n : dataString, \ndate\n : dataDate])\n\nlet dataArray = SCArray([dataBool, dataString, dataInt, dataDouble, dataDate, dataDictionary])\n\n\n\n\n\n\n\nSCDictionary(value)\n\n\nScorocode Boolean type\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\n[String: SCValue]\n\n\nMandatory\n\n\nObject with the \"key\" type of data: \"value\"\n\n\n[\"key1\" : SCString(\"A\"), \"key2\" : SCString(\"B\")]\n\n\n\n\n\n\n\n\nlet dataDictionary = SCDictionary([\nkey1\n : SCString(\nA\n), \nkey2\n : SCString(\nB\n)])", 
            "title": "SCValue"
        }, 
        {
            "location": "/SWIFT/SCValue/#scboolvalue", 
            "text": "Scorocode Boolean type  Parameters     Parameter  Type  Properties  Description  Value example      value  Bool  Mandatory  Logical value  true  or  false     let dataBool = SCBool(true)", 
            "title": "SCBool(value)"
        }, 
        {
            "location": "/SWIFT/SCValue/#scstringvalue", 
            "text": "Scorocode String type  Parameters     Parameter  Type  Properties  Description  Value example      value  String  Mandatory  String value  \"This is string\"     let dataString = SCString( AbCdE )", 
            "title": "SCString(value)"
        }, 
        {
            "location": "/SWIFT/SCValue/#scintvalue", 
            "text": "Scorocode Boolean type  Parameters     Parameter  Type  Properties  Description  Value example      value  Int  Mandatory  Integer value  -42     let dataInt = SCInt(5)", 
            "title": "SCInt(value)"
        }, 
        {
            "location": "/SWIFT/SCValue/#scdoublevalue", 
            "text": "Scorocode Double type  Parameters     Parameter  Type  Properties  Description  Value example      value  Double  Mandatory  Floating-point value  3.1415926     let dataDouble = SCDouble(3.1415926)", 
            "title": "SCDouble(value)"
        }, 
        {
            "location": "/SWIFT/SCValue/#scdatevalue", 
            "text": "Scorocode Date type  Parameters     Parameter  Type  Properties  Description  Value example      value  NSDate  Mandatory  Date value  2016-05-31     let dataDate = SCDate(dateFormatter.dateFromString( 2016-05-31 )!)", 
            "title": "SCDate(value)"
        }, 
        {
            "location": "/SWIFT/SCValue/#scarrayvalue", 
            "text": "Scorocode Boolean type  Parameters     Parameter  Type  Properties  Description  Value example      value  [SCValue]  Mandatory  Array value  [SCInt(4), SCInt(8), SCInt(15), SCInt(16), SCInt(23), SCInt(42)]     let dataBool = SCBool(true)\nlet dataString = SCString( AbCdE )\nlet dataInt = SCInt(5)\nlet dataDouble = SCDouble(3.1415926)\nlet dataDate = SCDate(dateFormatter.dateFromString( 2016-05-31 )!)\nlet dataDictionary = SCDictionary([ name  : dataString,  date  : dataDate])\n\nlet dataArray = SCArray([dataBool, dataString, dataInt, dataDouble, dataDate, dataDictionary])", 
            "title": "SCArray(value)"
        }, 
        {
            "location": "/SWIFT/SCValue/#scdictionaryvalue", 
            "text": "Scorocode Boolean type  Parameters     Parameter  Type  Properties  Description  Value example      value  [String: SCValue]  Mandatory  Object with the \"key\" type of data: \"value\"  [\"key1\" : SCString(\"A\"), \"key2\" : SCString(\"B\")]     let dataDictionary = SCDictionary([ key1  : SCString( A ),  key2  : SCString( B )])", 
            "title": "SCDictionary(value)"
        }, 
        {
            "location": "/SWIFT/SCObject/", 
            "text": "SCObject\n\n\ninit Object(collection, id?)\n\n\n.set(dic)\n\n\n.save(callback\n  \n\n\n.getById(id, collection, callback)\n\n\n.get(name)\n\n\n.upload(field, filename, data, callback\n\n\n.getFileLink(fieldName, callback)\n\n\n.deleteFile (field, filename, callback)\n  \n\n\n.remove(callback)\n \n\n\n.push(name, _ value)\n\n\n.pushEach(name, _ value)\n  \n\n\n.pull(name, _ value)\n \n\n\n.pullAll(name, _ value)\n \n\n\n.addToSet(name, _ value)\n\n\n.addToSetEach(name, _ value)\n \n\n\n.pop(name, _ value)\n \n\n\n.inc(name, _ value)\n\n\n.currentDate(name, typeSpec)\n\n\n.mul(name, _ value)\n\n\n.min(name, _ value)\n\n\n.max(name, _ value)\n\n\n\n\n\n\n\n\n\n\n\n\ninit Object(collection, id?)\n\n\nSCObject represents the application data object and includes methods for handling this data. The constructor creates a minimal basic \"wrap\" for user data.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncollection\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435\n\n\n\u0418\u043c\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\n\n\n\"testcoll\"\n\n\n\n\n\n\nid\n\n\nString\n\n\n\n\n_id \u043e\u0431\u044a\u0435\u043a\u0442\u0430\n\n\n\"huNr3L7QDh\"\n\n\n\n\n\n\n\n\nExample\n \n\n\n// \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 items.\nlet obj1 = SCObject(collection: \nitems\n, id: \nhuNr3L7QDh\n)\nlet obj2 = SCObject(collection: \nitems\n)\n\n\n\n\n\n\n\n.set(dic)\n\n\nMethod for setting data to object\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ndic\n\n\n[String: SCValue]\n\n\n\n\nDictionary with data to be transferred to document\n\n\n[\"fieldString\": SCString(\"NewValue\")]\n\n\n\n\n\n\n\n\nExample\n \n\n\nlet newItem = SCObject(collection: \nitems\n)\nnewItem.set([\n    \nfieldString\n: SCString(\nSome test string\n),\n    \nreadACL\n: SCArray([SCString(\n*\n), SCString(\n0123456789\n)])\n    ])\nnewItem.save() {\n    success, error, result in\n    if success {\n        // ... \n    } else {\n        if let error = error {\n            // ...\n        }\n    }\n}\n\n\n\n\n.save(callback)\n\n\nThe method saves the object in the data warehouse or updates an object that already exists there\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?)\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet newItem = SCObject(collection: \nitems\n)\nnewItem.set([\nfieldName\n: SCString(\nValue\n)])\nnewItem.save() {\n    success, error, result in\n    if success {\n        // ... \n    } else {\n        if let error = error {\n            // ...\n        }\n    }\n}\n\n\n\n\n.getById(id, collection, callback)\n\n\nMethod for retrieving a collection object from DB by its _id.\n\n\nExample\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nid\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nDocument identifier\n\n\n\"huNr3L7QDh\"\n\n\n\n\n\n\ncollection\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCollection name\n\n\n\"items\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n  \n\n\nSCObject.getById(\np3OtsLXw8p\n, collection: \nitems\n) {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.get(name)\n\n\nMethod for retrieving data from a specified object field.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"price\"\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet dataItem = SCObject(collection: \nitems\n, id: \nhuNr3L7QDh\n)\ndataItem.get(\nprice\n)\n\n\n\n\n.upload(field, filename, data, callback)\n\n\nFile upload method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"attachments\"\n\n\n\n\n\n\nfilename\n\n\nString\n\n\nMandatory\n\n\nFile name\n\n\n\"docname.pdf\"\n\n\n\n\n\n\ndata\n\n\nNSData\n\n\nMandatory\n\n\nFile content\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?)\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet newItem = SCObject(collection: \nitems\n)\nlet image = UIImage(named:\nforupload\n)\nnewItem.set([\n    \ndescription\n: SCString(\nExample upload\n)\n    ])\nnewItem.save() {\n    success, error, result in\n    if success {\n        newItem.upload(\nattachment\n, \nimage.jpg\n, data: image) {\n            success, error, result in\n            if success {\n                print(\nSuccess\n)\n            } else {\n            if let error = error {\n                    print(\nError\n)\n                }\n            }\n        }   \n    } else {\n        if let error = error {\n             print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.getFile(field, filename, callback)\n\n\nMethod for retrieving file contents\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"attachments\"\n\n\n\n\n\n\nfilename\n\n\nString\n\n\nMandatory\n\n\nFile name\n\n\n\"docname.pdf\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?)\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nlet item = SCObject(collection: \nitems\n, id: \nhuNr3L7QDh\n)\nitem.getFileLink(\nattachment\n)\n    if success {\n        print(\nSuccess\n)\n    } else {\n    if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n\n\n\n.deleteFile(field, filename, callback)\n\n\nMethod for file deletion\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"attachments\"\n\n\n\n\n\n\nfilename\n\n\nString\n\n\nMandatory\n\n\nFile name\n\n\n\"docname.pdf\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?)\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nlet item = SCObject(collection: \nitems\n, id: \nhuNr3L7QDh\n)\nitem.delete(\nattachment\n, \nswiftDocs.pdf\n)\n    if success {\n        print(\nSuccess\n)\n    } else {\n    if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n\n\n.remove(callback)\n\n\nMethod for removing the selected document\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?)\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet item = SCObject(collection: \nitems\n, id: \nhuNr3L7QDh\n)\nobj.remove() {\n    success, error, result in\n if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\nException\n\n\n\"Id is not specified\" - \nString\n\n\n\n\n\n\n.push(name, _ value)\n\n\nMethod for adding an element to an array\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nValue of the new array element\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.push(\nlocation\n, SCString(\nSierra Army Depot\n))\n\n\n\n\n\n\n\n.pushEach(name, _ value)\n\n\nMethod for adding several elements to an array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nValues of new array elements\n\n\n42, [43,43], 44\n\n\n\n\n\n\n\n\nExample\n\n\nlet editItem = SCObject(collection: collection)\neditItem.pushEach(\nlocation\n, SCArray([SCString(\nSierra Army Depot\n), SCString(\nNavarro\n)]))\n\n\n\n\n\n\n\n.pull(name, _ value)\n\n\nMethod for removing all array elements whose values are the same as the specified one.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCPullable\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nValue to be removed\n\n\n42\n\n\n\n\n\n\n\n\n\n\n\n\n.pullAll(name, _ value)\n\n\nMethod for removing all array elements whose values are the same as one of the specified values.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nArray of values to be removed\n\n\n[42, 44]\n\n\n\n\n\n\n\n\n\n\n\n\n.addToSet(name, _ value)\n\n\nMethod for adding an element to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nValue of the new array element\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.addToSet(\nlocation\n, SCString(\nA\n))\n\n\n\n\n\n\n\n\n.addToSetEach(name, _ value)\n\n\nMethod for adding elements to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nArray of new array element values\n\n\n[42, 43]\n\n\n\n\n\n\n\n\nExample\n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.addToSetEach(\nlocation\n, SCArray([SCString(\nSierra Army Depot\n), SCString(\nNavarro\n)]))\n\n\n\n\n\n\n\n.pop(name, _ value)\n\n\nMethod for removing the first or the last array element\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nInt\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nPosition of the element to be removed in the array: -1 for the first element and 1 for the last\n\n\n-1\n\n\n\n\n\n\n\n\nExample\n \n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.pop(\nlocation\n, 1)\n\n\n\n\n\n\n\n.inc(name, _ value)\n\n\nThe method increments the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nIncrement step\n\n\n5\n\n\n\n\n\n\n\n\nExample\n \n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.inc(\namount\n, SCInt(-14))\n\n\n\n\n\n\n\n.currentDate(name, typeSpec)\n\n\nSets the current time as the field's value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\ntypeSpec\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nDate type. Accepts the following values: true, \"date\" or \"timestamp\"\n\n\n\"timestamp\"\n\n\n\n\n\n\n\n\nExample\n:\n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.currentDate(\nsomeDate\n, typeSpec: \ndate\n)\n\n\n\n\n\n\n\n\n.mul(name, _ value)\n\n\nThe method multiplies the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nMultiplier\n\n\n2.5\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.min(\nprice\n, SCDouble(42.42))\n\n\n\n\n\n\n\n.min(name, _ value)\n\n\nThe method updates the numeric field value only if the new value is less than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nNew value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet editItem = SCObject(collection: \nitems\n)\neditItem.min(\nprice\n, SCInt(42))\n\n\n\n\n\n\n\n.max(name, _ value)\n\n\nThe method updates the numeric field value only if the new value is greater than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nNew value\n\n\n43\n\n\n\n\n\n\n\n\nExample\n  \n\n\nlet editItem = SCObject(collection: \nitems\n)", 
            "title": "SCObject"
        }, 
        {
            "location": "/SWIFT/SCObject/#init-objectcollection-id", 
            "text": "SCObject represents the application data object and includes methods for handling this data. The constructor creates a minimal basic \"wrap\" for user data.     Parameter  Type  Properties  Description  Value example      collection  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435  \u0418\u043c\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442  \"testcoll\"    id  String   _id \u043e\u0431\u044a\u0435\u043a\u0442\u0430  \"huNr3L7QDh\"     Example    // \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 items.\nlet obj1 = SCObject(collection:  items , id:  huNr3L7QDh )\nlet obj2 = SCObject(collection:  items )", 
            "title": "init Object(collection, id?)"
        }, 
        {
            "location": "/SWIFT/SCObject/#setdic", 
            "text": "Method for setting data to object     Parameter  Type  Properties  Description  Value example      dic  [String: SCValue]   Dictionary with data to be transferred to document  [\"fieldString\": SCString(\"NewValue\")]     Example", 
            "title": ".set(dic)"
        }, 
        {
            "location": "/SWIFT/SCObject/#let-newitem-scobjectcollection-items-newitemset-fieldstring-scstringsome-test-string-readacl-scarrayscstring-scstring0123456789-newitemsave-success-error-result-in-if-success-else-if-let-error-error", 
            "text": "", 
            "title": "let newItem = SCObject(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCObject/#savecallback", 
            "text": "The method saves the object in the data warehouse or updates an object that already exists there     Parameter  Type  Properties  Description  Value example      callback  (Bool, SCError?, [String: AnyObject]?)   Callback for the request being executed.      Example", 
            "title": ".save(callback)"
        }, 
        {
            "location": "/SWIFT/SCObject/#let-newitem-scobjectcollection-items-newitemsetfieldname-scstringvalue-newitemsave-success-error-result-in-if-success-else-if-let-error-error", 
            "text": "", 
            "title": "let newItem = SCObject(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCObject/#getbyidid-collection-callback", 
            "text": "Method for retrieving a collection object from DB by its _id.  Example     Parameter  Type  Properties  Description  Value example      id  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Document identifier  \"huNr3L7QDh\"    collection  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Collection name  \"items\"    callback  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example", 
            "title": ".getById(id, collection, callback)"
        }, 
        {
            "location": "/SWIFT/SCObject/#scobjectgetbyidp3otslxw8p-collection-items-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "SCObject.getById(&quot;p3OtsLXw8p&quot;, collection: &quot;items&quot;) {"
        }, 
        {
            "location": "/SWIFT/SCObject/#getname", 
            "text": "Method for retrieving data from a specified object field.     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Field name  \"price\"     Example", 
            "title": ".get(name)"
        }, 
        {
            "location": "/SWIFT/SCObject/#let-dataitem-scobjectcollection-items-id-hunr3l7qdh-dataitemgetprice", 
            "text": "", 
            "title": "let dataItem = SCObject(collection: &quot;items&quot;, id: &quot;huNr3L7QDh&quot;)"
        }, 
        {
            "location": "/SWIFT/SCObject/#uploadfield-filename-data-callback", 
            "text": "File upload method     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"attachments\"    filename  String  Mandatory  File name  \"docname.pdf\"    data  NSData  Mandatory  File content     callback  (Bool, SCError?)   Callback for the request being executed.      Example", 
            "title": ".upload(field, filename, data, callback)"
        }, 
        {
            "location": "/SWIFT/SCObject/#let-newitem-scobjectcollection-items-let-image-uiimagenamedforupload-newitemset-description-scstringexample-upload-newitemsave-success-error-result-in-if-success-newitemuploadattachment-imagejpg-data-image-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "let newItem = SCObject(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCObject/#getfilefield-filename-callback", 
            "text": "Method for retrieving file contents     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"attachments\"    filename  String  Mandatory  File name  \"docname.pdf\"    callback  (Bool, SCError?)   Callback for the request being executed.      Example  let item = SCObject(collection:  items , id:  huNr3L7QDh )\nitem.getFileLink( attachment )\n    if success {\n        print( Success )\n    } else {\n    if let error = error {\n            print( Error )\n        }\n    }\n}", 
            "title": ".getFile(field, filename, callback)"
        }, 
        {
            "location": "/SWIFT/SCObject/#deletefilefield-filename-callback", 
            "text": "Method for file deletion     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"attachments\"    filename  String  Mandatory  File name  \"docname.pdf\"    callback  (Bool, SCError?)   Callback for the request being executed.      Example    let item = SCObject(collection:  items , id:  huNr3L7QDh )\nitem.delete( attachment ,  swiftDocs.pdf )\n    if success {\n        print( Success )\n    } else {\n    if let error = error {\n            print( Error )\n        }\n    }\n}", 
            "title": ".deleteFile(field, filename, callback)"
        }, 
        {
            "location": "/SWIFT/SCObject/#removecallback", 
            "text": "Method for removing the selected document     Parameter  Type  Properties  Description  Value example      callback  (Bool, SCError?)   Callback for the request being executed.      Example     let item = SCObject(collection:  items , id:  huNr3L7QDh )\nobj.remove() {\n    success, error, result in\n if success {\n        print( Success )\n    } else {\n        if let error = error {\n            print( Error )\n        }\n    }\n}  Exception  \"Id is not specified\" -  String", 
            "title": ".remove(callback)"
        }, 
        {
            "location": "/SWIFT/SCObject/#pushname-_-value", 
            "text": "Method for adding an element to an array     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Value of the new array element  42     Example  let editItem = SCObject(collection:  items )\neditItem.push( location , SCString( Sierra Army Depot ))", 
            "title": ".push(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#pusheachname-_-value", 
            "text": "Method for adding several elements to an array.     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Values of new array elements  42, [43,43], 44     Example  let editItem = SCObject(collection: collection)\neditItem.pushEach( location , SCArray([SCString( Sierra Army Depot ), SCString( Navarro )]))", 
            "title": ".pushEach(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#pullname-_-value", 
            "text": "Method for removing all array elements whose values are the same as the specified one.     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  SCPullable  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Value to be removed  42", 
            "title": ".pull(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#pullallname-_-value", 
            "text": "Method for removing all array elements whose values are the same as one of the specified values.     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Array of values to be removed  [42, 44]", 
            "title": ".pullAll(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#addtosetname-_-value", 
            "text": "Method for adding an element to an array only if there are no elements with the same name in the array.     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Value of the new array element  42     Example  let editItem = SCObject(collection:  items )\neditItem.addToSet( location , SCString( A ))", 
            "title": ".addToSet(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#addtoseteachname-_-value", 
            "text": "Method for adding elements to an array only if there are no elements with the same name in the array.     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Array of new array element values  [42, 43]     Example  let editItem = SCObject(collection:  items )\neditItem.addToSetEach( location , SCArray([SCString( Sierra Army Depot ), SCString( Navarro )]))", 
            "title": ".addToSetEach(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#popname-_-value", 
            "text": "Method for removing the first or the last array element     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"tags\"    _ value  Int  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Position of the element to be removed in the array: -1 for the first element and 1 for the last  -1     Example    let editItem = SCObject(collection:  items )\neditItem.pop( location , 1)", 
            "title": ".pop(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#incname-_-value", 
            "text": "The method increments the numeric field value by a defined number     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"price\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Increment step  5     Example    let editItem = SCObject(collection:  items )\neditItem.inc( amount , SCInt(-14))", 
            "title": ".inc(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#currentdatename-typespec", 
            "text": "Sets the current time as the field's value     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"price\"    typeSpec  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Date type. Accepts the following values: true, \"date\" or \"timestamp\"  \"timestamp\"     Example :  let editItem = SCObject(collection:  items )\neditItem.currentDate( someDate , typeSpec:  date )", 
            "title": ".currentDate(name, typeSpec)"
        }, 
        {
            "location": "/SWIFT/SCObject/#mulname-_-value", 
            "text": "The method multiplies the numeric field value by a defined number     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"price\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Multiplier  2.5     Example     let editItem = SCObject(collection:  items )\neditItem.min( price , SCDouble(42.42))", 
            "title": ".mul(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#minname-_-value", 
            "text": "The method updates the numeric field value only if the new value is less than the current field value     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"price\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  New value  42     Example     let editItem = SCObject(collection:  items )\neditItem.min( price , SCInt(42))", 
            "title": ".min(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCObject/#maxname-_-value", 
            "text": "The method updates the numeric field value only if the new value is greater than the current field value     Parameter  Type  Properties  Description  Value example      name  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Name of the field whose value should be updated  \"price\"    _ value  SCValue  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  New value  43     Example     let editItem = SCObject(collection:  items )", 
            "title": ".max(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/", 
            "text": ".Query\n\n\n.init(collection)\n\n\n.find(callback -\n Void)\n \n\n\n.count(callback -\n Void)\n\n\n.update(update, callback -\n Void)\n \n\n\n.remove(callback)\n \n\n\n.limit(limit)\n\n\n.skip(skip)\n\n\n.page(page)\n\n\n.raw(json)\n\n\n.reset()\n\n\n.ascending(name)\n\n\n.descending(name)\n \n\n\n.fields(names)\n \n\n\n.addOperator(name, oper)\n \n\n\n.equalTo(name, _ value)\n \n\n\n.notEqualTo(name, _ value)\n\n\n.containedIn(name, _ value)\n \n\n\n.containsAll(name, _ value)\n \n\n\n.notContainedIn(name, _ value)\n\n\n.greaterThan(name, _ value)\n\n\n.greaterThanOrEqualTo(name, _ value)\n\n\n.lessThan(name, _ value)\n\n\n.lessThanOrEqualTo(name, _ value)\n\n\n.exists(name)\n\n\n.doesNotExist(name)\n\n\n.contains(name, _ pattern)\n\n\n.startsWith(name, _ pattern)\n\n\n.endsWith(name, _ pattern)\n\n\n.and(operators)\n\n\n.or(operators)\n\n\n\n\n\n\n\n\n\n\n\n\ninit(collection)\n\n\nInitialization of collection data query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncollection\n\n\nString\n\n\nMandatory\n\n\nName of the collection where the object is added\n\n\n\"items\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nusers\n)\n\n\n\n\n\n \n\n\n.find(callback)\n\n\nMethod for searching objects based on the created sampling condition.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nusers\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n \n\n\n.count(callback)\n\n\nMethod for counting objects that meet the query conditions.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, Int?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nusers\n)\nquery.count() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n \n\n\n.update(update, callback)\n\n\nMethod for updating the objects matching the sampling conditions.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nupdate\n\n\nSCUpdate\n\n\nMandatory\n\n\nSCUpdate object to which data for updating is transferred\n\n\n\n\n\n\n\n\ncallback()\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar userArrivalTime = SCUpdate()\nlet currentDate = SCUpdateOperator.currentDate(\nfieldName\n, typeSpec: \ntimestamp\n)\nlogArrivalTime.addOperator(currentDate)\n\nvar arrivedUsers = SCQuery(collection: \nusers\n)\narrivedUsers.equalTo(\nflightRace\n, SCString(\nAF4926\n))\narrivedUsers.update(userArrivalTime) {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.remove(callback)\n\n\nMethod for removing the objects matching the sampling conditions.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback()\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar oldStuff = SCQuery(collection: \nStuff\n)\noldStuff.lessThan(\ncreatedAt\n, SCDate(\n2016-06-54T17:24:23.091+03:00\n))\noldStuff.remove() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n \n\n\n.limit(limit)\n\n\nMethod for setting the sampling limit.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nInt\n\n\nMandatory\n\n\nSampling limit\n\n\n100\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.limit(25)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.skip(skip)\n\n\nMethod for defining the number of documents to be skipped before document sampling\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nInt\n\n\nMandatory\n\n\nNumber of skipped documents\n\n\n1000\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.skip(1000)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n.page(page)\n\n\nMethod for \"per-page\" output of sampling results in accordance with the specified sampling limit.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\npage\n\n\nInt\n\n\nMandatory\n\n\nPage number\n\n\n4\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.limit(25)\nquery.page(4)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n \n\n\n.raw(json)\n\n\nMethod for defining sampling conditions in the form of a JSON structure to create a DB query in MongoDB language.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\njson\n\n\nString\n\n\nMandatory\n\n\nSampling conditions\n\n\n{location: {$in: ['New California Republic', 'Vault City']}}\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.raw(\n{ \\\nfieldString\\\n : \\\n\u0421\u0442\u0440\u043e\u043a\u0430\\\n }\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n \n\n\n.reset()\n\n\nMethod for resetting the sampling conditions\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\n\nquery.equalTo(\nfieldName\n, SCString(\nJohn Doe\n))\nquery.raw(\n{ \\\nfieldString\\\n : \\\n\u0421\u0442\u0440\u043e\u043a\u0430\\\n }\n)\nquery.ascending(\nfield1\n)\nquery.descending(\nfield2\n)\nquery.fields([\nfield1\n, \nfield2\n])\nlet and1 = SCOperator.EqualTo(\nfieldString\n, SCString(\n\u0421\u0442\u0440\u043e\u043a\u0430\n))\nlet and2 = SCOperator.EqualTo(\nfieldNumber\n, SCInt(33))\nquery.and([and1, and2])\n\nquery.reset()\n\n\n\n \n\n\n.ascending(name)\n\n\nMethod for sorting data in ascending order of specified field values before sampling.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"price\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar sortByPrice = SCQuery(collection: \nitems\n)\nsortByPrice.ascending(\nprice\n)\nsortByPrice.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n.descending(name)\n\n\nMethod for sorting data in the descending order of specified field values before sampling.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"reward\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar sortByReward = SCQuery(collection: \nitems\n)\nsortByReward.descending(\nreward\n)\nsortByReward.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n\n\n.fields(names)\n\n\nMethod for specifying a list of returned fields.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nnames\n\n\n[String]\n\n\nMandatory\n\n\nArray of requested field values\n\n\n[\"price\", \"reward\"]\n\n\n\n\n\n\n\n\nExample\n\n\nvar getPriceAndReward = SCQuery(collection: \nitems\n)\ngetPriceAndReward.fields([\nprice\n, \nreward\n])\ngetPriceAndReward.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n \n\n\n.addOperator(name, oper)\n\n\nMethod for transferring a sampling condition to SCQuery\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"testcoll\"\n\n\n\n\n\n\noper\n\n\nSCOperator\n\n\nMandatory\n\n\nThe assigned condition\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nlet lessNorEqual = SCOperator.LessThanOrEqualTo(\nprice\n, 42)\nSCQuery.addOperator(name, oper: lessNorEqual)\n\n\n \n\n\n.equalTo(name, _ value)\n\n\nMethod for retrieving all documents with the field value indicated in the condition.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nField value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.equalTo(\nequality\n, SCString(\nyep\n))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.notEqualTo(name, _ value)\n\n\nMethod for retrieving all documents except for objects with the field value indicated in the condition.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nField value\n\n\n43\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.notEqualTo(\nunequality\n, SCString(\nnope\n))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n \n\n\n.containedIn(name, _ value)\n\n\nMethod for retrieving all objects whose field value contains the array elements specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCArray\n\n\nMandatory\n\n\nArray of values\n\n\n[-42, 41.999, 42]\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.containedIn(\nsomeField\n, SCArray([SCString(\nA\n), SCString(\nB\n)]))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n \n\n\n.containsAll(name, _ value)\n\n\nMethod for retrieving all objects whose field value contains all array elements specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"strangeNumbers\"\n\n\n\n\n\n\n_ value\n\n\nSCArray\n\n\nMandatory\n\n\nArray of values\n\n\n[4, 8, 15, 16, 23, 42]\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.containsAll(\nsomeField\n, SCArray([SCString(\nA\n), SCString(\nB\n)]))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n\n.notContainedIn(name, _ value)\n\n\nMethod for retrieving all objects whose field value does not contain the array elements specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCArray\n\n\nMandatory\n\n\nArray of values\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.notContainedIn(\nsomeField\n, SCArray([SCString(\nA\n), SCString(\nB\n)]))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.greaterThan(name, _ value)\n\n\nMethod for retrieving all objects whose field value is greater than the number specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"reward\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nCondition value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.greaterThan(\nreward\n, SCInt(100))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.greaterThanOrEqualTo(name, _ value)\n\n\nMethod for retrieving all objects whose field value is no less than the number specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field to which the condition is assigned\n\n\n\"reward\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nCondition value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.greaterThanOrEqualTo(\ncreatedAt\n, SCDate(\n2016-06-04T17:24:23.091+03:00\n))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.lessThan(name, _ value)\n\n\nMethod for retrieving all objects whose field value is less than the number specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nCondition value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.lessThan(\nprice\n, SCInt(42))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.lessThanOrEqualTo(name, _ value)\n\n\nMethod for retrieving all objects whose field value is no greater than the number specified in the query.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nCondition value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.lessThanOrEqualTo(\nprice\n, SCInt(42))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.exists(name)\n\n\nMethod for retrieving all objects with an existing value of a defined field\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"price\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.exists(\nreward\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.doesNotExist(name)\n\n\nMethod for retrieving all objects with a missing value in a defined field.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"price\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.doesNotExist(\nprice\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.contains(name, _ pattern)\n\n\nMethod for retrieving all objects with a value of a defined field that matches a defined regular expression.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"stringsWithNumbers\"\n\n\n\n\n\n\n_ pattern\n\n\nString\n\n\nMandatory\n\n\nRegular expression\n\n\n[0-9]\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.contains(\ndescription\n, \n[a-zA-Z0-9]\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.startsWith(name, _ pattern)\n\n\nMethod for retrieving all objects with a value of a defined field starting from a specified string.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"labels\"\n\n\n\n\n\n\n_ pattern\n\n\nString\n\n\nMandatory\n\n\nCondition value\n\n\n\"neverendi\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.startsWith(\nfieldString\n, \n[A-Z]\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.endsWith(name, _ pattern)\n\n\nMethod for retrieving all objects with a value of a defined field ending with a specified string.\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"labels\"\n\n\n\n\n\n\n_ pattern\n\n\nString\n\n\nMandatory\n\n\nCondition value\n\n\n\"ngdocuments\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.endsWith(\nfieldString\n, \ning\n)\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.and(operators)\n\n\nMethod for logical multiplication of conditions of several samplings\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\noperators\n\n\n[SCOperator]\n\n\nMandatory\n\n\nSampling condition which is included in the conjunction\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.notEqualTo(\nunequality\n, SCString(\nnope\n))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.or(operators)\n\n\nMethod for Boolean addition of conditions of several samplings\n\n\nProperties\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\noperators\n\n\n[SCOperator]\n\n\nMandatory\n\n\nSampling condition which is included in the disjunction\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nvar query = SCQuery(collection: \nitems\n)\nquery.notEqualTo(\nunequality\n, SCString(\nnope\n))\nquery.find() {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}", 
            "title": "SCQuery"
        }, 
        {
            "location": "/SWIFT/SCQuery/#initcollection", 
            "text": "Initialization of collection data query.  Properties     Parameter  Type  Properties  Description  Value example      collection  String  Mandatory  Name of the collection where the object is added  \"items\"     Example  var query = SCQuery(collection:  users )", 
            "title": "init(collection)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#findcallback", 
            "text": "Method for searching objects based on the created sampling condition.  Properties     Parameter  Type  Properties  Description  Value example      callback  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example", 
            "title": ".find(callback)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-users-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;users&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#countcallback", 
            "text": "Method for counting objects that meet the query conditions.  Properties     Parameter  Type  Properties  Description  Value example      callback  (Bool, SCError?, Int?) -  Void   Callback for the request being executed.      Example", 
            "title": ".count(callback)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-users-querycount-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;users&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#updateupdate-callback", 
            "text": "Method for updating the objects matching the sampling conditions.  Properties     Parameter  Type  Properties  Description  Value example      update  SCUpdate  Mandatory  SCUpdate object to which data for updating is transferred     callback()  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example", 
            "title": ".update(update, callback)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-userarrivaltime-scupdate-let-currentdate-scupdateoperatorcurrentdatefieldname-typespec-timestamp-logarrivaltimeaddoperatorcurrentdate-var-arrivedusers-scquerycollection-users-arrivedusersequaltoflightrace-scstringaf4926-arrivedusersupdateuserarrivaltime-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var userArrivalTime = SCUpdate()"
        }, 
        {
            "location": "/SWIFT/SCQuery/#removecallback", 
            "text": "Method for removing the objects matching the sampling conditions.  Properties     Parameter  Type  Properties  Description  Value example      callback()  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example", 
            "title": ".remove(callback)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-oldstuff-scquerycollection-stuff-oldstufflessthancreatedat-scdate2016-06-54t1724230910300-oldstuffremove-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var oldStuff = SCQuery(collection: &quot;Stuff&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#limitlimit", 
            "text": "Method for setting the sampling limit.  Properties     Parameter  Type  Properties  Description  Value example      limit  Int  Mandatory  Sampling limit  100     Example", 
            "title": ".limit(limit)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querylimit25-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#skipskip", 
            "text": "Method for defining the number of documents to be skipped before document sampling  Properties     Parameter  Type  Properties  Description  Value example      limit  Int  Mandatory  Number of skipped documents  1000     Example", 
            "title": ".skip(skip)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-queryskip1000-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#pagepage", 
            "text": "Method for \"per-page\" output of sampling results in accordance with the specified sampling limit.  Properties     Parameter  Type  Properties  Description  Value example      page  Int  Mandatory  Page number  4     Example", 
            "title": ".page(page)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querylimit25-querypage4-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#rawjson", 
            "text": "Method for defining sampling conditions in the form of a JSON structure to create a DB query in MongoDB language.  Properties     Parameter  Type  Properties  Description  Value example      json  String  Mandatory  Sampling conditions  {location: {$in: ['New California Republic', 'Vault City']}}     Example", 
            "title": ".raw(json)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-queryraw-fieldstring-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#reset", 
            "text": "Method for resetting the sampling conditions  Example", 
            "title": ".reset()"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-queryequaltofieldname-scstringjohn-doe-queryraw-fieldstring-queryascendingfield1-querydescendingfield2-queryfieldsfield1-field2-let-and1-scoperatorequaltofieldstring-scstring-let-and2-scoperatorequaltofieldnumber-scint33-queryandand1-and2-queryreset", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#ascendingname", 
            "text": "Method for sorting data in ascending order of specified field values before sampling.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Field name  \"price\"     Example", 
            "title": ".ascending(name)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-sortbyprice-scquerycollection-items-sortbypriceascendingprice-sortbypricefind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var sortByPrice = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#descendingname", 
            "text": "Method for sorting data in the descending order of specified field values before sampling.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Field name  \"reward\"     Example  var sortByReward = SCQuery(collection:  items )\nsortByReward.descending( reward )\nsortByReward.find() {\n    success, error, result in\n    if success {\n        print( Success )\n    } else {\n        if let error = error {\n            print( Error )\n        }\n    }\n}", 
            "title": ".descending(name)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#fieldsnames", 
            "text": "Method for specifying a list of returned fields.  Properties     Parameter  Type  Properties  Description  Value example      names  [String]  Mandatory  Array of requested field values  [\"price\", \"reward\"]     Example  var getPriceAndReward = SCQuery(collection:  items )\ngetPriceAndReward.fields([ price ,  reward ])\ngetPriceAndReward.find() {\n    success, error, result in\n    if success {\n        print( Success )\n    } else {\n        if let error = error {\n            print( Error )\n        }\n    }\n}", 
            "title": ".fields(names)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#addoperatorname-oper", 
            "text": "Method for transferring a sampling condition to SCQuery  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"testcoll\"    oper  SCOperator  Mandatory  The assigned condition      Example", 
            "title": ".addOperator(name, oper)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#let-lessnorequal-scoperatorlessthanorequaltoprice-42-scqueryaddoperatorname-oper-lessnorequal", 
            "text": "", 
            "title": "let lessNorEqual = SCOperator.LessThanOrEqualTo(&quot;price&quot;, 42)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#equaltoname-_-value", 
            "text": "Method for retrieving all documents with the field value indicated in the condition.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"tags\"    _ value  SCValue  Mandatory  Field value  42     Example", 
            "title": ".equalTo(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-queryequaltoequality-scstringyep-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#notequaltoname-_-value", 
            "text": "Method for retrieving all documents except for objects with the field value indicated in the condition.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"tags\"    _ value  SCValue  Mandatory  Field value  43     Example", 
            "title": ".notEqualTo(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querynotequaltounequality-scstringnope-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#containedinname-_-value", 
            "text": "Method for retrieving all objects whose field value contains the array elements specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"price\"    _ value  SCArray  Mandatory  Array of values  [-42, 41.999, 42]     Example", 
            "title": ".containedIn(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querycontainedinsomefield-scarrayscstringa-scstringb-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#containsallname-_-value", 
            "text": "Method for retrieving all objects whose field value contains all array elements specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"strangeNumbers\"    _ value  SCArray  Mandatory  Array of values  [4, 8, 15, 16, 23, 42]     Example", 
            "title": ".containsAll(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querycontainsallsomefield-scarrayscstringa-scstringb-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#notcontainedinname-_-value", 
            "text": "Method for retrieving all objects whose field value does not contain the array elements specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"tags\"    _ value  SCArray  Mandatory  Array of values  42     Example", 
            "title": ".notContainedIn(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querynotcontainedinsomefield-scarrayscstringa-scstringb-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#greaterthanname-_-value", 
            "text": "Method for retrieving all objects whose field value is greater than the number specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"reward\"    _ value  SCValue  Mandatory  Condition value  42     Example", 
            "title": ".greaterThan(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querygreaterthanreward-scint100-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#greaterthanorequaltoname-_-value", 
            "text": "Method for retrieving all objects whose field value is no less than the number specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field to which the condition is assigned  \"reward\"    _ value  SCValue  Mandatory  Condition value  42     Example", 
            "title": ".greaterThanOrEqualTo(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querygreaterthanorequaltocreatedat-scdate2016-06-04t1724230910300-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#lessthanname-_-value", 
            "text": "Method for retrieving all objects whose field value is less than the number specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    _ value  SCValue  Mandatory  Condition value  42     Example", 
            "title": ".lessThan(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querylessthanprice-scint42-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#lessthanorequaltoname-_-value", 
            "text": "Method for retrieving all objects whose field value is no greater than the number specified in the query.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    _ value  SCValue  Mandatory  Condition value  42     Example", 
            "title": ".lessThanOrEqualTo(name, _ value)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querylessthanorequaltoprice-scint42-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#existsname", 
            "text": "Method for retrieving all objects with an existing value of a defined field  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field for which a condition is defined  \"price\"     Example", 
            "title": ".exists(name)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-queryexistsreward-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#doesnotexistname", 
            "text": "Method for retrieving all objects with a missing value in a defined field.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field for which a condition is defined  \"price\"     Example", 
            "title": ".doesNotExist(name)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querydoesnotexistprice-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#containsname-_-pattern", 
            "text": "Method for retrieving all objects with a value of a defined field that matches a defined regular expression.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field for which a condition is defined  \"stringsWithNumbers\"    _ pattern  String  Mandatory  Regular expression  [0-9]     Example", 
            "title": ".contains(name, _ pattern)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querycontainsdescription-a-za-z0-9-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#startswithname-_-pattern", 
            "text": "Method for retrieving all objects with a value of a defined field starting from a specified string.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field for which a condition is defined  \"labels\"    _ pattern  String  Mandatory  Condition value  \"neverendi\"     Example", 
            "title": ".startsWith(name, _ pattern)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querystartswithfieldstring-a-z-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#endswithname-_-pattern", 
            "text": "Method for retrieving all objects with a value of a defined field ending with a specified string.  Properties     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"labels\"    _ pattern  String  Mandatory  Condition value  \"ngdocuments\"     Example", 
            "title": ".endsWith(name, _ pattern)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-queryendswithfieldstring-ing-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#andoperators", 
            "text": "Method for logical multiplication of conditions of several samplings  Properties     Parameter  Type  Properties  Description  Value example      operators  [SCOperator]  Mandatory  Sampling condition which is included in the conjunction      Example", 
            "title": ".and(operators)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#var-query-scquerycollection-items-querynotequaltounequality-scstringnope-queryfind-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror_1", 
            "text": "", 
            "title": "var query = SCQuery(collection: &quot;items&quot;)"
        }, 
        {
            "location": "/SWIFT/SCQuery/#oroperators", 
            "text": "Method for Boolean addition of conditions of several samplings  Properties     Parameter  Type  Properties  Description  Value example      operators  [SCOperator]  Mandatory  Sampling condition which is included in the disjunction      Example  var query = SCQuery(collection:  items )\nquery.notEqualTo( unequality , SCString( nope ))\nquery.find() {\n    success, error, result in\n    if success {\n        print( Success )\n    } else {\n        if let error = error {\n            print( Error )\n        }\n    }\n}", 
            "title": ".or(operators)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/", 
            "text": "SCUpdate\n\n\n.addOperator(oper: SCUpdateOperator)\n\n\n.set(dic: [String: SCValue])\n \n\n\n.push(name: String, _ value: SCValue)\n\n\n.pushEach(name: String, _ value: SCValue)\n  \n\n\n.pull(name: String, _ value: SCPullable)\n \n\n\n.pullAll(name: String, _ value: SCValue)\n \n\n\n.addToSet(name: String, _ value: SCValue)\n\n\n.addToSetEach(name: String, _ value: SCValue)\n \n\n\n.pop(name: String, _ value: Int)\n \n\n\n.inc(name: String, _ value: SCValue)\n\n\n.currentDate(name: String, typeSpec: String)\n\n\n.mul(name: String, _ value: SCValue)\n\n\n.min(name: String, _ value: SCValue)\n\n\n.max(name: String, _ value: SCValue)\n\n\n\n\n\n\n\n\n\n\n \n\n\n.addOperator(name, oper)\n\n\nMethod for transferring the SCUpdate operator to modify data\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\noper\n\n\nSCUpdateOperator\n\n\nMandatory\n\n\nSampling condition\n\n\n\n\n\n\n\n\n\n\nvar update = SCUpdate()\nlet currentDate = SCUpdateOperator.currentDate(\nfieldName\n, typeSpec: \ntimestamp\n)\nupdate.addOperator(currentDate)\n\n\n\n\n\n\n\n.set(dic: [String: SCValue])\n\n\nMethod for transferring data to object\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ndic\n\n\n[String: SCValue]\n\n\n\n\nObject with data to be transferred to object\n\n\n[\"fieldString\": SCString(\"NewValue\")]\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar update = SCUpdate()\nupdate.set([\nfieldName\n: SCString(\nA\n)])\n\n\n\n\n\n\n\n.push(name: String, _ value: SCValue))\n\n\nMethod for adding an element to an array\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nValue of the new array element\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.push(\nfieldName\n, SCString(\nA\n))\nupdate.save()\n\n\n\n\n\n\n\n.pushEach(name: String, _ value: SCValue))\n\n\nMethod for adding several elements to an array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nValue of the new array element\n\n\n42, [43,43], 44\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.pushEach(\nfieldName\n, SCArray([SCString(\nA\n)]))\n\n\n\n\n\n\n\n.pull(name: String, _ value: SCPullable)\n\n\nMethod for removing all array elements whose values are the same as the specified one.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCPullable\n\n\nMandatory\n\n\nValue to be removed\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.pull(\nfieldName\n, SCString(\nA\n))\n\n\n\n\n\n\n\n.pullAll(name: String, _ value: SCValue)\n\n\nMethod for removing all array elements whose values are the same as one of the specified values.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nArray of values to be removed\n\n\n[42, 44]\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.pullAll(\nfieldName\n, SCArray([SCString(\nA\n)]))\n\n\n\n\n\n\n\n.addToSet(name: String, _ value: SCValue)\n\n\nMethod for adding an element to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nValue of the new array element\n\n\n42\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.addToSet(\nfieldName\n, SCString(\nA\n))\n\n\n\n\n\n\n\n.addToSetEach(name: String, _ value: SCValue)\n\n\nMethod for adding elements to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nArray of new array element values\n\n\n[42, 43]\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.addToSetEach(\nfieldName\n, SCArray(SCString(\nA\n))\n\n\n\n\n\n\n\n.pop(name: String, _ value: Int)\n\n\nMethod for removing the first or the last array element\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"tags\"\n\n\n\n\n\n\n_ value\n\n\nInt\n\n\nMandatory\n\n\nPosition of the element to be removed in the array: -1 for the first element and 1 for the last\n\n\n-1\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.pop(\nfieldName\n, 1)\n\n\n\n\n\n\n\n.inc(name: String, _ value: SCValue)\n\n\nThe method increments the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nIncrement step\n\n\n5\n\n\n\n\n\n\n\n\nExample\n \n\n\nvar update = SCUpdate()\nupdate.inc(\nfieldName\n, SCInt(1))\n\n\n\n\n\n\n\n.currentDate(name: String, typeSpec: String)\n\n\nSets the current time as the field's value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\ntypeSpec\n\n\nSCValue\n\n\nMandatory\n\n\nDate type. Accepts the following values: true, \"date\" or \"timestamp\"\n\n\n\"timestamp\"\n\n\n\n\n\n\n\n\nExample\n\n\nvar update = SCUpdate()\nupdate.currentDate(\nfieldName\n, typeSpec: \ndate\n)\n\n\n\n\n\n\n\n.mul(name: String, _ value: SCValue)\n\n\nThe method multiplies the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nMultiplier\n\n\n2.5\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar update = SCUpdate()\nupdate.mul(\nfieldName\n, SCInt(5))\n\n\n\n\n\n\n\n.min(name: String, _ value: SCValue)\n\n\nThe method updates the numeric field value only if the new value is less than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nNew value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar update = SCUpdate()\nupdate.min(\nfieldName\n, SCInt(5))\n\n\n\n\n\n\n\n.max(name: String, _ value: SCValue)\n\n\nThe method updates the numeric field value only if the new value is greater than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\n_ value\n\n\nSCValue\n\n\nMandatory\n\n\nNew value\n\n\n42\n\n\n\n\n\n\n\n\nExample\n  \n\n\nvar update = SCUpdate()\nupdate.max(\nfieldName\n, SCInt(5))", 
            "title": "SCUpdate"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#addoperatorname-oper", 
            "text": "Method for transferring the SCUpdate operator to modify data  Parameters     Parameter  Type  Properties  Description  Value example      oper  SCUpdateOperator  Mandatory  Sampling condition      var update = SCUpdate()\nlet currentDate = SCUpdateOperator.currentDate( fieldName , typeSpec:  timestamp )\nupdate.addOperator(currentDate)", 
            "title": ".addOperator(name, oper)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#setdic-string-scvalue", 
            "text": "Method for transferring data to object     Parameter  Type  Properties  Description  Value example      dic  [String: SCValue]   Object with data to be transferred to object  [\"fieldString\": SCString(\"NewValue\")]     Example     var update = SCUpdate()\nupdate.set([ fieldName : SCString( A )])", 
            "title": ".set(dic: [String: SCValue])"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#pushname-string-_-value-scvalue", 
            "text": "Method for adding an element to an array     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  Mandatory  Value of the new array element  42     Example  var update = SCUpdate()\nupdate.push( fieldName , SCString( A ))\nupdate.save()", 
            "title": ".push(name: String, _ value: SCValue))"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#pusheachname-string-_-value-scvalue", 
            "text": "Method for adding several elements to an array.     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  Mandatory  Value of the new array element  42, [43,43], 44     Example  var update = SCUpdate()\nupdate.pushEach( fieldName , SCArray([SCString( A )]))", 
            "title": ".pushEach(name: String, _ value: SCValue))"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#pullname-string-_-value-scpullable", 
            "text": "Method for removing all array elements whose values are the same as the specified one.     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  SCPullable  Mandatory  Value to be removed  42     Example  var update = SCUpdate()\nupdate.pull( fieldName , SCString( A ))", 
            "title": ".pull(name: String, _ value: SCPullable)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#pullallname-string-_-value-scvalue", 
            "text": "Method for removing all array elements whose values are the same as one of the specified values.     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  Mandatory  Array of values to be removed  [42, 44]     Example  var update = SCUpdate()\nupdate.pullAll( fieldName , SCArray([SCString( A )]))", 
            "title": ".pullAll(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#addtosetname-string-_-value-scvalue", 
            "text": "Method for adding an element to an array only if there are no elements with the same name in the array.     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  Mandatory  Value of the new array element  42     Example  var update = SCUpdate()\nupdate.addToSet( fieldName , SCString( A ))", 
            "title": ".addToSet(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#addtoseteachname-string-_-value-scvalue", 
            "text": "Method for adding elements to an array only if there are no elements with the same name in the array.     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  SCValue  Mandatory  Array of new array element values  [42, 43]     Example  var update = SCUpdate()\nupdate.addToSetEach( fieldName , SCArray(SCString( A ))", 
            "title": ".addToSetEach(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#popname-string-_-value-int", 
            "text": "Method for removing the first or the last array element     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"tags\"    _ value  Int  Mandatory  Position of the element to be removed in the array: -1 for the first element and 1 for the last  -1     Example  var update = SCUpdate()\nupdate.pop( fieldName , 1)", 
            "title": ".pop(name: String, _ value: Int)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#incname-string-_-value-scvalue", 
            "text": "The method increments the numeric field value by a defined number     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    _ value  SCValue  Mandatory  Increment step  5     Example    var update = SCUpdate()\nupdate.inc( fieldName , SCInt(1))", 
            "title": ".inc(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#currentdatename-string-typespec-string", 
            "text": "Sets the current time as the field's value     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    typeSpec  SCValue  Mandatory  Date type. Accepts the following values: true, \"date\" or \"timestamp\"  \"timestamp\"     Example  var update = SCUpdate()\nupdate.currentDate( fieldName , typeSpec:  date )", 
            "title": ".currentDate(name: String, typeSpec: String)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#mulname-string-_-value-scvalue", 
            "text": "The method multiplies the numeric field value by a defined number     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    _ value  SCValue  Mandatory  Multiplier  2.5     Example     var update = SCUpdate()\nupdate.mul( fieldName , SCInt(5))", 
            "title": ".mul(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#minname-string-_-value-scvalue", 
            "text": "The method updates the numeric field value only if the new value is less than the current field value     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    _ value  SCValue  Mandatory  New value  42     Example     var update = SCUpdate()\nupdate.min( fieldName , SCInt(5))", 
            "title": ".min(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUpdate/#maxname-string-_-value-scvalue", 
            "text": "The method updates the numeric field value only if the new value is greater than the current field value     Parameter  Type  Properties  Description  Value example      name  String  Mandatory  Name of the field whose value should be updated  \"price\"    _ value  SCValue  Mandatory  New value  42     Example     var update = SCUpdate()\nupdate.max( fieldName , SCInt(5))", 
            "title": ".max(name: String, _ value: SCValue)"
        }, 
        {
            "location": "/SWIFT/SCUser/", 
            "text": "SCUser\n\n\ninit()\n\n\n.login(email, password, callback)\n\n\n.logout(callback)\n\n\n.signup(username, email, password, callback)\n\n\n.signup(callback)\n\n\n\n\n\n\n\n\n\n\n\n\ninit()\n\n\nSCUser initialization\n\n\nExample\n\n\nlet appUser = SCUser()\n\n\n\n\n\n\n\n.login(email, password, callback)\n\n\nMethod for application user authentication\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nString\n\n\nMandatory\n\n\nUser email\n\n\n\"user@domain.zone\"\n\n\n\n\n\n\npassword\n\n\nString\n\n\nMandatory\n\n\nUser password\n\n\n\"CorrectHorseBatteryStaple\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n   \n\n\n    @IBAction private func loginPressed() {\n\n        guard let email = emailTextField.text where email != \n,\n            let password = passwordTextField.text where password != \n else {\n                let alert = UIAlertController(title: \n\u0412\u0445\u043e\u0434 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d\n, message: \n\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\n, preferredStyle: .Alert)\n                let ok = UIAlertAction(title: \nOK\n, style: .Default) {\n                    action in\n                    return\n                }\n                alert.addAction(ok)\n                presentViewController(alert, animated: true, completion: nil)\n                return\n        }\n\n        let user = SCUser()\n        user.login(email, password: password) {\n            success, error, result in\n            if success {\n                let alert = UIAlertController(title: \n\u0412\u0445\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\n, message: nil, preferredStyle: .Alert)\n                let ok = UIAlertAction(title: \nOK\n, style: .Default) {\n                    action in\n                    self.performSegueWithIdentifier(\nToObjects\n, sender: nil)\n                }\n                alert.addAction(ok)\n                self.presentViewController(alert, animated: true, completion: nil)\n            }\n        }\n\n\n\n\n\n\n\n.logout(callback)\n\n\nMethod for application user deauthentication. \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n   \n\n\n    @IBAction private func logoutPressed() {\n        SCUser.logout() {\n            success, error in\n            if success {\n                self.dismissViewControllerAnimated(true, completion: nil)\n            }\n        }\n    }\n\n\n\n\n.signup(username, email, password, callback)\n\n\nMethod for application user registration.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nString\n\n\nMandatory\n\n\n\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\n\n\"Jovan\"\n\n\n\n\n\n\nemail\n\n\nString\n\n\nMandatory\n\n\nEmail \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\n\n\"user@domain.zone\"\n\n\n\n\n\n\npassword\n\n\nString\n\n\nMandatory\n\n\n\u041f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\n\n\"CorrectHorseBatteryStaple\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n   \n\n\n@IBAction private func signupPressed() {\n    guard let email = emailTextField.text where email != \n,\n        let password = passwordTextField.text where password != \n,\n    let username = usernameTextField.text where username != \n else {\n            let alert = UIAlertController(title: \n\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430\n, message: \n\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d email, \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u043b\u0438 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n, preferredStyle: .Alert)\n            let ok = UIAlertAction(title: \nOK\n, style: .Default) {\n                action in\n                return\n            }\n            alert.addAction(ok)\n            presentViewController(alert, animated: true, completion: nil)\n            return\n    }\n\n    let user = SCUser()\n    user.signup(username, email: email, password: password) {\n        success, error, result in\n        if success {\n            let alert = UIAlertController(title: \n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\n, message: nil, preferredStyle: .Alert)\n            let ok = UIAlertAction(title: \nOK\n, style: .Default) {\n                action in\n                self.dismissViewControllerAnimated(true, completion: nil)\n            }\n            alert.addAction(ok)\n            self.presentViewController(alert, animated: true, completion: nil)\n        } else {\n            var message = \n\n            switch error! {\n            case .API(_, let apiMessage):\n                message = apiMessage\n            default:\n                break\n            }\n            let alert = UIAlertController(title: \n\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n, message: message, preferredStyle: .Alert)\n            let ok = UIAlertAction(title: \nOK\n, style: .Default) {\n                action in\n            }\n            alert.addAction(ok)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n    }\n}\n\n\n\n\n\n\n\n.signup(callback)\n\n\nMethod for application user registration. Fields are defined using the Object parent class methods.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, [String: AnyObject]?) -\n Void\n\n\n\n\nCallback for the request being executed.", 
            "title": "SCUser"
        }, 
        {
            "location": "/SWIFT/SCUser/#init", 
            "text": "SCUser initialization  Example  let appUser = SCUser()", 
            "title": "init()"
        }, 
        {
            "location": "/SWIFT/SCUser/#loginemail-password-callback", 
            "text": "Method for application user authentication     Parameter  Type  Properties  Description  Value example      email  String  Mandatory  User email  \"user@domain.zone\"    password  String  Mandatory  User password  \"CorrectHorseBatteryStaple\"    callback  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example          @IBAction private func loginPressed() {\n\n        guard let email = emailTextField.text where email !=  ,\n            let password = passwordTextField.text where password !=   else {\n                let alert = UIAlertController(title:  \u0412\u0445\u043e\u0434 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d , message:  \u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c , preferredStyle: .Alert)\n                let ok = UIAlertAction(title:  OK , style: .Default) {\n                    action in\n                    return\n                }\n                alert.addAction(ok)\n                presentViewController(alert, animated: true, completion: nil)\n                return\n        }\n\n        let user = SCUser()\n        user.login(email, password: password) {\n            success, error, result in\n            if success {\n                let alert = UIAlertController(title:  \u0412\u0445\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d , message: nil, preferredStyle: .Alert)\n                let ok = UIAlertAction(title:  OK , style: .Default) {\n                    action in\n                    self.performSegueWithIdentifier( ToObjects , sender: nil)\n                }\n                alert.addAction(ok)\n                self.presentViewController(alert, animated: true, completion: nil)\n            }\n        }", 
            "title": ".login(email, password, callback)"
        }, 
        {
            "location": "/SWIFT/SCUser/#logoutcallback", 
            "text": "Method for application user deauthentication.      Parameter  Type  Properties  Description  Value example      callback  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example", 
            "title": ".logout(callback)"
        }, 
        {
            "location": "/SWIFT/SCUser/#ibaction-private-func-logoutpressed-scuserlogout-success-error-in-if-success-selfdismissviewcontrolleranimatedtrue-completion-nil", 
            "text": "", 
            "title": "    @IBAction private func logoutPressed() {"
        }, 
        {
            "location": "/SWIFT/SCUser/#signupusername-email-password-callback", 
            "text": "Method for application user registration.     Parameter  Type  Properties  Description  Value example      username  String  Mandatory  \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f  \"Jovan\"    email  String  Mandatory  Email \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f  \"user@domain.zone\"    password  String  Mandatory  \u041f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f  \"CorrectHorseBatteryStaple\"    callback  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.      Example      @IBAction private func signupPressed() {\n    guard let email = emailTextField.text where email !=  ,\n        let password = passwordTextField.text where password !=  ,\n    let username = usernameTextField.text where username !=   else {\n            let alert = UIAlertController(title:  \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430 , message:  \u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d email, \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u043b\u0438 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f , preferredStyle: .Alert)\n            let ok = UIAlertAction(title:  OK , style: .Default) {\n                action in\n                return\n            }\n            alert.addAction(ok)\n            presentViewController(alert, animated: true, completion: nil)\n            return\n    }\n\n    let user = SCUser()\n    user.signup(username, email: email, password: password) {\n        success, error, result in\n        if success {\n            let alert = UIAlertController(title:  \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d , message: nil, preferredStyle: .Alert)\n            let ok = UIAlertAction(title:  OK , style: .Default) {\n                action in\n                self.dismissViewControllerAnimated(true, completion: nil)\n            }\n            alert.addAction(ok)\n            self.presentViewController(alert, animated: true, completion: nil)\n        } else {\n            var message =  \n            switch error! {\n            case .API(_, let apiMessage):\n                message = apiMessage\n            default:\n                break\n            }\n            let alert = UIAlertController(title:  \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 , message: message, preferredStyle: .Alert)\n            let ok = UIAlertAction(title:  OK , style: .Default) {\n                action in\n            }\n            alert.addAction(ok)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n    }\n}", 
            "title": ".signup(username, email, password, callback)"
        }, 
        {
            "location": "/SWIFT/SCUser/#signupcallback", 
            "text": "Method for application user registration. Fields are defined using the Object parent class methods.     Parameter  Type  Properties  Description  Value example      callback  (Bool, SCError?, [String: AnyObject]?) -  Void   Callback for the request being executed.", 
            "title": ".signup(callback)"
        }, 
        {
            "location": "/SWIFT/SCMessage/", 
            "text": "SCMessage\n\n\n.sendPush(query: SCQuery, subject: String, text: String, callback: (Bool, SCError?, Int?) -\n Void)\n\n\n.sendSms(query: SCQuery, subject: String, text: String, callback: (Bool, SCError?, Int?) -\n Void)\n\n\n\n\n\n\n\n\n\n\n\n\n.sendPush(query, subject, text, callback)\n\n\nPush sending method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nSCQuery\n\n\n\n\nUsers/Devices collection query for sampling addressees\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\n\n\nPush text\n\n\n\"Push text\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, Int?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n   \n\n\nvar queryUserDevices = SCQuery(collection: \ndevices\n)\nvar broadcast = SCMessage()\n\nqueryUserDevices.exists(\nuserRelation\n)\nbroadcast.sendPush(queryUserDevices, text:\nPush text\n) {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}\n\n\n\n\n.sendSms(query, subject, text, callback)\n\n\nSMS sending method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nSCQuery\n\n\n\n\nUsers collection query for sampling addressees\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\n\n\nSMS text\n\n\n\"SMS text\"\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?, Int?) -\n Void\n\n\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n   \n\n\nvar queryUsersWithPhone = SCQuery(collection: \nusers\n)\nvar broadcast = SCMessage()\n\nqueryUsersWithPhone.exists(\nphone\n)\nbroadcast.sendSms(queryUsersWithPhone, text:\nSMS text\n) {\n    success, error, result in\n    if success {\n        print(\nSuccess\n)\n    } else {\n        if let error = error {\n            print(\nError\n)\n        }\n    }\n}", 
            "title": "SCMessage"
        }, 
        {
            "location": "/SWIFT/SCMessage/#sendpushquery-subject-text-callback", 
            "text": "Push sending method     Parameter  Type  Properties  Description  Value example      query  SCQuery   Users/Devices collection query for sampling addressees     text  String   Push text  \"Push text\"    callback  (Bool, SCError?, Int?) -  Void   Callback for the request being executed.      Example", 
            "title": ".sendPush(query, subject, text, callback)"
        }, 
        {
            "location": "/SWIFT/SCMessage/#var-queryuserdevices-scquerycollection-devices-var-broadcast-scmessage-queryuserdevicesexistsuserrelation-broadcastsendpushqueryuserdevices-textpush-text-success-error-result-in-if-success-printsuccess-else-if-let-error-error-printerror", 
            "text": "", 
            "title": "var queryUserDevices = SCQuery(collection: &quot;devices&quot;)"
        }, 
        {
            "location": "/SWIFT/SCMessage/#sendsmsquery-subject-text-callback", 
            "text": "SMS sending method     Parameter  Type  Properties  Description  Value example      query  SCQuery   Users collection query for sampling addressees     text  String   SMS text  \"SMS text\"    callback  (Bool, SCError?, Int?) -  Void   Callback for the request being executed.      Example      var queryUsersWithPhone = SCQuery(collection:  users )\nvar broadcast = SCMessage()\n\nqueryUsersWithPhone.exists( phone )\nbroadcast.sendSms(queryUsersWithPhone, text: SMS text ) {\n    success, error, result in\n    if success {\n        print( Success )\n    } else {\n        if let error = error {\n            print( Error )\n        }\n    }\n}", 
            "title": ".sendSms(query, subject, text, callback)"
        }, 
        {
            "location": "/SWIFT/SCScript/", 
            "text": "A class that works with the server-side scripts of the application\n\n\n\n\nSCScript\n\n\n.run(scriptId, pool, callback)\n\n\n\n\n\n\n\n\n\n\n\n\n.run(scriptID, pool, callback)\n\n\nA method that calls a server-side script\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nscriptID\n\n\nString\n\n\nMandatory\n\n\nServer script ID\n\n\n\"57484fb91c5666544db25675\"\n\n\n\n\n\n\npool\n\n\n[String: AnyObject]\n\n\n\n\nData pool to be passed to the server-side script\n\n\n[\"data\": {\"array\": [0,1,2,3,\"\u0441\u0442\u0440\u043e\u043a\u0430\"], \"logic\": false}, \"weekday\": \"friday\"]\n\n\n\n\n\n\ncallback\n\n\n(Bool, SCError?) -\n Void\n\n\n\n\nCallback for the request being executed\n\n\n\n\n\n\n\n\n\n\nExample\n   \n\n\nSCScript.run(\n57484fb91c5666544db25675\n, [\ncollname\n: \nitems\n, \nkey\n: \nrelToQuests\n, \nval\n: [\nCF4Gk9WP6L\n, \nMwORD9llTM\n, \nJw4INX328A\n]]) {\n    success, error in\n}", 
            "title": "SCScript"
        }, 
        {
            "location": "/SWIFT/SCScript/#runscriptid-pool-callback", 
            "text": "A method that calls a server-side script     Parameter  Type  Properties  Description  Value example      scriptID  String  Mandatory  Server script ID  \"57484fb91c5666544db25675\"    pool  [String: AnyObject]   Data pool to be passed to the server-side script  [\"data\": {\"array\": [0,1,2,3,\"\u0441\u0442\u0440\u043e\u043a\u0430\"], \"logic\": false}, \"weekday\": \"friday\"]    callback  (Bool, SCError?) -  Void   Callback for the request being executed      Example      SCScript.run( 57484fb91c5666544db25675 , [ collname :  items ,  key :  relToQuests ,  val : [ CF4Gk9WP6L ,  MwORD9llTM ,  Jw4INX328A ]]) {\n    success, error in\n}", 
            "title": ".run(scriptID, pool, callback)"
        }, 
        {
            "location": "/SWIFT/WebSocket/", 
            "text": "WebSocket\n\n\nTo use WebSocket in your project, you can use the \ndaltoniam/Starscream\n library with the following url scheme when initializing WebSocket:\n\n\n    var socket = WebSocket(url: NSURL(string: \nwss://wss.scorocode.ru/{appID}/{wsKey}/{chanName}\n)!)\n    socket.connect()\n\nwhere\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nappID\n\n\nString\n\n\nMandatory\n\n\nThe appld key of your application\n\n\na3d04e75e157b2f7ae20c2fce02f63d6\n\n\n\n\n\n\nwsKey\n\n\nString\n\n\nMandatory\n\n\nThe websocketKey of your application\n\n\n563452bbc611d8106d5da767365897de\n\n\n\n\n\n\nchanName\n\n\nString\n\n\nMandatory\n\n\nArbitrary channel name\n\n\nchatroom\n\n\n\n\n\n\n\n\nExample\n\n\n    var socket = WebSocket(url: NSURL(string: \nwss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/563452bbc611d8106d5da767365897de/chatroom\n)!)\n    socket.connect()\n\n\n\nConnection of the Starscream library\n\n\nSee Readme.md of the \ndaltoniam/Starscream\n repository for details of the Starscream library connection.\n\n\nCarthage\n must be installed to connect the library to your project.\n\n\nCreate the \"Cartfile\" file in the Xcode project root or modify an existing \"Cartfile\" by writing the following string in it:\n\n\ngithub \ndaltoniam/Starscream\n\n\n\nClose the project in xcode, start in the console:\n\n\ncarthage update --platform iOS,Mac\n\n\n\nRe-open the project in Xcode. To Target -\n General -\n Linked Frameworks and Libraries from \n -\n Carthage -\n Build -\n iOS drag and drop 1 file:\n\n\nStarscream.framework\n\n\n\nTo Target -\n Build Phases, add New Run Script Phase:\n\n\n/usr/local/bin/carthage copy-frameworks\n\n\n\nand Input File:\n\n\n$(SRCROOT)/Carthage/Build/iOS/Starscream.framework\n\n\n\nExample of Starscream library usage\n\n\nSee Readme.md of the \ndaltoniam/Starscream\n repository for details of the Starscream library connection.\n\n\nimport UIKit\nimport Starscream\n\nclass ViewController: UIViewController {\n\n    var socket: WebSocket!\n\n    @IBOutlet private weak var textField: UITextField!\n    @IBOutlet private weak var textView: UITextView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n    }\n\n    @IBAction private func connectTapped() {\n\n        socket = WebSocket(url: NSURL(string: \nwss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/563452bbc611d8106d5da767365897de/chatroom\n)!)\n        socket.connect()\n\n        socket.onConnect = {\n            print(\nconnected\n)\n        }\n\n        socket.onText = {\n            text in\n            print(text)\n            self.textView.text = self.textView.text + \n\\n\\(text)\n\n        }\n\n        socket.onData = {\n            data in\n            print(data)\n        }\n\n    }\n\n    @IBAction private func disconnectTapped() {\n\n    }\n\n    @IBAction private func sendTapped() {\n        socket.writeString(textField.text!)\n    }\n\n\n}", 
            "title": "WebSocket"
        }, 
        {
            "location": "/SWIFT/WebSocket/#websocket", 
            "text": "To use WebSocket in your project, you can use the  daltoniam/Starscream  library with the following url scheme when initializing WebSocket:      var socket = WebSocket(url: NSURL(string:  wss://wss.scorocode.ru/{appID}/{wsKey}/{chanName} )!)\n    socket.connect() \nwhere     Parameter  Type  Properties  Description  Value example      appID  String  Mandatory  The appld key of your application  a3d04e75e157b2f7ae20c2fce02f63d6    wsKey  String  Mandatory  The websocketKey of your application  563452bbc611d8106d5da767365897de    chanName  String  Mandatory  Arbitrary channel name  chatroom     Example      var socket = WebSocket(url: NSURL(string:  wss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/563452bbc611d8106d5da767365897de/chatroom )!)\n    socket.connect()", 
            "title": "WebSocket"
        }, 
        {
            "location": "/SWIFT/WebSocket/#connection-of-the-starscream-library", 
            "text": "See Readme.md of the  daltoniam/Starscream  repository for details of the Starscream library connection.  Carthage  must be installed to connect the library to your project.  Create the \"Cartfile\" file in the Xcode project root or modify an existing \"Cartfile\" by writing the following string in it:  github  daltoniam/Starscream  Close the project in xcode, start in the console:  carthage update --platform iOS,Mac  Re-open the project in Xcode. To Target -  General -  Linked Frameworks and Libraries from   -  Carthage -  Build -  iOS drag and drop 1 file:  Starscream.framework  To Target -  Build Phases, add New Run Script Phase:  /usr/local/bin/carthage copy-frameworks  and Input File:  $(SRCROOT)/Carthage/Build/iOS/Starscream.framework", 
            "title": "Connection of the Starscream library"
        }, 
        {
            "location": "/SWIFT/WebSocket/#example-of-starscream-library-usage", 
            "text": "See Readme.md of the  daltoniam/Starscream  repository for details of the Starscream library connection.  import UIKit\nimport Starscream\n\nclass ViewController: UIViewController {\n\n    var socket: WebSocket!\n\n    @IBOutlet private weak var textField: UITextField!\n    @IBOutlet private weak var textView: UITextView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n    }\n\n    @IBAction private func connectTapped() {\n\n        socket = WebSocket(url: NSURL(string:  wss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/563452bbc611d8106d5da767365897de/chatroom )!)\n        socket.connect()\n\n        socket.onConnect = {\n            print( connected )\n        }\n\n        socket.onText = {\n            text in\n            print(text)\n            self.textView.text = self.textView.text +  \\n\\(text) \n        }\n\n        socket.onData = {\n            data in\n            print(data)\n        }\n\n    }\n\n    @IBAction private func disconnectTapped() {\n\n    }\n\n    @IBAction private func sendTapped() {\n        socket.writeString(textField.text!)\n    }\n\n\n}", 
            "title": "Example of Starscream library usage"
        }, 
        {
            "location": "/Java/Java/", 
            "text": "This Java SDK provides access to the Scorocode platform which allows you to create java-based applications, e.g. for Andorid. Details can be found on our website: https://scorocode.ru \n\n\nSDK Integration\n\n\nScorocode Java SDK distribution pack can be found in the repository \nhttps://github.com/Scorocode/scorocode-sdk-java\n\n\nYou can integrate this SDK with your project using Gradle. To do this, add the following dependencies:\n\n\ndependencies {\n   compile 'ru.prof-itgroup:scorocode_sdk:1.0.15-beta'\n}\n\n\n\nMake sure that Gradle is looking for libraries in the \njcenter\n repository, recommended by Goolge (it includes \nmaven\n libraries):\n\n\nrepositories {\n   jcenter()\n}", 
            "title": "Java SDK"
        }, 
        {
            "location": "/Java/Java/#sdk-integration", 
            "text": "Scorocode Java SDK distribution pack can be found in the repository  https://github.com/Scorocode/scorocode-sdk-java  You can integrate this SDK with your project using Gradle. To do this, add the following dependencies:  dependencies {\n   compile 'ru.prof-itgroup:scorocode_sdk:1.0.15-beta'\n}  Make sure that Gradle is looking for libraries in the  jcenter  repository, recommended by Goolge (it includes  maven  libraries):  repositories {\n   jcenter()\n}", 
            "title": "SDK Integration"
        }, 
        {
            "location": "/Java/ScorocodeSDK/", 
            "text": "ScorocodeSDK\n\n\n.initWith(applicationId, clientKey, masterKey, fileKey, messageKey, scriptKey, websocketKey)\n\n\n\n\n\n\n\n\n\n\n\n\nScorocodeSDK.initWith(applicationId, clientKey, masterKey, fileKey, messageKey, scriptKey, websocketKey)\n\n\nSDK initialisation. \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\napplicationId\n\n\nString\n\n\nMandatory\n\n\nApplication identifier\n\n\n\"db8a1b41b8543397a798a181d9891b4c\"\n\n\n\n\n\n\nclientKey\n\n\nString\n\n\nMandatory\n\n\nClient key for the Java platform\n\n\n\"563452bbc611d8106d5da767365897de\"\n\n\n\n\n\n\nmasterKey\n\n\nString\n\n\nOptional\n\n\nMasterKey\n\n\n\"28f06b89b62165c33de55265166d8781\"\n\n\n\n\n\n\nfileKey\n\n\nString\n\n\nOptional\n\n\nAuthentication key for access to files\n\n\n\"6305ee7ac8023191a333d9267f1a07e8\"\n\n\n\n\n\n\nmessageKey\n\n\nString\n\n\nOptional\n\n\nAuthentication key for sending messages\n\n\n\"9d774f6fa704f192e6aef53933f44e4f\"\n\n\n\n\n\n\nscriptKey\n\n\nString\n\n\nOptional\n\n\nServer-side scripts access key\n\n\n\"054bcf2ktyj9369dab1c32343f1776ae\"\n\n\n\n\n\n\nwebsocketKey\n\n\nString\n\n\nOptional\n\n\nWebSocket access key\n\n\n\"694bcf2ffd29369dab1c3d0e3f1776ae\"\n\n\n\n\n\n\n\n\n\n\nSDK initialisation\n\n\n\n\nSdk must be initialised before you use other SDK methods;\n\n\n\n\n\n\nExample\n  \n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, \n694bcf2ffd29369dab1c3d0e3f1776ae\n);", 
            "title": "ScorocodeSDK"
        }, 
        {
            "location": "/Java/ScorocodeSDK/#scorocodesdkinitwithapplicationid-clientkey-masterkey-filekey-messagekey-scriptkey-websocketkey", 
            "text": "SDK initialisation.      Parameter  Type  Properties  Description  Value example      applicationId  String  Mandatory  Application identifier  \"db8a1b41b8543397a798a181d9891b4c\"    clientKey  String  Mandatory  Client key for the Java platform  \"563452bbc611d8106d5da767365897de\"    masterKey  String  Optional  MasterKey  \"28f06b89b62165c33de55265166d8781\"    fileKey  String  Optional  Authentication key for access to files  \"6305ee7ac8023191a333d9267f1a07e8\"    messageKey  String  Optional  Authentication key for sending messages  \"9d774f6fa704f192e6aef53933f44e4f\"    scriptKey  String  Optional  Server-side scripts access key  \"054bcf2ktyj9369dab1c32343f1776ae\"    websocketKey  String  Optional  WebSocket access key  \"694bcf2ffd29369dab1c3d0e3f1776ae\"      SDK initialisation   Sdk must be initialised before you use other SDK methods;    Example     ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null,  694bcf2ffd29369dab1c3d0e3f1776ae );", 
            "title": "ScorocodeSDK.initWith(applicationId, clientKey, masterKey, fileKey, messageKey, scriptKey, websocketKey)"
        }, 
        {
            "location": "/Java/Document/", 
            "text": "Document\n\n\nnew Document(collection_name)\n\n\n.setField(field, value)\n\n\n.saveDocument(callback)\n  \n\n\n.getDocumentById(documentId, callback)\n\n\n.getField(field)\n\n\n.updateDocument()\n\n\n.uploadFile(fieldName, fileName, contentToUploadInBase64, callback)\n\n\n.getFileLink(fieldName, fileName)\n\n\n.removeFile( fieldName,  fileName,  callback)\n\n\n.removeDocument(callback)\n  \n\n\n\n\n\n\n\n\n\n\n\n\nnew Document(collection_name)\n\n\nDocument initialisation\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncollection_name\n\n\nString\n\n\nMandatory\n\n\nName of the collection where the document is added\n\n\n\"Things\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null);\n\nDocument exampleItem = new Document(\nItems\n);\n\n\n\n\n\n\n\n.setField(field, value)\n\n\nMethod for setting data to document's field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"testcoll\"\n\n\n\n\n\n\nvalue\n\n\nObject\n\n\nMandatory\n\n\nField value\n\n\n\"huNr3L7QDh\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null);\n\nfinal Document order = new Document(\u201corders\u201d);\norder.setField(\u201corderId\u201d, \u201cKu128A439ads\u201d);\n\n\n\n\n\n\n\n.saveDocument(callback)\n\n\nThe method saves the document in the database or updates an object that already exists there\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackDocumentSaved\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nCreating new document \n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null);\n\n\nDocument newDocument = new Document(\u201corderInfo\u201d);\nnewDocument.setField(\nisOrderSend\n, false);\nnewDocument.setField(\nbuyerName\n, \u201cAny username\u201d);\n\n\nnewDocument.saveDocument(new CallbackDocumentSaved() {\n            @Override\n            public void onDocumentSaved() {\n                //document saved successful (New document uploaded on server).\n            }\n\n\n            @Override\n            public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                //document save failed.\n            }\n        });\n\n\n\nUpdating the existing document\n\n\n final Document document = new Document(\u201corderInfo\u201d);\n document.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n            //we found document and we can make changes in it and save it\n            //...change document fields...\n            //save  \n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document save succeed. Document updated on server\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document save failed.\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n            //document not found. If we try to save document here\n            //new document will be upload to server as in example 2.1\n            }\n        });\n\n\n\n\n\n\n\n.getDocumentById(documentId, callback)\n\n\nMethod for retrieving a collection object from DB by its _id.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ndocumentId\n\n\nString\n\n\nMandatory\n\n\nObject identifier\n\n\n\"nV0p50CDKq\"\n\n\n\n\n\n\ncallback\n\n\nCallbackGetDocumentById\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null);\n\nfinal Document document = new Document(\nordersCollection\n);\ndocument.getDocumentById(\nnV0p50CDKq\n, new CallbackGetDocumentById() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found or error occured\n            }\n        });\n\n\n\n\n\n\n\n.getField(field)\n\n\nMethod for retrieving data from a specified document field.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"name\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\nString orderId = document.getField(\u201corderId\u201d);\n\n\n\n\n\n\n\n.updateDocument()\n\n\nMethod for updating the document using Update class.\n\n\n\n\n\n\n.uploadFile(fieldName, fileName, contentToUploadInBase64, callback)\n\n\nFile upload method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfieldName\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"attachment\"\n\n\n\n\n\n\nfileName\n\n\nString\n\n\nMandatory\n\n\nFilename with extension\n\n\n\"file.txt\"\n\n\n\n\n\n\ncontentToUploadInBase64\n\n\nString\n\n\nMandatory\n\n\nFile content in base64 encoded format\n\n\n\"VEhJUyBJUyBGSUxFLUUtRS1FLUUtRS1FIQ==\"\n\n\n\n\n\n\ncallback\n\n\nCallbackUploadFile\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nnV0p50CDKq\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n            //document found and we can upload document in this file\n\n                document.uploadFile(\nfile_field\n, \nany_filename.txt\n, \n            Base64.encodeToString(\nhello world\n.getBytes(), Base64.DEFAULT), new CallbackUploadFile() {\n\n              @Override\n                    public void onDocumentUploaded() {\n                        //document upload succeed\n                    }\n\n\n                    @Override\n                    public void onDocumentUploadFailed(String errorCode, String errorMessage) {\n                        //document upload failed\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n\n.getFileLink(fieldName, fileName)\n\n\nMethod for retreiving file link\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfieldName\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"attachment\"\n\n\n\n\n\n\nfileName\n\n\nString\n\n\nMandatory\n\n\nFilename with extension\n\n\n\"file.txt\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nfinal Document documentWithFile = new Document(\u201cordersCollection\u201d);\ndocumentWithFile.getDocumentById(\nnV0p50CDKq\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                    //document found. We can try to get link on file in this document\n            String fileLink = documentWithFile.getFileLink(\ntest\n, \nfile.txt\n);\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n\n.removeFile(fieldName, fileName, callback)\n\n\nMethod for removing the file\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfieldName\n\n\nString\n\n\nMandatory\n\n\nCollection field name\n\n\n\"attachment\"\n\n\n\n\n\n\nfileName\n\n\nString\n\n\nMandatory\n\n\nFilename with extension\n\n\n\"file.txt\"\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteFile\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nnV0p50CDKq\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n            //document found we can try to delete file from this doc\n\n\n                document.removeFile(\nfile\n, \nanyname\n, new CallbackDeleteFile() {\n                    @Override\n                    public void onDocumentDeleted() {\n                        //file deletion succeed\n                    }\n\n\n                    @Override\n                    public void onDetelionFailed(String errorCodes, String errorMessage) {\n                        //file deletion failed\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n\n.removeDocument(callback)\n\n\nMethod for removing the selected document\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackRemoveDocument\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\n7BOlVr1Acp\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //we found document in collection and can remove it\n                document.removeDocument(new CallbackRemoveDocument() {\n                    @Override\n                    public void onRemoveSucceed(ResponseRemove responseRemove) {\n                        //document removed\n                    }\n\n\n                    @Override\n                    public void onRemoveFailed(String errorCode, String errorMessage) {\n                        //remove operation failed\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document wasn\u2019t found\n            }\n        });", 
            "title": "Document"
        }, 
        {
            "location": "/Java/Document/#new-documentcollection_name", 
            "text": "Document initialisation     Parameter  Type  Properties  Description  Value example      collection_name  String  Mandatory  Name of the collection where the document is added  \"Things\"     Example    ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null);\n\nDocument exampleItem = new Document( Items );", 
            "title": "new Document(collection_name)"
        }, 
        {
            "location": "/Java/Document/#setfieldfield-value", 
            "text": "Method for setting data to document's field     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"testcoll\"    value  Object  Mandatory  Field value  \"huNr3L7QDh\"     Example    ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null);\n\nfinal Document order = new Document(\u201corders\u201d);\norder.setField(\u201corderId\u201d, \u201cKu128A439ads\u201d);", 
            "title": ".setField(field, value)"
        }, 
        {
            "location": "/Java/Document/#savedocumentcallback", 
            "text": "The method saves the document in the database or updates an object that already exists there     Parameter  Type  Properties  Description  Value example      callback  CallbackDocumentSaved  Mandatory  Callback for the request being executed.      Example    Creating new document   ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null);\n\n\nDocument newDocument = new Document(\u201corderInfo\u201d);\nnewDocument.setField( isOrderSend , false);\nnewDocument.setField( buyerName , \u201cAny username\u201d);\n\n\nnewDocument.saveDocument(new CallbackDocumentSaved() {\n            @Override\n            public void onDocumentSaved() {\n                //document saved successful (New document uploaded on server).\n            }\n\n\n            @Override\n            public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                //document save failed.\n            }\n        });  Updating the existing document   final Document document = new Document(\u201corderInfo\u201d);\n document.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n            //we found document and we can make changes in it and save it\n            //...change document fields...\n            //save  \n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document save succeed. Document updated on server\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document save failed.\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n            //document not found. If we try to save document here\n            //new document will be upload to server as in example 2.1\n            }\n        });", 
            "title": ".saveDocument(callback)"
        }, 
        {
            "location": "/Java/Document/#getdocumentbyiddocumentid-callback", 
            "text": "Method for retrieving a collection object from DB by its _id.     Parameter  Type  Properties  Description  Value example      documentId  String  Mandatory  Object identifier  \"nV0p50CDKq\"    callback  CallbackGetDocumentById  Mandatory  Callback for the request being executed.      Example    ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null);\n\nfinal Document document = new Document( ordersCollection );\ndocument.getDocumentById( nV0p50CDKq , new CallbackGetDocumentById() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found or error occured\n            }\n        });", 
            "title": ".getDocumentById(documentId, callback)"
        }, 
        {
            "location": "/Java/Document/#getfieldfield", 
            "text": "Method for retrieving data from a specified document field.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"name\"     Example    final Document document = new Document(\u201cordersCollection\u201d);\nString orderId = document.getField(\u201corderId\u201d);", 
            "title": ".getField(field)"
        }, 
        {
            "location": "/Java/Document/#updatedocument", 
            "text": "Method for updating the document using Update class.", 
            "title": ".updateDocument()"
        }, 
        {
            "location": "/Java/Document/#uploadfilefieldname-filename-contenttouploadinbase64-callback", 
            "text": "File upload method     Parameter  Type  Properties  Description  Value example      fieldName  String  Mandatory  Field name  \"attachment\"    fileName  String  Mandatory  Filename with extension  \"file.txt\"    contentToUploadInBase64  String  Mandatory  File content in base64 encoded format  \"VEhJUyBJUyBGSUxFLUUtRS1FLUUtRS1FIQ==\"    callback  CallbackUploadFile  Mandatory  Callback for the request being executed.      Example    final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( nV0p50CDKq , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n            //document found and we can upload document in this file\n\n                document.uploadFile( file_field ,  any_filename.txt , \n            Base64.encodeToString( hello world .getBytes(), Base64.DEFAULT), new CallbackUploadFile() {\n\n              @Override\n                    public void onDocumentUploaded() {\n                        //document upload succeed\n                    }\n\n\n                    @Override\n                    public void onDocumentUploadFailed(String errorCode, String errorMessage) {\n                        //document upload failed\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".uploadFile(fieldName, fileName, contentToUploadInBase64, callback)"
        }, 
        {
            "location": "/Java/Document/#getfilelinkfieldname-filename", 
            "text": "Method for retreiving file link     Parameter  Type  Properties  Description  Value example      fieldName  String  Mandatory  Field name  \"attachment\"    fileName  String  Mandatory  Filename with extension  \"file.txt\"     Example    final Document documentWithFile = new Document(\u201cordersCollection\u201d);\ndocumentWithFile.getDocumentById( nV0p50CDKq , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                    //document found. We can try to get link on file in this document\n            String fileLink = documentWithFile.getFileLink( test ,  file.txt );\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".getFileLink(fieldName, fileName)"
        }, 
        {
            "location": "/Java/Document/#removefilefieldname-filename-callback", 
            "text": "Method for removing the file     Parameter  Type  Properties  Description  Value example      fieldName  String  Mandatory  Collection field name  \"attachment\"    fileName  String  Mandatory  Filename with extension  \"file.txt\"    callback  CallbackDeleteFile  Mandatory  Callback for the request being executed.      Example    final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( nV0p50CDKq , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n            //document found we can try to delete file from this doc\n\n\n                document.removeFile( file ,  anyname , new CallbackDeleteFile() {\n                    @Override\n                    public void onDocumentDeleted() {\n                        //file deletion succeed\n                    }\n\n\n                    @Override\n                    public void onDetelionFailed(String errorCodes, String errorMessage) {\n                        //file deletion failed\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".removeFile(fieldName, fileName, callback)"
        }, 
        {
            "location": "/Java/Document/#removedocumentcallback", 
            "text": "Method for removing the selected document     Parameter  Type  Properties  Description  Value example      callback  CallbackRemoveDocument  Mandatory  Callback for the request being executed.      Example    final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( 7BOlVr1Acp , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //we found document in collection and can remove it\n                document.removeDocument(new CallbackRemoveDocument() {\n                    @Override\n                    public void onRemoveSucceed(ResponseRemove responseRemove) {\n                        //document removed\n                    }\n\n\n                    @Override\n                    public void onRemoveFailed(String errorCode, String errorMessage) {\n                        //remove operation failed\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document wasn\u2019t found\n            }\n        });", 
            "title": ".removeDocument(callback)"
        }, 
        {
            "location": "/Java/Update/", 
            "text": "Class for multiple object update operations\n\n\n\n\nUpdate\n\n\nnew Update()\n\n\n.set(field,value)\n\n\n.push(field, value)\n\n\n.popFirst(field)\n\n\n.popLast(field)\n\n\n.pull(field, value)\n\n\n.pullAll(field, value)\n\n\n.addToSet(field, value)\n\n\n.inc(field,  increaseValue)\n\n\n.setCurrentDate(field)\n\n\n.mul(field, value)\n\n\n.min(field, valueToCompare)\n\n\n.max(field, valueToCompare)\n\n\n.getUpdateInfo()\n\n\n\n\n\n\n\n\n\n\n\n\nnew Update()\n\n\nUpdate() constructor\n\n\nUpdate  = new Update();\n\n\n\nYou can work with the methods of Update class using Document's .updateDocument method\n\n\nDocument document = new Document(\nordersCollection\n);\n//document.getDocumentById(...);\n//document.updateDocument();\n\n\n\n\n\n\n\n.set(field,value)\n\n\nMethod for setting data to document's field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name to update\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nObject\n\n\nMandatory\n\n\nNew field value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument()\n                        .set(\nexampleField\n, \nrandom Any1\n)\n                        .set(\nanotherExampleField\n, \nrandom Any2\n);\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successfull\n                    }\n\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.push(field, value)\n\n\nMethod for adding an element to an array field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nObject\n\n\nMandatory\n\n\nValue of the new array element\n\n\n-42.42\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().push(\narray1\n, 1);\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.popFirst(field)\n\n\nMethod for removing the first array element of the field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"orderNumber\"\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().popFirst(\narray1\n);\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.popLast(field)\n\n\nMethod for removing the last array element of the field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"orderNumber\"\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().popLast(\narray1\n);\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.pull(field, value)\n\n\nMethod for removing all array elements whose values are the same as the specified one.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nObject\n\n\nMandatory\n\n\nValue of the element to be removed\n\n\n\"delete me\"\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf there are many elements with specified value, this method will remove all of them.\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().pull(\narray2\n, 3);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.pullAll(field, value)\n\n\nMethod for removing all array elements whose values are the same as one of the specified values.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\n\u0418Name of the field whose value should be updated\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nList\nObject\n\n\nMandatory\n\n\nArray of values to be removed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                //create array of elements to delete from array\n            List\nObject\n objects = new ArrayList\n();\n                objects.add(1);\n                objects.add(2);\n            objects.add(3);\n\n                document.updateDocument().pullAll(\narray2\n, objects);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.addToSet(field, value)\n\n\nMethod for adding an element to an array only if there are no elements with the same name in the array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nList\nObject\n\n\nMandatory\n\n\nValue of the new array element\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().addToSet(\narray4\n, 7);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.inc(field,  increaseValue)\n\n\nThe method increments the numeric of date field value by a defined number of date\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"counter\"\n\n\n\n\n\n\nvalue\n\n\nInteger / Double / Date\n\n\nMandatory\n\n\nIncrement step\n\n\n-2.2\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().inc(\nnumberField\n, 2);\n            document.updateDocument().inc(\nanotherNumberField\n, -10);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.setCurrentDate(field)\n\n\nSets the current time as the field's value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"registerDate\"\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().setCurrentDate(\ndate1\n);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.mul(field, value)\n\n\nThe method multiplies the numeric field value by a defined number\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"counter\"\n\n\n\n\n\n\nvalue\n\n\nInteger / Double\n\n\nMandatory\n\n\nMultiplier\n\n\n-2.2\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().mul(\nnumberForMulTest\n, 3);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.min(field, valueToCompare)\n\n\nThe method updates the numeric field value only if the new value is less than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\nvalueToCompare\n\n\nInteger / Double\n\n\nMandatory\n\n\nNew value to be compared\n\n\n43\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().min(\nnumber2\n, 10);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successfull\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.max(field, valueToCompare)\n\n\nThe method updates the numeric field value only if the new value is greater than the current field value\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field whose value should be updated\n\n\n\"price\"\n\n\n\n\n\n\nvalueToCompare\n\n\nInteger / Double\n\n\nMandatory\n\n\nNew value to be compared\n\n\n43\n\n\n\n\n\n\n\n\nExample\n\n\nfinal Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById(\nKH3JCojAyT\n, new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().max(\nnumber2\n, 10);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successfull\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });\n\n\n\n\n\n\n.getUpdateInfo()\n\n\nMethod for retrieving Update conditions info", 
            "title": "Update"
        }, 
        {
            "location": "/Java/Update/#new-update", 
            "text": "Update() constructor  Update  = new Update();  You can work with the methods of Update class using Document's .updateDocument method  Document document = new Document( ordersCollection );\n//document.getDocumentById(...);\n//document.updateDocument();", 
            "title": "new Update()"
        }, 
        {
            "location": "/Java/Update/#setfieldvalue", 
            "text": "Method for setting data to document's field     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name to update  \"orderNumber\"    value  Object  Mandatory  New field value  22     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument()\n                        .set( exampleField ,  random Any1 )\n                        .set( anotherExampleField ,  random Any2 );\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successfull\n                    }\n\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".set(field,value)"
        }, 
        {
            "location": "/Java/Update/#pushfield-value", 
            "text": "Method for adding an element to an array field     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"orderNumber\"    value  Object  Mandatory  Value of the new array element  -42.42     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().push( array1 , 1);\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".push(field, value)"
        }, 
        {
            "location": "/Java/Update/#popfirstfield", 
            "text": "Method for removing the first array element of the field     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"orderNumber\"     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().popFirst( array1 );\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".popFirst(field)"
        }, 
        {
            "location": "/Java/Update/#poplastfield", 
            "text": "Method for removing the last array element of the field     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"orderNumber\"     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().popLast( array1 );\n\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".popLast(field)"
        }, 
        {
            "location": "/Java/Update/#pullfield-value", 
            "text": "Method for removing all array elements whose values are the same as the specified one.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"orderNumber\"    value  Object  Mandatory  Value of the element to be removed  \"delete me\"      Note  If there are many elements with specified value, this method will remove all of them.   Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().pull( array2 , 3);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".pull(field, value)"
        }, 
        {
            "location": "/Java/Update/#pullallfield-value", 
            "text": "Method for removing all array elements whose values are the same as one of the specified values.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  \u0418Name of the field whose value should be updated  \"orderNumber\"    value  List Object  Mandatory  Array of values to be removed  See the example below     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                //create array of elements to delete from array\n            List Object  objects = new ArrayList ();\n                objects.add(1);\n                objects.add(2);\n            objects.add(3);\n\n                document.updateDocument().pullAll( array2 , objects);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".pullAll(field, value)"
        }, 
        {
            "location": "/Java/Update/#addtosetfield-value", 
            "text": "Method for adding an element to an array only if there are no elements with the same name in the array.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"orderNumber\"    value  List Object  Mandatory  Value of the new array element  See the example below     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().addToSet( array4 , 7);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".addToSet(field, value)"
        }, 
        {
            "location": "/Java/Update/#incfield-increasevalue", 
            "text": "The method increments the numeric of date field value by a defined number of date     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"counter\"    value  Integer / Double / Date  Mandatory  Increment step  -2.2     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().inc( numberField , 2);\n            document.updateDocument().inc( anotherNumberField , -10);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".inc(field,  increaseValue)"
        }, 
        {
            "location": "/Java/Update/#setcurrentdatefield", 
            "text": "Sets the current time as the field's value     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"registerDate\"     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().setCurrentDate( date1 );\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".setCurrentDate(field)"
        }, 
        {
            "location": "/Java/Update/#mulfield-value", 
            "text": "The method multiplies the numeric field value by a defined number     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"counter\"    value  Integer / Double  Mandatory  Multiplier  -2.2     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().mul( numberForMulTest , 3);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successful\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".mul(field, value)"
        }, 
        {
            "location": "/Java/Update/#minfield-valuetocompare", 
            "text": "The method updates the numeric field value only if the new value is less than the current field value     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"price\"    valueToCompare  Integer / Double  Mandatory  New value to be compared  43     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().min( number2 , 10);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successfull\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".min(field, valueToCompare)"
        }, 
        {
            "location": "/Java/Update/#maxfield-valuetocompare", 
            "text": "The method updates the numeric field value only if the new value is greater than the current field value     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field whose value should be updated  \"price\"    valueToCompare  Integer / Double  Mandatory  New value to be compared  43     Example  final Document document = new Document(\u201cordersCollection\u201d);\ndocument.getDocumentById( KH3JCojAyT , new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                //document found, we can update it\n\n                document.updateDocument().max( number2 , 10);\n\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        //document updated successfull\n                    }\n\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        //document update failed\n                //check update info\n                //see errorCode and errorMessage\n                    }\n                });\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //document not found\n            }\n        });", 
            "title": ".max(field, valueToCompare)"
        }, 
        {
            "location": "/Java/Update/#getupdateinfo", 
            "text": "Method for retrieving Update conditions info", 
            "title": ".getUpdateInfo()"
        }, 
        {
            "location": "/Java/User/", 
            "text": "User\n\n\nnew User(name)\n\n\n.register(username, email,  password,  documentContent,  callback)\n \n\n\n.register(username, email, password, callback)\n\n\n.login(email, password, callback)\n\n\n.logout(callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew User()\n\n\nUser initialization\n\n\nExample\n \n\nUser appUser = new User();\n\n\n\n\n\n\n.register(callback, username, email, password)\n\n\nMethod for application user registration, using associated Document\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nString\n\n\nMandatory\n\n\nUsername\n\n\n\"Jovan\"\n\n\n\n\n\n\nemail\n\n\nString\n\n\nMandatory\n\n\nUser email\n\n\n\"user@domain.zone\"\n\n\n\n\n\n\npassword\n\n\nString\n\n\nMandatory\n\n\nUser password\n\n\n\"CorrectHorseBatteryStaple\"\n\n\n\n\n\n\ndocumentContent\n\n\nDocumentInfo\n\n\nOptional\n\n\nDocument, associated with user\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackRegisterUser\n\n\nMandatory\u0439\n\n\nCallback for the request being executed.\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nDocument doc = new Document(\nusers\n);\ndoc.setField(\ncity\n, \nMoscow\n);\ndoc.setField(\nisPlaceAnyOrder\n, true);\nUser user = new User();\nuser.register(\nany_username\n, \nanyemail@mailinator.com\n, \ntest1111\n, doc.getDocumentContent(), \n\n    new CallbackRegisterUser() {\n            @Override\n            public void onRegisterSucceed() {\n                //user register succeed\n            }\n\n            @Override\n            public void onRegisterFailed(String errorCode, String errorMessage) {\n                //user regiser failed\n                //See errorCode and errorMessage\n            }\n        });\n\n\n\n\n\n\n\n\n.register(username, email, password, callback)\n\n\nMethod for application user registration\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nString\n\n\nMandatory\n\n\nUsername\n\n\n\"Jovan\"\n\n\n\n\n\n\nemail\n\n\nString\n\n\nMandatory\n\n\nUser email\n\n\n\"user@domain.zone\"\n\n\n\n\n\n\npassword\n\n\nString\n\n\nMandatory\n\n\nUser password\n\n\n\"CorrectHorseBatteryStaple\"\n\n\n\n\n\n\ncallback\n\n\nCallbackRegisterUser\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nUser user = new User();\nuser.register(\nany_username\n, \nanyemail@gmail.com\n, \ntest1111\n, doc.getDocumentContent(), \n    new CallbackRegisterUser() {\n            @Override\n            public void onRegisterSucceed() {\n                //user register succeed\n            }\n\n            @Override\n            public void onRegisterFailed(String errorCode, String errorMessage) {\n                //user regiser failed\n        //See errorCode and errorMessage\n            }\n        });\n\n\n\n\n\n\n\n.login(email, password, callback)\n\n\nMethod for application user authentication\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nString\n\n\nMandatory\n\n\nUser email\n\n\n\"user@domain.zone\"\n\n\n\n\n\n\npassword\n\n\nString\n\n\nMandatory\n\n\nUser password\n\n\n\"CorrectHorseBatteryStaple\"\n\n\n\n\n\n\ncallback\n\n\nCallbackLoginUser\n\n\n\n\nCallback for the request being executed.\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nUser user = new User();\nuser.login(\u201canymail@mail.com\u201d, \u201cany pass\u201d, new CallbackLoginUser() {\n            @Override\n            public void onLoginSucceed(ResponseLogin responseLogin) {\n                 //login succed. See returned responseLogin instance:\n                 //which contain session id and user info   \n            }\n\n            @Override\n            public void onLoginFailed(String errorCode, String errorMessage) {\n                 //Login failed. \n          //See errorCode and errorMessage\n            }\n        });\n\n\n\n\n\n.logout(callback)\n\n\nMethod for application user deauthentication. \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackLogoutUser\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nUser user = new User();\nuser.logout(new CallbackLogoutUser() {\n            @Override\n            public void onLogoutSucceed() {\n                //user logout succeed\n            }\n\n            @Override\n            public void onLogoutFailed(String errorCode, String errorMessage) {\n                //user logout failed\n                //See errorCode and errorMessage\n            }\n        });", 
            "title": "User"
        }, 
        {
            "location": "/Java/User/#new-user", 
            "text": "User initialization  Example   User appUser = new User();", 
            "title": "new User()"
        }, 
        {
            "location": "/Java/User/#registercallback-username-email-password", 
            "text": "Method for application user registration, using associated Document     Parameter  Type  Properties  Description  Value example      username  String  Mandatory  Username  \"Jovan\"    email  String  Mandatory  User email  \"user@domain.zone\"    password  String  Mandatory  User password  \"CorrectHorseBatteryStaple\"    documentContent  DocumentInfo  Optional  Document, associated with user  See the example below    callback  CallbackRegisterUser  Mandatory\u0439  Callback for the request being executed.  See the example below     Example    Document doc = new Document( users );\ndoc.setField( city ,  Moscow );\ndoc.setField( isPlaceAnyOrder , true);\nUser user = new User();\nuser.register( any_username ,  anyemail@mailinator.com ,  test1111 , doc.getDocumentContent(), \n\n    new CallbackRegisterUser() {\n            @Override\n            public void onRegisterSucceed() {\n                //user register succeed\n            }\n\n            @Override\n            public void onRegisterFailed(String errorCode, String errorMessage) {\n                //user regiser failed\n                //See errorCode and errorMessage\n            }\n        });", 
            "title": ".register(callback, username, email, password)"
        }, 
        {
            "location": "/Java/User/#registerusername-email-password-callback", 
            "text": "Method for application user registration     Parameter  Type  Properties  Description  Value example      username  String  Mandatory  Username  \"Jovan\"    email  String  Mandatory  User email  \"user@domain.zone\"    password  String  Mandatory  User password  \"CorrectHorseBatteryStaple\"    callback  CallbackRegisterUser  Mandatory  Callback for the request being executed.  See the example below     Example    User user = new User();\nuser.register( any_username ,  anyemail@gmail.com ,  test1111 , doc.getDocumentContent(), \n    new CallbackRegisterUser() {\n            @Override\n            public void onRegisterSucceed() {\n                //user register succeed\n            }\n\n            @Override\n            public void onRegisterFailed(String errorCode, String errorMessage) {\n                //user regiser failed\n        //See errorCode and errorMessage\n            }\n        });", 
            "title": ".register(username, email, password, callback)"
        }, 
        {
            "location": "/Java/User/#loginemail-password-callback", 
            "text": "Method for application user authentication     Parameter  Type  Properties  Description  Value example      email  String  Mandatory  User email  \"user@domain.zone\"    password  String  Mandatory  User password  \"CorrectHorseBatteryStaple\"    callback  CallbackLoginUser   Callback for the request being executed.  See the example below     Example", 
            "title": ".login(email, password, callback)"
        }, 
        {
            "location": "/Java/User/#user-user-new-user-userloginanymailmailcom-any-pass-new-callbackloginuser-override-public-void-onloginsucceedresponselogin-responselogin-login-succed-see-returned-responselogin-instance-which-contain-session-id-and-user-info-override-public-void-onloginfailedstring-errorcode-string-errormessage-login-failed-see-errorcode-and-errormessage", 
            "text": "", 
            "title": "User user = new User();"
        }, 
        {
            "location": "/Java/User/#logoutcallback", 
            "text": "Method for application user deauthentication.      Parameter  Type  Properties  Description  Value example      callback  CallbackLogoutUser  Mandatory  Callback for the request being executed.  See the example below     Example    User user = new User();\nuser.logout(new CallbackLogoutUser() {\n            @Override\n            public void onLogoutSucceed() {\n                //user logout succeed\n            }\n\n            @Override\n            public void onLogoutFailed(String errorCode, String errorMessage) {\n                //user logout failed\n                //See errorCode and errorMessage\n            }\n        });", 
            "title": ".logout(callback)"
        }, 
        {
            "location": "/Java/Query/", 
            "text": "Query\n\n\n\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0431\u043e\u0440\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.\n\n\n\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n\n\n\n\nQuery\n\n\nnew Query(name)\n\n\n.findDocuments(callback)\n\n\n.countDocuments(callback)\n\n\n.updateDocument(update, callback)\n\n\n.removeDocument(callback)\n\n\n.setLimit(limit)\n\n\n.setSkip(skip)\n\n\n.setPage(page)\n\n\n.equalTo(field, value)\n\n\n.notEqualTo(field, value)\n\n\n.containedIn(field, values)\n\n\n.containsAll(field, values)\n\n\n.notContainedIn(field, values)\n\n\n.greaterThan(field, value)\n\n\n.greaterThenOrEqualTo(field, value)\n\n\n.lessThan(field,  value)\n\n\n.lessThanOrEqualTo(field, value)\n\n\n.exists(field)\n\n\n.doesNotExist(field)\n\n\n.contains(field, regEx, options)\n\n\n.startsWith(field, regEx, options)\n\n\n.endsWith(field, regEx, options)\n\n\n.and(field, query)\n\n\n.or(field, query)\n\n\n.raw(json)\n\n\n.reset()\n\n\n.ascending(field)\n\n\n.descending(field)\n\n\n.setFieldsForSearch(fields)\n\n\n.getQueryInfo()\n\n\n\n\n\n\n\n\n\n\n\n\nnew Query()\n\n\nInitialisation of a collection data query\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncollection_name\n\n\nString\n\n\n\n\nCollection name\n\n\n\"things\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\nname\n);\n\n\n\n\n.findDocuments(callback)\n\n\nMethod for requesting a document from a collection. Returns data of the objects that match the sampling criteria. \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackFindDocument\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf no criteria are set, the first 50 objects of the collection are returned by default.\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d)\n                .equalTo(\nnumber3\n, 10)\n                .exists(\nnumber2\n);\n\nquery.findDocuments(new CallbackFindDocument() {\n            @Override\n            public void onDocumentFound(List\nDocumentInfo\n documentInfos) {\n                //found. See document list what match query\n            }\n\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                //no documents what match query\n            }\n        });\n\n\n\n\n.countDocuments(callback)\n\n\nMethod for counting objects that meet the query conditions.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackCountDocument\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\n        query.greaterThan(\nrating\n, 10);\n\n        query.countDocuments(new CallbackCountDocument() {\n            @Override\n            public void onDocumentsCounted(ResponseCount responseCount) {\n                //see responseCount.getResult() to find how many documents was found.\n            }\n\n            @Override\n            public void onCountFailed(String errorCode, String errorMessage) {\n                //error during count\n            }\n        });\n\n\n\n\n.updateDocument(update, callback)\n\n\nMethod for updating the requested objects.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nupdate\n\n\nUpdate\n\n\nMandatory\n\n\nUpdate object\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackUpdateDocument\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis method can update a maximum of 1000 documents in a request.\n\n\n\n\nExample\n \n\n\n Query query = new Query(\u201cmycollection\u201d);\n        query.equalTo(\nnumber3\n, 10);\n\n        Update update = new Update()\n                .set(\nnumber2\n, 199)\n                .set(\nnumberField\n, 111)\n                .addToSet(\narray1\n, 900);\n\n        query.updateDocument(update, new CallbackUpdateDocument() {\n            @Override\n            public void onUpdateSucceed(ResponseUpdate responseUpdate) {\n                //documents updated successful\n            }\n\n            @Override\n            public void onUpdateFailed(String errorCode, String errorMessage) {\n                //error during update\n            }\n        });\n\n\n\n\n.removeDocument(callback)\n\n\nMethod for removing the requested documents.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackRemoveDocument\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis method can remove a maximum of 1000 documents in a request.\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\n        query.equalTo(\n_id\n, \naJfkipJags\n);\n\n        query.removeDocument(new CallbackRemoveDocument() {\n            @Override\n            public void onRemoveSucceed(ResponseRemove responseRemove) {\n                //succeed. See responseRemove to findout how many documents was removed\n            //and get list of removed documents\n            }\n\n            @Override\n            public void onRemoveFailed(String errorCode, String errorMessage) {\n                //error during remove operation\n            }\n        });\n\n\n\n\n\n.setLimit(limit)\n\n\nMethod for specifying a limit for the number of sampling, updating or removing documents.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nInteger\n\n\nMandatory\n\n\nLimit\n\n\n15\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nLimit defaults to 50, but anything from 1 to 100 is a valid limit.\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.setLimit(15);\n//query.findDocuments(\u2026);\n\n\n\n\n.setSkip(skip)\n\n\nMethod for skipping some objects before sampling.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nskip\n\n\nInteger\n\n\nMandatory\n\n\nNumber of skipped objects\n\n\n100\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.setSkip(12);\n//query.findDocuments(\u2026);\n\n\n\n\n.setPage(page)\n\n\nMethod for sampling results page by page\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\npage\n\n\nInteger\n\n\nMandatory\n\n\nPage number\n\n\n2\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\n//query.setLimit(15);\nquery.setPage(1);\n//query.findDocuments(\u2026);\n\n\n\n\n.equalTo(field, value)\n\n\nMethod for retrieving all objects with the field value indicated in the condition.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nObject\n\n\nMandatory\n\n\nField value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201corderNumber\u201d, 22);\n//query.findDocuments(\u2026);\n\n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdasds12dskm\u201d);\n//query.findDocuments(\u2026);\n\n\n\n\n\n\n\n.notEqualTo(field, value)\n\n\nMethod for retrieving all objects except for objects with the field value indicated in the condition.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"orderNumber\"\n\n\n\n\n\n\nvalue\n\n\nObject\n\n\nMandatory\n\n\nField value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.notEqualTo(\u201corderNumber\u201d, 22);\n//query.findDocuments(\u2026);\n\n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdasds12dskm\u201d);\n//query.findDocuments(\u2026);\n\n\n\n\n\n\n\n.containedIn(field, values)\n\n\nMethod for retrieving all objects whose field value contains the array elements specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"orderNumbers\"\n\n\n\n\n\n\nvalue\n\n\nList\n\u0442\u0438\u043f \u043f\u043e\u043b\u044f\n\n\nMandatory\n\n\nArray of values\n\n\nsee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nList\nObject\n numbers = new ArrayList\n();\n        numbers.add(1);\n        numbers.add(5);\n        numbers.add(10);\n        numbers.add(15);\n\nQuery query = new Query(\u201cmycollection\u201d).containedIn(\nnumber3\n, numbers);\n//query.findDocuments(\u2026);\n\n\n\n\n.containsAll(field, values)\n\n\nMethod for retrieving all objects whose field value contains all array elements specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"orderNumbers\"\n\n\n\n\n\n\nvalue\n\n\nList\n\u0442\u0438\u043f \u043f\u043e\u043b\u044f\n\n\nMandatory\n\n\nArray of values\n\n\nsee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nList\nObject\n containsAllNumbers = new ArrayList\n();\n        containsAllNumbers.add(1);\n        containsAllNumbers.add(2);\n        containsAllNumbers.add(3);\n        containsAllNumbers.add(900);\nQuery query = new Query(\u201cmycollection\u201d).containsAll(\narray1\n, containsAllNumbers);\n//query.findDocuments(\u2026);\n\n\n\n\n.notContainedIn(field, values)\n\n\nMethod for retrieving all objects whose field value \n\n\n\n\ndoes not contain the array elements specified in the query \n\n\ndoes not exist\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"orderNumbers\"\n\n\n\n\n\n\nvalue\n\n\nList\n\u0442\u0438\u043f \u043f\u043e\u043b\u044f\n\n\nMandatory\n\n\nArray of values\n\n\nsee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nList\nObject\n notContainsInList = new ArrayList\n();\n        notContainsInList.add(1);\n        notContainsInList.add(111);\n        notContainsInList.add(11);\n        notContainsInList.add(50);\nQuery query = new Query(\u201cmycollection\u201d).notContainedIn(\norderNumbers\n, notContainsInList)\n//query.findDocuments(\u2026);\n\n\n\n\n\n.greaterThan(field, value)\n\n\nMethod for retrieving all objects whose field value is greater than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nvalue\n\n\nInteger / Double / Date\n\n\nMandatory\n\n\nCondition value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d).greaterThan(\nnumber\n, 22)\n//query.findDocuments(\u2026);\n\n\n\n\n.greaterThenOrEqualTo(field, value)\n\n\nMethod for retrieving all objects whose field value is no less than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nvalue\n\n\nInteger / Double / Date\n\n\nMandatory\n\n\nCondition value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d).greaterThenOrEqualTo (\nnumber\n, 22)\n//query.findDocuments(\u2026);\n\n\n\n\n.lessThan(field, value)\n\n\nMethod for retrieving all objects whose field value is less than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nvalue\n\n\nInteger / Double / Date\n\n\nMandatory\n\n\nCondition value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d). lessThan(\nnumber\n, 22)\n//query.findDocuments(\u2026);\n\n\n\n\n\n.lessThanOrEqualTo(field, value)\n\n\nMethod for retrieving all objects whose field value is no greater than the number specified in the query.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nvalue\n\n\nInteger / Double / Date\n\n\nMandatory\n\n\nCondition value\n\n\n22\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d).lessThanOrEqualTo (\nnumber\n, 22)\n//query.findDocuments(\u2026);\n\n\n\n\n.exists(field)\n\n\nMethod for retrieving all objects with an existing value of a defined field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d).exists(\nphoneNumber\n)\n//query.findDocuments(\u2026);\n\n\n\n\n.doesNotExist(field)\n\n\nMethod for retrieving all objects with a missing value in a defined field.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d).doesNotExist(\nphoneNumber\n)\n//query.findDocuments(\u2026);\n\n\n\n\n.contains(field, regEx, options)\n\n\nMethod for retrieving all objects with a value of a defined field that matches a defined regular expression.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nregEx\n\n\nString\n\n\nMandatory\n\n\nRegular expression\n\n\n\u201caB\u201d\n\n\n\n\n\n\noptions\n\n\nRegexOptions\n\n\nOptional\n\n\nRegular expression options\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\n RegexOptions regexOptions = new RegexOptions();\n regexOptions.setRegexCaseInsenssitive();\n\n Query query = new Query(\u201cmycollection\u201d).contains(\nexampleField\n, \nBC\n, regexOptions)\n //query.findDocuments(\u2026);         \n\n\n\n\n.startsWith(field, regEx, options)\n\n\nMethod for retrieving all objects with a value of a defined field starting from a specified string.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nregEx\n\n\nString\n\n\nMandatory\n\n\nRegular expression\n\n\n\u201caB\u201d\n\n\n\n\n\n\noptions\n\n\nRegexOptions\n\n\nOptional\n\n\nRegular expression options\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\n RegexOptions regexOptions = new RegexOptions();\n regexOptions.setRegexCaseInsenssitive();\n\n Query query = new Query(\u201cmycollection\u201d).startsWith (\nexampleField\n, \na\n, regexOptions)\n //query.findDocuments(\u2026);\n\n\n\n\n\n.endsWith(field, regEx, options)\n\n\nMethod for retrieving all objects with a value of a defined field ending with a specified string.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nregEx\n\n\nString\n\n\nMandatory\n\n\nRegular expression\n\n\n\u201caB\u201d\n\n\n\n\n\n\noptions\n\n\nRegexOptions\n\n\nOptional\n\n\nRegular expression options\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\n RegexOptions regexOptions = new RegexOptions();\n regexOptions.setRegexCaseInsenssitive();\n\n Query query = new Query(\u201cmycollection\u201d).endsWith(\nexampleField\n, \na\n, regexOptions)\n //query.findDocuments(\u2026);\n\n\n\n\n.and(field, query)\n\n\nMethod for logical multiplication of several samplings conditions\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nquery\n\n\nQuery\n\n\nMandatory\n\n\nQuery that is included in the conjunction operation\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query1 = new Query(COLLECTION_NAME).greaterThan(\nraiting\n, 50);\nQuery query2 = new Query(COLLECTION_NAME).lessThan(\nraiting\n, 100);\n\nquery1.and(\nnumber3\n, query2);\n//query1.findDocuments(\u2026);\n\n\n\n\n.or(field, query)\n\n\nMethod for logical addition of several samplings conditions\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nName of the field for which a condition is defined\n\n\n\"fieldname\"\n\n\n\n\n\n\nquery\n\n\nQuery\n\n\nMandatory\n\n\nQuery that is included in the conjunction operation\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query1 = new Query(\u201cmycollection\u201d).greaterThan(\nraiting\n, 50);\nQuery query2 = new Query(\u201cmycollection\u201d).equalTo(\nstatus\n, 0);\n\nquery1.or(\nnumber3\n, query2);\n//query1.findDocuments(\u2026);\n\n\n\n\n.raw(json)\n\n\nMethod for defining sampling conditions in the form of a JSON structure to create a DB query in MongoDB language.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\njson\n\n\nString\n\n\nMandatory\n\n\nApplied filter in the MongoDB query language format\n\n\n\"{\\\"_id\\\": {\\\"$eq\\\": \\\"W9vrMS9SuW\\\"}}\"\n\n\n\n\n\n\n\n\nExample\n \n\n\n  Query query = new Query(\u201cmycollection\u201d);\n  query.raw(\n{\\\n_id\\\n: {\\\n$eq\\\n: \\\nW9vrMS9SuW\\\n}}\n);\n  //query.findDocuments(\u2026)\n\n\n\n\n.reset()\n\n\nMethod for resetting the sampling conditions\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdsads123sd\u201d);\nquery.reset();\nquery.equalTo(\u201c_id\u201d, \u201cds54522sd\u201d);\n//query.findDocuments(\u2026)\n\n\n\n\n.ascending(field)\n\n\nMethod for sorting a specified field data in ascending order before sampling.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"fieldname\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\nordersCollection\n);\nquery.ascending(\nitemId\n);\n//query.findDocuments(...)\n\n\n\n\n.descending(field)\n\n\nMethod for sorting a specified field data in descending order before sampling.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"fieldname\"\n\n\n\n\n\n\n\n\nExample\n \n\n\nQuery query = new Query(\nordersCollection\n);\nquery.descending(\nitemId\n);\n//query.findDocuments(...)\n\n\n\n\n.setFieldsForSearch(fields)\n\n\nMethod for specifying a list of returned fields.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfields\n\n\nList\nString\n\n\nMandatory\n\n\nFields names\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n \n\n\nList\nStrings\n fieldNames = new ArrayList\n();\nfieldNames.add(\u201corderId\u201d);\nfieldNames.add(\u201cbuyerName\u201d);\nfieldNames.add(\u201cphoneNumber\u201d);\n\nQuery query = new Query(\u201cmycollection\u201d).setFieldsForSearch(fieldNames);\n//query.findDocuments(\u2026);\n\n\n\n\n.getQueryInfo()\n\n\nMethod for retrieving query conditions info\n\n\nExample\n \n\n\nQuery query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdsads123sd\u201d);\n\nQueryInfo queryInfo = query.getQueryInfo();", 
            "title": "Query"
        }, 
        {
            "location": "/Java/Query/#query", 
            "text": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0431\u043e\u0440\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.  \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435   Query  new Query(name)  .findDocuments(callback)  .countDocuments(callback)  .updateDocument(update, callback)  .removeDocument(callback)  .setLimit(limit)  .setSkip(skip)  .setPage(page)  .equalTo(field, value)  .notEqualTo(field, value)  .containedIn(field, values)  .containsAll(field, values)  .notContainedIn(field, values)  .greaterThan(field, value)  .greaterThenOrEqualTo(field, value)  .lessThan(field,  value)  .lessThanOrEqualTo(field, value)  .exists(field)  .doesNotExist(field)  .contains(field, regEx, options)  .startsWith(field, regEx, options)  .endsWith(field, regEx, options)  .and(field, query)  .or(field, query)  .raw(json)  .reset()  .ascending(field)  .descending(field)  .setFieldsForSearch(fields)  .getQueryInfo()", 
            "title": "Query"
        }, 
        {
            "location": "/Java/Query/#new-query", 
            "text": "Initialisation of a collection data query     Parameter  Type  Properties  Description  Value example      collection_name  String   Collection name  \"things\"     Example", 
            "title": "new Query()"
        }, 
        {
            "location": "/Java/Query/#query-query-new-queryname", 
            "text": "", 
            "title": "Query query = new Query(&quot;name&quot;);"
        }, 
        {
            "location": "/Java/Query/#finddocumentscallback", 
            "text": "Method for requesting a document from a collection. Returns data of the objects that match the sampling criteria.      Parameter  Type  Properties  Description  Value example      callback  CallbackFindDocument  Mandatory  Callback for the request being executed.       Note  If no criteria are set, the first 50 objects of the collection are returned by default.   Example", 
            "title": ".findDocuments(callback)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-equaltonumber3-10-existsnumber2-queryfinddocumentsnew-callbackfinddocument-override-public-void-ondocumentfoundlistdocumentinfo-documentinfos-found-see-document-list-what-match-query-override-public-void-ondocumentnotfoundstring-errorcode-string-errormessage-no-documents-what-match-query", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d)"
        }, 
        {
            "location": "/Java/Query/#countdocumentscallback", 
            "text": "Method for counting objects that meet the query conditions.     Parameter  Type  Properties  Description  Value example      callback  CallbackCountDocument  Mandatory  Callback for the request being executed.      Example", 
            "title": ".countDocuments(callback)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-querygreaterthanrating-10-querycountdocumentsnew-callbackcountdocument-override-public-void-ondocumentscountedresponsecount-responsecount-see-responsecountgetresult-to-find-how-many-documents-was-found-override-public-void-oncountfailedstring-errorcode-string-errormessage-error-during-count", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#updatedocumentupdate-callback", 
            "text": "Method for updating the requested objects.     Parameter  Type  Properties  Description  Value example      update  Update  Mandatory  Update object     callback  CallbackUpdateDocument  Mandatory  Callback for the request being executed.       Note  This method can update a maximum of 1000 documents in a request.   Example", 
            "title": ".updateDocument(update, callback)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-queryequaltonumber3-10-update-update-new-update-setnumber2-199-setnumberfield-111-addtosetarray1-900-queryupdatedocumentupdate-new-callbackupdatedocument-override-public-void-onupdatesucceedresponseupdate-responseupdate-documents-updated-successful-override-public-void-onupdatefailedstring-errorcode-string-errormessage-error-during-update", 
            "text": "", 
            "title": " Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#removedocumentcallback", 
            "text": "Method for removing the requested documents.     Parameter  Type  Properties  Description  Value example      callback  CallbackRemoveDocument  Mandatory  Callback for the request being executed.       Note  This method can remove a maximum of 1000 documents in a request.   Example", 
            "title": ".removeDocument(callback)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-queryequalto_id-ajfkipjags-queryremovedocumentnew-callbackremovedocument-override-public-void-onremovesucceedresponseremove-responseremove-succeed-see-responseremove-to-findout-how-many-documents-was-removed-and-get-list-of-removed-documents-override-public-void-onremovefailedstring-errorcode-string-errormessage-error-during-remove-operation", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#setlimitlimit", 
            "text": "Method for specifying a limit for the number of sampling, updating or removing documents.     Parameter  Type  Properties  Description  Value example      limit  Integer  Mandatory  Limit  15      Note  Limit defaults to 50, but anything from 1 to 100 is a valid limit.   Example", 
            "title": ".setLimit(limit)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-querysetlimit15-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#setskipskip", 
            "text": "Method for skipping some objects before sampling.     Parameter  Type  Properties  Description  Value example      skip  Integer  Mandatory  Number of skipped objects  100     Example", 
            "title": ".setSkip(skip)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-querysetskip12-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#setpagepage", 
            "text": "Method for sampling results page by page     Parameter  Type  Properties  Description  Value example      page  Integer  Mandatory  Page number  2     Example", 
            "title": ".setPage(page)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-querysetlimit15-querysetpage1-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#equaltofield-value", 
            "text": "Method for retrieving all objects with the field value indicated in the condition.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"orderNumber\"    value  Object  Mandatory  Field value  22     Example    Query query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201corderNumber\u201d, 22);\n//query.findDocuments(\u2026);  Query query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdasds12dskm\u201d);\n//query.findDocuments(\u2026);", 
            "title": ".equalTo(field, value)"
        }, 
        {
            "location": "/Java/Query/#notequaltofield-value", 
            "text": "Method for retrieving all objects except for objects with the field value indicated in the condition.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"orderNumber\"    value  Object  Mandatory  Field value  22     Example    Query query = new Query(\u201cmycollection\u201d);\nquery.notEqualTo(\u201corderNumber\u201d, 22);\n//query.findDocuments(\u2026);  Query query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdasds12dskm\u201d);\n//query.findDocuments(\u2026);", 
            "title": ".notEqualTo(field, value)"
        }, 
        {
            "location": "/Java/Query/#containedinfield-values", 
            "text": "Method for retrieving all objects whose field value contains the array elements specified in the query.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"orderNumbers\"    value  List \u0442\u0438\u043f \u043f\u043e\u043b\u044f  Mandatory  Array of values  see the example below     Example", 
            "title": ".containedIn(field, values)"
        }, 
        {
            "location": "/Java/Query/#listobject-numbers-new-arraylist-numbersadd1-numbersadd5-numbersadd10-numbersadd15-query-query-new-querymycollectioncontainedinnumber3-numbers-queryfinddocuments", 
            "text": "", 
            "title": "List&lt;Object&gt; numbers = new ArrayList&lt;&gt;();"
        }, 
        {
            "location": "/Java/Query/#containsallfield-values", 
            "text": "Method for retrieving all objects whose field value contains all array elements specified in the query.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"orderNumbers\"    value  List \u0442\u0438\u043f \u043f\u043e\u043b\u044f  Mandatory  Array of values  see the example below     Example", 
            "title": ".containsAll(field, values)"
        }, 
        {
            "location": "/Java/Query/#listobject-containsallnumbers-new-arraylist-containsallnumbersadd1-containsallnumbersadd2-containsallnumbersadd3-containsallnumbersadd900-query-query-new-querymycollectioncontainsallarray1-containsallnumbers-queryfinddocuments", 
            "text": "", 
            "title": "List&lt;Object&gt; containsAllNumbers = new ArrayList&lt;&gt;();"
        }, 
        {
            "location": "/Java/Query/#notcontainedinfield-values", 
            "text": "Method for retrieving all objects whose field value    does not contain the array elements specified in the query   does not exist      Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"orderNumbers\"    value  List \u0442\u0438\u043f \u043f\u043e\u043b\u044f  Mandatory  Array of values  see the example below     Example", 
            "title": ".notContainedIn(field, values)"
        }, 
        {
            "location": "/Java/Query/#listobject-notcontainsinlist-new-arraylist-notcontainsinlistadd1-notcontainsinlistadd111-notcontainsinlistadd11-notcontainsinlistadd50-query-query-new-querymycollectionnotcontainedinordernumbers-notcontainsinlist-queryfinddocuments", 
            "text": "", 
            "title": "List&lt;Object&gt; notContainsInList = new ArrayList&lt;&gt;();"
        }, 
        {
            "location": "/Java/Query/#greaterthanfield-value", 
            "text": "Method for retrieving all objects whose field value is greater than the number specified in the query.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    value  Integer / Double / Date  Mandatory  Condition value  22     Example", 
            "title": ".greaterThan(field, value)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollectiongreaterthannumber-22-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d).greaterThan(&quot;number&quot;, 22)"
        }, 
        {
            "location": "/Java/Query/#greaterthenorequaltofield-value", 
            "text": "Method for retrieving all objects whose field value is no less than the number specified in the query.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    value  Integer / Double / Date  Mandatory  Condition value  22     Example", 
            "title": ".greaterThenOrEqualTo(field, value)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollectiongreaterthenorequalto-number-22-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d).greaterThenOrEqualTo (&quot;number&quot;, 22)"
        }, 
        {
            "location": "/Java/Query/#lessthanfield-value", 
            "text": "Method for retrieving all objects whose field value is less than the number specified in the query.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    value  Integer / Double / Date  Mandatory  Condition value  22     Example", 
            "title": ".lessThan(field, value)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-lessthannumber-22-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d). lessThan(&quot;number&quot;, 22)"
        }, 
        {
            "location": "/Java/Query/#lessthanorequaltofield-value", 
            "text": "Method for retrieving all objects whose field value is no greater than the number specified in the query.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    value  Integer / Double / Date  Mandatory  Condition value  22     Example", 
            "title": ".lessThanOrEqualTo(field, value)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollectionlessthanorequalto-number-22-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d).lessThanOrEqualTo (&quot;number&quot;, 22)"
        }, 
        {
            "location": "/Java/Query/#existsfield", 
            "text": "Method for retrieving all objects with an existing value of a defined field     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"     Example", 
            "title": ".exists(field)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollectionexistsphonenumber-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d).exists(&quot;phoneNumber&quot;)"
        }, 
        {
            "location": "/Java/Query/#doesnotexistfield", 
            "text": "Method for retrieving all objects with a missing value in a defined field.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"     Example", 
            "title": ".doesNotExist(field)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollectiondoesnotexistphonenumber-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d).doesNotExist(&quot;phoneNumber&quot;)"
        }, 
        {
            "location": "/Java/Query/#containsfield-regex-options", 
            "text": "Method for retrieving all objects with a value of a defined field that matches a defined regular expression.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    regEx  String  Mandatory  Regular expression  \u201caB\u201d    options  RegexOptions  Optional  Regular expression options  See the example below     Example", 
            "title": ".contains(field, regEx, options)"
        }, 
        {
            "location": "/Java/Query/#regexoptions-regexoptions-new-regexoptions-regexoptionssetregexcaseinsenssitive-query-query-new-querymycollectioncontainsexamplefield-bc-regexoptions-queryfinddocuments", 
            "text": "", 
            "title": " RegexOptions regexOptions = new RegexOptions();"
        }, 
        {
            "location": "/Java/Query/#startswithfield-regex-options", 
            "text": "Method for retrieving all objects with a value of a defined field starting from a specified string.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    regEx  String  Mandatory  Regular expression  \u201caB\u201d    options  RegexOptions  Optional  Regular expression options  See the example below     Example", 
            "title": ".startsWith(field, regEx, options)"
        }, 
        {
            "location": "/Java/Query/#regexoptions-regexoptions-new-regexoptions-regexoptionssetregexcaseinsenssitive-query-query-new-querymycollectionstartswith-examplefield-a-regexoptions-queryfinddocuments", 
            "text": "", 
            "title": " RegexOptions regexOptions = new RegexOptions();"
        }, 
        {
            "location": "/Java/Query/#endswithfield-regex-options", 
            "text": "Method for retrieving all objects with a value of a defined field ending with a specified string.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    regEx  String  Mandatory  Regular expression  \u201caB\u201d    options  RegexOptions  Optional  Regular expression options  See the example below     Example", 
            "title": ".endsWith(field, regEx, options)"
        }, 
        {
            "location": "/Java/Query/#regexoptions-regexoptions-new-regexoptions-regexoptionssetregexcaseinsenssitive-query-query-new-querymycollectionendswithexamplefield-a-regexoptions-queryfinddocuments", 
            "text": "", 
            "title": " RegexOptions regexOptions = new RegexOptions();"
        }, 
        {
            "location": "/Java/Query/#andfield-query", 
            "text": "Method for logical multiplication of several samplings conditions     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    query  Query  Mandatory  Query that is included in the conjunction operation  See the example below     Example", 
            "title": ".and(field, query)"
        }, 
        {
            "location": "/Java/Query/#query-query1-new-querycollection_namegreaterthanraiting-50-query-query2-new-querycollection_namelessthanraiting-100-query1andnumber3-query2-query1finddocuments", 
            "text": "", 
            "title": "Query query1 = new Query(COLLECTION_NAME).greaterThan(&quot;raiting&quot;, 50);"
        }, 
        {
            "location": "/Java/Query/#orfield-query", 
            "text": "Method for logical addition of several samplings conditions     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Name of the field for which a condition is defined  \"fieldname\"    query  Query  Mandatory  Query that is included in the conjunction operation  See the example below     Example", 
            "title": ".or(field, query)"
        }, 
        {
            "location": "/Java/Query/#query-query1-new-querymycollectiongreaterthanraiting-50-query-query2-new-querymycollectionequaltostatus-0-query1ornumber3-query2-query1finddocuments", 
            "text": "", 
            "title": "Query query1 = new Query(\u201cmycollection\u201d).greaterThan(&quot;raiting&quot;, 50);"
        }, 
        {
            "location": "/Java/Query/#rawjson", 
            "text": "Method for defining sampling conditions in the form of a JSON structure to create a DB query in MongoDB language.     Parameter  Type  Properties  Description  Value example      json  String  Mandatory  Applied filter in the MongoDB query language format  \"{\\\"_id\\\": {\\\"$eq\\\": \\\"W9vrMS9SuW\\\"}}\"     Example", 
            "title": ".raw(json)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-queryraw_id-eq-w9vrms9suw-queryfinddocuments", 
            "text": "", 
            "title": "  Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#reset", 
            "text": "Method for resetting the sampling conditions  Example", 
            "title": ".reset()"
        }, 
        {
            "location": "/Java/Query/#query-query-new-querymycollection-queryequalto_id-dsads123sd-queryreset-queryequalto_id-ds54522sd-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(\u201cmycollection\u201d);"
        }, 
        {
            "location": "/Java/Query/#ascendingfield", 
            "text": "Method for sorting a specified field data in ascending order before sampling.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"fieldname\"     Example", 
            "title": ".ascending(field)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-queryorderscollection-queryascendingitemid-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(&quot;ordersCollection&quot;);"
        }, 
        {
            "location": "/Java/Query/#descendingfield", 
            "text": "Method for sorting a specified field data in descending order before sampling.     Parameter  Type  Properties  Description  Value example      field  String  Mandatory  Field name  \"fieldname\"     Example", 
            "title": ".descending(field)"
        }, 
        {
            "location": "/Java/Query/#query-query-new-queryorderscollection-querydescendingitemid-queryfinddocuments", 
            "text": "", 
            "title": "Query query = new Query(&quot;ordersCollection&quot;);"
        }, 
        {
            "location": "/Java/Query/#setfieldsforsearchfields", 
            "text": "Method for specifying a list of returned fields.     Parameter  Type  Properties  Description  Value example      fields  List String  Mandatory  Fields names  See the example below     Example", 
            "title": ".setFieldsForSearch(fields)"
        }, 
        {
            "location": "/Java/Query/#liststrings-fieldnames-new-arraylist-fieldnamesaddorderid-fieldnamesaddbuyername-fieldnamesaddphonenumber-query-query-new-querymycollectionsetfieldsforsearchfieldnames-queryfinddocuments", 
            "text": "", 
            "title": "List&lt;Strings&gt; fieldNames = new ArrayList&lt;&gt;();"
        }, 
        {
            "location": "/Java/Query/#getqueryinfo", 
            "text": "Method for retrieving query conditions info  Example    Query query = new Query(\u201cmycollection\u201d);\nquery.equalTo(\u201c_id\u201d, \u201cdsads123sd\u201d);\n\nQueryInfo queryInfo = query.getQueryInfo();", 
            "title": ".getQueryInfo()"
        }, 
        {
            "location": "/Java/Script/", 
            "text": "Script\n\n\nClass for handling server-side scripts\n\n\n\n\nScript\n\n\nnew Script()\n\n\n.runScript(scriptId, dataPoolForScript, callback)\n\n\n.runScript(scriptId, callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew Script()\n\n\nScript constructor\n\n\nScript script = new Script();\n\n\n\n\n.runScript(scriptId, dataPoolForScript, callback)\n\n\nServer-side script running method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nscriptId\n\n\nString\n\n\nMandatory\n\n\nServer-side script identifier\n\n\n\"57e1503b48e5f54441189790\"\n\n\n\n\n\n\ndataPoolForScript\n\n\nObject\n\n\nOptional\n\n\nObject with the data that will be passed to the server-side script\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackRunScript\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\nSee the example below\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nObject \ndataPoolForScript\n will be serialised to JSON by the Google Gson parser. See \nhttps://github.com/google/gson\n for assistance.\n\n\n\n\nExample\n\n\nScript script = new Script();\nHashMap\nString, Object\n dataPool = new HashMap\n();\ndataPool.put(\u201ccollname\u201d,\u201ditems\u201d);\ndataPool.put(\u201ckey\u201d,\u201dexampleField\u201d);\ndataPool.put(\u201cval\u201d,\u201danyInfo\u201d);\n\nscript.runScript(\n57e1503b48e5f54441189790\n, dataPool, new CallbackRunScript() {\n            @Override\n            public void onScriptSended() {\n                //script sended and runned\n            }\n\n            @Override\n            public void onScriptSendFailed(String errorCode, String errorMessage) {\n                //error during script run\n            }\n        });\n\n\n\n\n\n\n.runScript(scriptId, callback)\n\n\nServer-side script running method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nscriptId\n\n\nString\n\n\nMandatory\n\n\nServer-side script identifier\n\n\n\"57e1503b48e5f54441189790\"\n\n\n\n\n\n\ncallback\n\n\nCallbackRunScript\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\nSee the example below\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nObject \ndataPoolForScript\n will be serialised to JSON by the Google Gson parser. See \nhttps://github.com/google/gson\n for assistance.\n\n\n\n\nExample\n\n\nScript script = new Script();\nscript.runScript(\n57e1503b48e5f54441189790\n, new CallbackRunScript() {\n            @Override\n            public void onScriptSended() {\n                //script sended and runned\n            }\n\n            @Override\n            public void onScriptSendFailed(String errorCode, String errorMessage) {\n                //error during script run\n            }\n        });", 
            "title": "Script"
        }, 
        {
            "location": "/Java/Script/#script", 
            "text": "Class for handling server-side scripts   Script  new Script()  .runScript(scriptId, dataPoolForScript, callback)  .runScript(scriptId, callback)", 
            "title": "Script"
        }, 
        {
            "location": "/Java/Script/#new-script", 
            "text": "Script constructor", 
            "title": "new Script()"
        }, 
        {
            "location": "/Java/Script/#script-script-new-script", 
            "text": "", 
            "title": "Script script = new Script();"
        }, 
        {
            "location": "/Java/Script/#runscriptscriptid-datapoolforscript-callback", 
            "text": "Server-side script running method     Parameter  Type  Properties  Description  Value example      scriptId  String  Mandatory  Server-side script identifier  \"57e1503b48e5f54441189790\"    dataPoolForScript  Object  Optional  Object with the data that will be passed to the server-side script  See the example below    callback  CallbackRunScript  Mandatory  Callback for the request being executed.  See the example below      Note  Object  dataPoolForScript  will be serialised to JSON by the Google Gson parser. See  https://github.com/google/gson  for assistance.   Example  Script script = new Script();\nHashMap String, Object  dataPool = new HashMap ();\ndataPool.put(\u201ccollname\u201d,\u201ditems\u201d);\ndataPool.put(\u201ckey\u201d,\u201dexampleField\u201d);\ndataPool.put(\u201cval\u201d,\u201danyInfo\u201d);\n\nscript.runScript( 57e1503b48e5f54441189790 , dataPool, new CallbackRunScript() {\n            @Override\n            public void onScriptSended() {\n                //script sended and runned\n            }\n\n            @Override\n            public void onScriptSendFailed(String errorCode, String errorMessage) {\n                //error during script run\n            }\n        });", 
            "title": ".runScript(scriptId, dataPoolForScript, callback)"
        }, 
        {
            "location": "/Java/Script/#runscriptscriptid-callback", 
            "text": "Server-side script running method     Parameter  Type  Properties  Description  Value example      scriptId  String  Mandatory  Server-side script identifier  \"57e1503b48e5f54441189790\"    callback  CallbackRunScript  Mandatory  Callback for the request being executed.  See the example below      Note  Object  dataPoolForScript  will be serialised to JSON by the Google Gson parser. See  https://github.com/google/gson  for assistance.   Example  Script script = new Script();\nscript.runScript( 57e1503b48e5f54441189790 , new CallbackRunScript() {\n            @Override\n            public void onScriptSended() {\n                //script sended and runned\n            }\n\n            @Override\n            public void onScriptSendFailed(String errorCode, String errorMessage) {\n                //error during script run\n            }\n        });", 
            "title": ".runScript(scriptId, callback)"
        }, 
        {
            "location": "/Java/Message/", 
            "text": "Class for message sending\n\n\n\n\nMessage\n\n\nnew Message(from, subject, text)\n\n\n.sendPush(messagePush, query, callback)\n\n\n.sendPush(messagePush, callback)\n\n\n.sendSms(messageSms, query, callback)\n\n\n.sendSms(messageSms, callback)\n\n\n\n\n\n\n\n\n\n\n\n\nMessage constructor\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\nString\n\n\nOptional\n\n\nMessage sender\n\n\n\"Any name\"\n\n\n\n\n\n\ntext\n\n\nString\n\n\nOptional\n\n\nMessage text\n\n\n\"Any text\"\n\n\n\n\n\n\n\n\nExample\n\n\nMessagePush messagePush = new MessagePush(\nAny text\n, null);\n\n\n\n\n\n\n\n.sendPush(messagePush, query, callback)\n\n\nPush sending method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nmessagePush\n\n\nMessagePush\n\n\nMandatory\n\n\nObject, that contains message\n\n\n\n\n\n\n\n\nquery\n\n\nQuery\n\n\nOptional\n\n\nUsers/Devices collection query for sampling\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackSendPush\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nMessagePush messagePush = new MessagePush(\nAny text\n, null);\n\nQuery query = new Query(\nUSERS\n);\nquery.equalTo(\n_id\n, \nXukL1FrVoL\n);\n\nMessage message = new Message();\nmessage.sendPush(messagePush, query, new CallbackSendPush() {\n            @Override\n            public void onPushSended() {\n                //push send\n            }\n\n            @Override\n            public void onPushSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });\n\n\n\n\n\n\n\n.sendPush(messagePush, callback)\n\n\nPush sending method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nmessagePush\n\n\nMessagePush\n\n\nMandatory\n\n\nObject, that contains message\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackSendPush\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nMessagePush messagePush = new MessagePush(\nAny text\n, null);\n\nQuery query = new Query(\nUSERS\n);\nquery.equalTo(\n_id\n, \nXukL1FrVoL\n);\n\nMessage message = new Message();\nmessage.sendPush(messagePush, query, new () {\n            @Override\n            public void onPushSended() {\n                //push send\n            }\n\n            @Override\n            public void onPushSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });\n\n\n\n\n\n\n\n.sendSms(messageSms, query, callback)\n\n\nSMS sending method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nmessageSms\n\n\nmessageSms\n\n\nMandatory\n\n\nObject, that contains message\n\n\n\n\n\n\n\n\nquery\n\n\nQuery\n\n\nOptional\n\n\nUsers collection query for sampling.\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackSendSms\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nMessageSms messageSms = new MessageSms(\nHello world\n);\n\nQuery query = new Query(\nUSERS\n);\nquery.equalTo(\n_id\n, \nXukL1FrVoL\n);\n\nmessage.sendSms(messageSms, query, new CallbackSendSms() {\n            @Override\n            public void onSmsSended() {\n                //sms send\n            }\n\n            @Override\n            public void onSmsSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });\n\n\n\n\n\n\n\n\n.sendSms(messageSms, callback)\n\n\nSMS sending method\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nmessageSms\n\n\nmessageSms\n\n\nMandatory\n\n\nObject, that contains message\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackSendSms\n\n\nMandatory\n\n\nCallback for the request being executed.\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nMessageSms messageSms = new MessageSms(\nHello world\n);\nmessage.sendSms(messageSms, new CallbackSendSms() {\n            @Override\n            public void onSmsSended() {\n                //sms send\n            }\n\n            @Override\n            public void onSmsSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });", 
            "title": "Message"
        }, 
        {
            "location": "/Java/Message/#sendpushmessagepush-query-callback", 
            "text": "Push sending method     Parameter  Type  Properties  Description  Value example      messagePush  MessagePush  Mandatory  Object, that contains message     query  Query  Optional  Users/Devices collection query for sampling     callback  CallbackSendPush  Mandatory  Callback for the request being executed.      Example  MessagePush messagePush = new MessagePush( Any text , null);\n\nQuery query = new Query( USERS );\nquery.equalTo( _id ,  XukL1FrVoL );\n\nMessage message = new Message();\nmessage.sendPush(messagePush, query, new CallbackSendPush() {\n            @Override\n            public void onPushSended() {\n                //push send\n            }\n\n            @Override\n            public void onPushSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });", 
            "title": ".sendPush(messagePush, query, callback)"
        }, 
        {
            "location": "/Java/Message/#sendpushmessagepush-callback", 
            "text": "Push sending method     Parameter  Type  Properties  Description  Value example      messagePush  MessagePush  Mandatory  Object, that contains message     callback  CallbackSendPush  Mandatory  Callback for the request being executed.      Example  MessagePush messagePush = new MessagePush( Any text , null);\n\nQuery query = new Query( USERS );\nquery.equalTo( _id ,  XukL1FrVoL );\n\nMessage message = new Message();\nmessage.sendPush(messagePush, query, new () {\n            @Override\n            public void onPushSended() {\n                //push send\n            }\n\n            @Override\n            public void onPushSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });", 
            "title": ".sendPush(messagePush, callback)"
        }, 
        {
            "location": "/Java/Message/#sendsmsmessagesms-query-callback", 
            "text": "SMS sending method     Parameter  Type  Properties  Description  Value example      messageSms  messageSms  Mandatory  Object, that contains message     query  Query  Optional  Users collection query for sampling.     callback  CallbackSendSms  Mandatory  Callback for the request being executed.      Example  MessageSms messageSms = new MessageSms( Hello world );\n\nQuery query = new Query( USERS );\nquery.equalTo( _id ,  XukL1FrVoL );\n\nmessage.sendSms(messageSms, query, new CallbackSendSms() {\n            @Override\n            public void onSmsSended() {\n                //sms send\n            }\n\n            @Override\n            public void onSmsSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });", 
            "title": ".sendSms(messageSms, query, callback)"
        }, 
        {
            "location": "/Java/Message/#sendsmsmessagesms-callback", 
            "text": "SMS sending method     Parameter  Type  Properties  Description  Value example      messageSms  messageSms  Mandatory  Object, that contains message     callback  CallbackSendSms  Mandatory  Callback for the request being executed.      Example  MessageSms messageSms = new MessageSms( Hello world );\nmessage.sendSms(messageSms, new CallbackSendSms() {\n            @Override\n            public void onSmsSended() {\n                //sms send\n            }\n\n            @Override\n            public void onSmsSendFailed(String errorCode, String errorMessage) {\n                //error during sending\n            }\n        });", 
            "title": ".sendSms(messageSms, callback)"
        }, 
        {
            "location": "/Java/WebSocket/", 
            "text": "WebSocket\n\n\nTo use WebSocket in your project, you can use the \nhttps://github.com/codebutler/android-websockets\n library (or similar) with the following url scheme when initializing WebSocket:\n\n\nwss://wss.scorocode.ru/{appID}/{wsKey}/{chanName}\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nValue example\n\n\n\n\n\n\n\n\n\n\nappID\n\n\nString\n\n\nMandatory\n\n\nApplication identifier\n\n\na3d04e75e157b2f7ae20c2fce02f63d6\n\n\n\n\n\n\nwsKey\n\n\nString\n\n\nMandatory\n\n\nApplication websocket key\n\n\na3d04e75e157b2f7ae20c2fce02f63d6\n\n\n\n\n\n\nchanName\n\n\nString\n\n\nMandatory\n\n\nArbitrary channel name\n\n\nchat_channel\n\n\n\n\n\n\n\n\nInitialisation example\n\n\nWebSocketClient client = new WebSocketClient(URI.create(\nwss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/a3d04e75e157b2f7ae20c2fce02f63d6/chat_channel\n), handler);\n\n\n\nUsage example\n\n\nList\nBasicNameValuePair\n extraHeaders = Arrays.asList(\n    new BasicNameValuePair(\nCookie\n, \nsession=abcd\n);\n);\n\nWebSocketClient client = new WebSocketClient(URI.create(\nwss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/b3asd4e75e1fds2f7ae20c2fce02f63d6/chat_channel\n), new WebSocketClient.Handler() {\n    @Override\n    public void onConnect() {\n        Log.d(TAG, \nConnected!\n);\n    }\n\n    @Override\n    public void onMessage(String message) {\n        Log.d(TAG, String.format(\nGot string message! %s\n, message));\n    }\n\n    @Override\n    public void onMessage(byte[] data) {\n        Log.d(TAG, String.format(\nGot binary message! %s\n, toHexString(data));\n    }\n\n    @Override\n    public void onDisconnect(int code, String reason) {\n        Log.d(TAG, String.format(\nDisconnected! Code: %d Reason: %s\n, code, reason));\n    }\n\n    @Override\n    public void onError(Exception error) {\n        Log.e(TAG, \nError!\n, error);\n    }\n}, extraHeaders);\n\nclient.connect();\n\n// later...\n\nclient.send(\nhello!\n);\nclient.send(new byte[] { 0xDE, 0xAD, 0xBE, 0xEF });\nclient.disconnect();", 
            "title": "WebSocket"
        }, 
        {
            "location": "/Java/WebSocket/#websocket", 
            "text": "To use WebSocket in your project, you can use the  https://github.com/codebutler/android-websockets  library (or similar) with the following url scheme when initializing WebSocket:  wss://wss.scorocode.ru/{appID}/{wsKey}/{chanName}     Parameter  Type  Properties  Description  Value example      appID  String  Mandatory  Application identifier  a3d04e75e157b2f7ae20c2fce02f63d6    wsKey  String  Mandatory  Application websocket key  a3d04e75e157b2f7ae20c2fce02f63d6    chanName  String  Mandatory  Arbitrary channel name  chat_channel     Initialisation example  WebSocketClient client = new WebSocketClient(URI.create( wss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/a3d04e75e157b2f7ae20c2fce02f63d6/chat_channel ), handler);  Usage example  List BasicNameValuePair  extraHeaders = Arrays.asList(\n    new BasicNameValuePair( Cookie ,  session=abcd );\n);\n\nWebSocketClient client = new WebSocketClient(URI.create( wss://wss.scorocode.ru/a3d04e75e157b2f7ae20c2fce02f63d6/b3asd4e75e1fds2f7ae20c2fce02f63d6/chat_channel ), new WebSocketClient.Handler() {\n    @Override\n    public void onConnect() {\n        Log.d(TAG,  Connected! );\n    }\n\n    @Override\n    public void onMessage(String message) {\n        Log.d(TAG, String.format( Got string message! %s , message));\n    }\n\n    @Override\n    public void onMessage(byte[] data) {\n        Log.d(TAG, String.format( Got binary message! %s , toHexString(data));\n    }\n\n    @Override\n    public void onDisconnect(int code, String reason) {\n        Log.d(TAG, String.format( Disconnected! Code: %d Reason: %s , code, reason));\n    }\n\n    @Override\n    public void onError(Exception error) {\n        Log.e(TAG,  Error! , error);\n    }\n}, extraHeaders);\n\nclient.connect();\n\n// later...\n\nclient.send( hello! );\nclient.send(new byte[] { 0xDE, 0xAD, 0xBE, 0xEF });\nclient.disconnect();", 
            "title": "WebSocket"
        }, 
        {
            "location": "/Java/ApplicationInfo/", 
            "text": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n\n\n\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n\n\n\n\nApplicationInfo\n\n\nnew ApplicationInfo()\n\n\n.getApplicationInfo(callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew ApplicationInfo()\n\n\nConstructor ApplicationInfo\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nApplicationInfo applicationInfo = new ApplicationInfo();\n\n\n\n\n\nMasterKey\n\n\nYou should initialise SDK with MasterKey to use ApplicationInfo methods.\n\n\n\n\n\n\n\n\n.getApplicationInfo(callback)\n\n\nRetreive full application info.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackGetApplicationInfo\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nApplicationInfo applicationInfo = new ApplicationInfo();\napplicationInfo.getApplicationInfo(new CallbackGetApplicationInfo() {\n    @Override\n    public void onRequestSucceed(ScorocodeApplicationInfo appInfo) {\n         //sdk  returned info\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": "ApplicationInfo"
        }, 
        {
            "location": "/Java/ApplicationInfo/#new-applicationinfo", 
            "text": "Constructor ApplicationInfo  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nApplicationInfo applicationInfo = new ApplicationInfo();   MasterKey  You should initialise SDK with MasterKey to use ApplicationInfo methods.", 
            "title": "new ApplicationInfo()"
        }, 
        {
            "location": "/Java/ApplicationInfo/#getapplicationinfocallback", 
            "text": "Retreive full application info.     Parameter  Type  Properties  Description  Example      callback  CallbackGetApplicationInfo  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nApplicationInfo applicationInfo = new ApplicationInfo();\napplicationInfo.getApplicationInfo(new CallbackGetApplicationInfo() {\n    @Override\n    public void onRequestSucceed(ScorocodeApplicationInfo appInfo) {\n         //sdk  returned info\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".getApplicationInfo(callback)"
        }, 
        {
            "location": "/Java/Bot/", 
            "text": "Bot\n\n\nnew Bot()\n\n\n.getBotsList(callback)\n\n\n.createBot(botInfo, callback)\n\n\n.updateBot(botId, newBotInfo, callback)\n\n\n.deleteBot(botId, callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew Bot()\n\n\nConstructor Bot\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nBot bot = new Bot();\n\n\n\n\n\nMasterKey\n\n\nYou should initialise SDK with MasterKey to use Bot methods.\n\n\n\n\n\n\n\n\n.getBotsList(callback)\n\n\nRetrieve application bots list.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackGetBotList\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nBot bot = new Bot();\nbot.getBotsList(new CallbackGetBotList() {\n    @Override\n    public void onRequestSucceed(List\nScorocodeBot\n botList) {\n        //sdk returned bot list\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.createBot(botInfo, callback)\n\n\nMethod for create a new bot.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nbotInfo\n\n\nScorocodeBot\n\n\nMandatory\n\n\nClass that contains bot information\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackCreateBot\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nString botName = \nscorocodeSdkTestBotName\n;\nString telegramBotId = \nscorocodeSdkTestTelegramBotId\n;\nString scriptId = \u201c584fba2c42d52f1ba275fdb5\u201d;\n\nScorocodeBot botInfo = new ScorocodeBot(botName, telegramBotId, scriptId, false);\nBot bot = new Bot();\nbot.createBot(botInfo, new CallbackCreateBot() {\n    @Override\n    public void onBotCreated(ScorocodeBot bot) {\n          //bot created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during bot creation        \n    }\n});\n\n\n\n\n\n\n\n.updateBot(botId, newBotInfo, callback)\n\n\nMethod for updating a bot that already exists\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nbotId\n\n\nString\n\n\nMandatory\n\n\nScorocode bot identifier\n\n\nSee the example below\n\n\n\n\n\n\nnewBotInfo\n\n\nScorocodeBot\n\n\nMandatory\n\n\nClass that contains bot information\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackUpdateBot\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nString botId = \u201c584fba2c42d52f1ba275fdb5\u201d;\n\nScorocodeBot newBotInfo = new ScorocodeBot(\nupdated\n+botName, \nupdated\n+ telegramBotId, scriptId, false);\n\nBot bot = new Bot();\nbot.updateBot(botId, newBotInfo, new CallbackUpdateBot() {\n    @Override\n    public void onBotUpdated(ScorocodeBot bot) {\n        //bot updated\n    }\n\n    @Override\n    public void onUpdateFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.deleteBot(botId, callback)\n\n\nMethod for deleteing a bot\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nbotId\n\n\nString\n\n\nMandatory\n\n\nScorocode bot identifier\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteBot\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nString botId = \u201c584fba2c42d52f1ba275fdb5\u201d;\n\nBot bot = new Bot();\nbot.deleteBot(botId, new CallbackDeleteBot() {\n    @Override\n    public void onBotDeleted() {\n        //bot deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": "Bot"
        }, 
        {
            "location": "/Java/Bot/#new-bot", 
            "text": "Constructor Bot  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nBot bot = new Bot();   MasterKey  You should initialise SDK with MasterKey to use Bot methods.", 
            "title": "new Bot()"
        }, 
        {
            "location": "/Java/Bot/#getbotslistcallback", 
            "text": "Retrieve application bots list.     Parameter  Type  Properties  Description  Example      callback  CallbackGetBotList  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nBot bot = new Bot();\nbot.getBotsList(new CallbackGetBotList() {\n    @Override\n    public void onRequestSucceed(List ScorocodeBot  botList) {\n        //sdk returned bot list\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".getBotsList(callback)"
        }, 
        {
            "location": "/Java/Bot/#createbotbotinfo-callback", 
            "text": "Method for create a new bot.     Parameter  Type  Properties  Description  Example      botInfo  ScorocodeBot  Mandatory  Class that contains bot information  See the example below    callback  CallbackCreateBot  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nString botName =  scorocodeSdkTestBotName ;\nString telegramBotId =  scorocodeSdkTestTelegramBotId ;\nString scriptId = \u201c584fba2c42d52f1ba275fdb5\u201d;\n\nScorocodeBot botInfo = new ScorocodeBot(botName, telegramBotId, scriptId, false);\nBot bot = new Bot();\nbot.createBot(botInfo, new CallbackCreateBot() {\n    @Override\n    public void onBotCreated(ScorocodeBot bot) {\n          //bot created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during bot creation        \n    }\n});", 
            "title": ".createBot(botInfo, callback)"
        }, 
        {
            "location": "/Java/Bot/#updatebotbotid-newbotinfo-callback", 
            "text": "Method for updating a bot that already exists     Parameter  Type  Properties  Description  Example      botId  String  Mandatory  Scorocode bot identifier  See the example below    newBotInfo  ScorocodeBot  Mandatory  Class that contains bot information  See the example below    callback  CallbackUpdateBot  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nString botId = \u201c584fba2c42d52f1ba275fdb5\u201d;\n\nScorocodeBot newBotInfo = new ScorocodeBot( updated +botName,  updated + telegramBotId, scriptId, false);\n\nBot bot = new Bot();\nbot.updateBot(botId, newBotInfo, new CallbackUpdateBot() {\n    @Override\n    public void onBotUpdated(ScorocodeBot bot) {\n        //bot updated\n    }\n\n    @Override\n    public void onUpdateFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".updateBot(botId, newBotInfo, callback)"
        }, 
        {
            "location": "/Java/Bot/#deletebotbotid-callback", 
            "text": "Method for deleteing a bot     Parameter  Type  Properties  Description  Example      botId  String  Mandatory  Scorocode bot identifier  See the example below    callback  CallbackDeleteBot  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nString botId = \u201c584fba2c42d52f1ba275fdb5\u201d;\n\nBot bot = new Bot();\nbot.deleteBot(botId, new CallbackDeleteBot() {\n    @Override\n    public void onBotDeleted() {\n        //bot deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".deleteBot(botId, callback)"
        }, 
        {
            "location": "/Java/Collections/", 
            "text": "Collections\n\n\nnew Collections()\n\n\n.getCollectionsList(callback)\n\n\n.getCollectionByName(collectionName, callback)\n\n\n.createCollection(collection, callback)\n\n\n.updateCollcetion(collectionId, collection, callback)\n\n\n.cloneCollection(collectionId, collectionName, callback)\n\n\n.createCollectionIndex(collectionName, index, callback)\n\n\n.deleteCollectionIndex(collectionName, indexName, callback)\n\n\n.updateCollectionTriggers(collectionName, triggers, callback)\n\n\n.createCollectionField(collectionName, field, callback)\n\n\n.deleteCollectionField(collectionName, fieldName, callback)\n\n\n.deleteCollection(collectionId, callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew Collections()\n\n\nConstructor Collections\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\n\n\n\n\n\nMasterKey\n\n\nYou should initialise SDK with MasterKey to use Collections methods.\n\n\n\n\n\n\n\n\n.getCollectionsList(callback)\n\n\nMethod for retrieving an application collections list.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncallback\n\n\nCallbackGetCollectionsList\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\ncollections.getCollectionsList(new CallbackGetCollectionsList() {\n    @Override\n    public void onRequestSucceed(List\nScorocodeCollection\n collections) {\n        //sdk returned collections list\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.getCollectionByName(collectionName, callback)\n\n\nMethod for retrieving a collection info by it's name.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nCollection name\n\n\n\u201ctestcollection\u201d\n\n\n\n\n\n\ncallback\n\n\nCallbackGetCollection\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\ncollections.getCollectionByName(\ntestCollection\n, new CallbackGetCollection() {\n    @Override\n    public void onRequestSucceed(ScorocodeCollection collection) {\n        //sdk returned the collection\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.createCollection(collection, callback)\n\n\nMethod for creating new collection\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollection\n\n\nScorocodeCollection\n\n\nMandatory\n\n\nClass that contains new collection info\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackCreateCollection\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nScorocodeCollection newCollection = new ScorocodeCollection()\n        .setCollectionName(\u201ctestcollection\u201d)\n        .setUseDocsACL(false)\n        .setACL(getTestACL());\n\nCollections collections = new Collections();\ncollections.createCollection(newCollection, new CallbackCreateCollection() {\n    @Override\n    public void onCollectionCreated(ScorocodeCollection collection) {\n        //collection created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.updateCollcetion(collectionId, collection, callback)\n\n\nMethod fot Updating the existing collection\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionId\n\n\nString\n\n\nMandatory\n\n\nCollection identifier\n\n\n\u201c584fba2c42d52f1ba275fdb\u201d\n\n\n\n\n\n\ncollection\n\n\nScorocodeCollection\n\n\nMandatory\n\n\nClass that contains collection info\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackUpdateCollection\n\n\nMandatory\n\n\n\u0421allback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\n\nScorocodeCollection collection = new ScorocodeCollection()\n        .setCollectionName(\nupdatedcollection\u201d))\n        .setUseDocsACL(false)\n        .setACL(getTestACL());\n\ncollections.updateCollection(\u201cahfdsjlsdlffdsdsa\u201d, collection, new CallbackUpdateCollection() {\n    @Override\n    public void onCollectionUpdated(ScorocodeCollection collection) {\n        //collection updated\n    }\n\n    @Override\n    public void onUpdateFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.cloneCollection(collectionId, collectionName, callback)\n\n\nMethod for collection clone creation.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionId\n\n\nString\n\n\nMandatory\n\n\nCollection identifier\n\n\n\u201c584fba2c42d52f1ba275fdb\u201d\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nNew collection name\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackCloneCollection\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\ncollections.cloneCollection(\u201casdhjkasdjska\u201d, \nclonedtestcollection\u201d), new CallbackCloneCollection() {\n    @Override\n    public void onCollectionCloned(ScorocodeCollection collection) {\n        //collection cloned\n    }\n\n    @Override\n    public void onCloneOperationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.createCollectionIndex(collectionName, index, callback)\n\n\nMethod for collection index creation\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nCollection name\n\n\n\"testcoll\"\n\n\n\n\n\n\nindex\n\n\nIndex\n\n\nMandatory\n\n\nClass that contains index information\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackCreateCollectionIndex\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nList\nIndexField\n indexFields = new ArrayList\n();\nindexFields.add(new IndexField(\nreadACL\n, 1));\n\nIndex index = new Index(\u201cnewindex\u201d, indexFields);\n\nCollections collections = new Collections();\ncollections.createCollectionIndex(\u201ctestcollection\u201d, index, new CallbackCreateCollectionIndex() {\n    @Override\n    public void onIndexCreated() {\n        //index created\n    }\n\n    @Override\n    public void onIndexCreationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.deleteCollectionIndex(collectionName, indexName, callback)\n\n\nMethod for collection index deletion\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nCollection name\n\n\n\"testcoll\"\n\n\n\n\n\n\nindexName\n\n\nString\n\n\nMandatory\n\n\nIndex name\n\n\n\"testindex\"\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteCollectionIndex\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\ncollections.deleteCollectionIndex(testCollection.getCollectionName(), INDEX_NAME, new CallbackDeleteCollectionIndex() {\n    @Override\n    public void onIndexDeleted() {\n        //index deleted\n    }\n\n    @Override\n    public void onIndexDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.updateCollectionTriggers(collectionName, triggers, callback)\n\n\nMethod for updating collection triggers\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nCollection name\n\n\n\"testcoll\"\n\n\n\n\n\n\ncollection\n\n\nScorocodeCollection\n\n\nMandatory\n\n\nClass that contains Trigger info\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackUpdateCollectionTriggers\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nboolean isActive = false;\nScorocodeTriggers triggers = new ScorocodeTriggers();\ntriggers.setBeforeInsert(new Trigger(\nBFI code\n, isActive));\ntriggers.setAfterInsert(new Trigger(\nAFI code\n, isActive));\ntriggers.setBeforeRemove(new Trigger(\nBFR code\n, isActive));\ntriggers.setAfterRemove(new Trigger(\nAFR code\n, isActive));\ntriggers.setBeforeUpdate(new Trigger(\nBFU code\n, isActive));\ntriggers.setAfterUpdate(new Trigger(\nAFU code\n, isActive));\n\nCollections collections = new Collections();\ncollections.updateCollectionTriggers(\u201ctestcollection\u201d, triggers, new CallbackUpdateCollectionTriggers() {\n    @Override\n    public void onTriggersUpdated(ScorocodeTriggers triggers) {\n        //trigger updated\n    }\n\n    @Override\n    public void onUpdateFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.createCollectionField(callback)\n\n\nMethod for creating collection field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nCollection name\n\n\n\"testcoll\"\n\n\n\n\n\n\nfield\n\n\nScorocodeField\n\n\nMandatory\n\n\nClass that contains field's info\n\n\nSee the example below\n\n\n\n\n\n\ncallback\n\n\nCallbackAddField\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nScorocodeField field = new ScorocodeField(\ntestnumberfield\n, ScorocodeTypes.TypeNumber, \n, false, false, false);\n\nCollections collections = new Collections();\ncollections.createCollectionField(\u201ctestcollection\u201d, field, new CallbackAddField() {\n    @Override\n    public void onFieldAdded(ScorocodeField field) {\n        //field created\n    }\n\n    @Override\n    public void onAddFieldFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.deleteCollectionField(collectionName, fieldName, callback)\n\n\nMethod for deleteing collection field\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionName\n\n\nString\n\n\nMandatory\n\n\nCollection idenifier\n\n\n\"Testcoll\"\n\n\n\n\n\n\nfieldName\n\n\nString\n\n\nMandatory\n\n\nField name\n\n\n\"testfield\"\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteField\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\ncollections.deleteCollectionField(\u201ctestcoll\u201d, \ntestnumberfield\n, new CallbackDeleteField() {\n    @Override\n    public void onFieldDeleted(ScorocodeCollection collection) {\n        //field deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.deleteCollection(collectionId, callback)\n\n\nMethod for deleteing collection and all it's documents\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nProperties\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncollectionId\n\n\nString\n\n\nMandatory\n\n\nCollection idenifier\n\n\n\"584fba2c42d52f1ba275fdb\"\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteCollection\n\n\nMandatory\n\n\nCallback for the request being executed\n\n\nSee the example below\n\n\n\n\n\n\n\n\nExample\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nCollections collections = new Collections();\ncollections.deleteCollection(\u201csdfjksdlf2312fdsj\u201d, new CallbackDeleteCollection() {\n    @Override\n    public void onCollectionDeleted() {\n        //collection deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCodes, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": "Collections"
        }, 
        {
            "location": "/Java/Collections/#new-collections", 
            "text": "Constructor Collections  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();   MasterKey  You should initialise SDK with MasterKey to use Collections methods.", 
            "title": "new Collections()"
        }, 
        {
            "location": "/Java/Collections/#getcollectionslistcallback", 
            "text": "Method for retrieving an application collections list.     Parameter  Type  Properties  Description  Example      callback  CallbackGetCollectionsList  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\ncollections.getCollectionsList(new CallbackGetCollectionsList() {\n    @Override\n    public void onRequestSucceed(List ScorocodeCollection  collections) {\n        //sdk returned collections list\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".getCollectionsList(callback)"
        }, 
        {
            "location": "/Java/Collections/#getcollectionbynamecollectionname-callback", 
            "text": "Method for retrieving a collection info by it's name.     Parameter  Type  Properties  Description  Example      collectionName  String  Mandatory  Collection name  \u201ctestcollection\u201d    callback  CallbackGetCollection  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\ncollections.getCollectionByName( testCollection , new CallbackGetCollection() {\n    @Override\n    public void onRequestSucceed(ScorocodeCollection collection) {\n        //sdk returned the collection\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".getCollectionByName(collectionName, callback)"
        }, 
        {
            "location": "/Java/Collections/#createcollectioncollection-callback", 
            "text": "Method for creating new collection     Parameter  Type  Properties  Description  Example      collection  ScorocodeCollection  Mandatory  Class that contains new collection info  See the example below    callback  CallbackCreateCollection  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nScorocodeCollection newCollection = new ScorocodeCollection()\n        .setCollectionName(\u201ctestcollection\u201d)\n        .setUseDocsACL(false)\n        .setACL(getTestACL());\n\nCollections collections = new Collections();\ncollections.createCollection(newCollection, new CallbackCreateCollection() {\n    @Override\n    public void onCollectionCreated(ScorocodeCollection collection) {\n        //collection created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".createCollection(collection, callback)"
        }, 
        {
            "location": "/Java/Collections/#updatecollcetioncollectionid-collection-callback", 
            "text": "Method fot Updating the existing collection     Parameter  Type  Properties  Description  Example      collectionId  String  Mandatory  Collection identifier  \u201c584fba2c42d52f1ba275fdb\u201d    collection  ScorocodeCollection  Mandatory  Class that contains collection info  See the example below    callback  CallbackUpdateCollection  Mandatory  \u0421allback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\n\nScorocodeCollection collection = new ScorocodeCollection()\n        .setCollectionName( updatedcollection\u201d))\n        .setUseDocsACL(false)\n        .setACL(getTestACL());\n\ncollections.updateCollection(\u201cahfdsjlsdlffdsdsa\u201d, collection, new CallbackUpdateCollection() {\n    @Override\n    public void onCollectionUpdated(ScorocodeCollection collection) {\n        //collection updated\n    }\n\n    @Override\n    public void onUpdateFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".updateCollcetion(collectionId, collection, callback)"
        }, 
        {
            "location": "/Java/Collections/#clonecollectioncollectionid-collectionname-callback", 
            "text": "Method for collection clone creation.     Parameter  Type  Properties  Description  Example      collectionId  String  Mandatory  Collection identifier  \u201c584fba2c42d52f1ba275fdb\u201d    collectionName  String  Mandatory  New collection name  See the example below    callback  CallbackCloneCollection  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\ncollections.cloneCollection(\u201casdhjkasdjska\u201d,  clonedtestcollection\u201d), new CallbackCloneCollection() {\n    @Override\n    public void onCollectionCloned(ScorocodeCollection collection) {\n        //collection cloned\n    }\n\n    @Override\n    public void onCloneOperationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".cloneCollection(collectionId, collectionName, callback)"
        }, 
        {
            "location": "/Java/Collections/#createcollectionindexcollectionname-index-callback", 
            "text": "Method for collection index creation     Parameter  Type  Properties  Description  Example      collectionName  String  Mandatory  Collection name  \"testcoll\"    index  Index  Mandatory  Class that contains index information  See the example below    callback  CallbackCreateCollectionIndex  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nList IndexField  indexFields = new ArrayList ();\nindexFields.add(new IndexField( readACL , 1));\n\nIndex index = new Index(\u201cnewindex\u201d, indexFields);\n\nCollections collections = new Collections();\ncollections.createCollectionIndex(\u201ctestcollection\u201d, index, new CallbackCreateCollectionIndex() {\n    @Override\n    public void onIndexCreated() {\n        //index created\n    }\n\n    @Override\n    public void onIndexCreationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".createCollectionIndex(collectionName, index, callback)"
        }, 
        {
            "location": "/Java/Collections/#deletecollectionindexcollectionname-indexname-callback", 
            "text": "Method for collection index deletion     Parameter  Type  Properties  Description  Example      collectionName  String  Mandatory  Collection name  \"testcoll\"    indexName  String  Mandatory  Index name  \"testindex\"    callback  CallbackDeleteCollectionIndex  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\ncollections.deleteCollectionIndex(testCollection.getCollectionName(), INDEX_NAME, new CallbackDeleteCollectionIndex() {\n    @Override\n    public void onIndexDeleted() {\n        //index deleted\n    }\n\n    @Override\n    public void onIndexDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".deleteCollectionIndex(collectionName, indexName, callback)"
        }, 
        {
            "location": "/Java/Collections/#updatecollectiontriggerscollectionname-triggers-callback", 
            "text": "Method for updating collection triggers     Parameter  Type  Properties  Description  Example      collectionName  String  Mandatory  Collection name  \"testcoll\"    collection  ScorocodeCollection  Mandatory  Class that contains Trigger info  See the example below    callback  CallbackUpdateCollectionTriggers  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nboolean isActive = false;\nScorocodeTriggers triggers = new ScorocodeTriggers();\ntriggers.setBeforeInsert(new Trigger( BFI code , isActive));\ntriggers.setAfterInsert(new Trigger( AFI code , isActive));\ntriggers.setBeforeRemove(new Trigger( BFR code , isActive));\ntriggers.setAfterRemove(new Trigger( AFR code , isActive));\ntriggers.setBeforeUpdate(new Trigger( BFU code , isActive));\ntriggers.setAfterUpdate(new Trigger( AFU code , isActive));\n\nCollections collections = new Collections();\ncollections.updateCollectionTriggers(\u201ctestcollection\u201d, triggers, new CallbackUpdateCollectionTriggers() {\n    @Override\n    public void onTriggersUpdated(ScorocodeTriggers triggers) {\n        //trigger updated\n    }\n\n    @Override\n    public void onUpdateFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".updateCollectionTriggers(collectionName, triggers, callback)"
        }, 
        {
            "location": "/Java/Collections/#createcollectionfieldcallback", 
            "text": "Method for creating collection field     Parameter  Type  Properties  Description  Example      collectionName  String  Mandatory  Collection name  \"testcoll\"    field  ScorocodeField  Mandatory  Class that contains field's info  See the example below    callback  CallbackAddField  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nScorocodeField field = new ScorocodeField( testnumberfield , ScorocodeTypes.TypeNumber,  , false, false, false);\n\nCollections collections = new Collections();\ncollections.createCollectionField(\u201ctestcollection\u201d, field, new CallbackAddField() {\n    @Override\n    public void onFieldAdded(ScorocodeField field) {\n        //field created\n    }\n\n    @Override\n    public void onAddFieldFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".createCollectionField(callback)"
        }, 
        {
            "location": "/Java/Collections/#deletecollectionfieldcollectionname-fieldname-callback", 
            "text": "Method for deleteing collection field     Parameter  Type  Properties  Description  Example      collectionName  String  Mandatory  Collection idenifier  \"Testcoll\"    fieldName  String  Mandatory  Field name  \"testfield\"    callback  CallbackDeleteField  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\ncollections.deleteCollectionField(\u201ctestcoll\u201d,  testnumberfield , new CallbackDeleteField() {\n    @Override\n    public void onFieldDeleted(ScorocodeCollection collection) {\n        //field deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".deleteCollectionField(collectionName, fieldName, callback)"
        }, 
        {
            "location": "/Java/Collections/#deletecollectioncollectionid-callback", 
            "text": "Method for deleteing collection and all it's documents     Parameter  Type  Properties  Description  Example      collectionId  String  Mandatory  Collection idenifier  \"584fba2c42d52f1ba275fdb\"    callback  CallbackDeleteCollection  Mandatory  Callback for the request being executed  See the example below     Example  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nCollections collections = new Collections();\ncollections.deleteCollection(\u201csdfjksdlf2312fdsj\u201d, new CallbackDeleteCollection() {\n    @Override\n    public void onCollectionDeleted() {\n        //collection deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCodes, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".deleteCollection(collectionId, callback)"
        }, 
        {
            "location": "/Java/Folders/", 
            "text": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0430\u043f\u043a\u0430\u043c\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n\n\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n\n\n\n\nFolders\n\n\nnew Folders()\n\n\n.getFoldersList(pathToFolder, callback)\n\n\n.createFolder(pathToFolder, callback)\n\n\n.deleteFolder(pathToFolder, callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew Folders()\n\n\n\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 Folders\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nFolders folders = new Folders();\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\n\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Folders \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SDK \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c MasterKey.\n\n\n\n\n\n\n\n\n.getFoldersList(pathToFolder, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0430\u043f\u043e\u043a \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438.\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\npathToFolder\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\n\u041f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435\n\n\n\"server_scripts\"\n\n\n\n\n\n\ncallback\n\n\nCallbackGetFoldersList\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nFolders folders = new Folders();\nfolders.getFoldersList(\nserver_code\n, new CallbackGetFoldersList() {\n    @Override\n    public void onRequestSucceed(List\nScorocodeFolder\n folderList) {\n        //sdk returned list of folders\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.createFolder(pathToFolder, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\npathToFolder\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\n\u041f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435\n\n\n\"server_scripts\"\n\n\n\n\n\n\ncallback\n\n\nCallbackCreateNewFolder\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nFolders folders = new Folders();\nfolders.createFolder(\ntest_path\n, new CallbackCreateNewFolder() {\n    @Override\n    public void onFolderCreated() {\n        //folder created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.deleteFolder(pathToFolder, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\npathToFolder\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\n\u041f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435\n\n\n\"server_scripts\"\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteFolder\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nFolders folders = new Folders();\nfolders.deleteFolder(\nserver_code\n, new CallbackDeleteFolder() {\n    @Override\n    public void onFolderDeleted() {\n        //folder deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": "Folders"
        }, 
        {
            "location": "/Java/Folders/#new-folders", 
            "text": "\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 Folders  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nFolders folders = new Folders();   \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435  \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 Folders \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SDK \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c MasterKey.", 
            "title": "new Folders()"
        }, 
        {
            "location": "/Java/Folders/#getfolderslistpathtofolder-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0430\u043f\u043e\u043a \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438.     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      pathToFolder  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  \u041f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435  \"server_scripts\"    callback  CallbackGetFoldersList  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nFolders folders = new Folders();\nfolders.getFoldersList( server_code , new CallbackGetFoldersList() {\n    @Override\n    public void onRequestSucceed(List ScorocodeFolder  folderList) {\n        //sdk returned list of folders\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".getFoldersList(pathToFolder, callback)"
        }, 
        {
            "location": "/Java/Folders/#createfolderpathtofolder-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      pathToFolder  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  \u041f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435  \"server_scripts\"    callback  CallbackCreateNewFolder  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nFolders folders = new Folders();\nfolders.createFolder( test_path , new CallbackCreateNewFolder() {\n    @Override\n    public void onFolderCreated() {\n        //folder created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".createFolder(pathToFolder, callback)"
        }, 
        {
            "location": "/Java/Folders/#deletefolderpathtofolder-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      pathToFolder  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  \u041f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435  \"server_scripts\"    callback  CallbackDeleteFolder  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nFolders folders = new Folders();\nfolders.deleteFolder( server_code , new CallbackDeleteFolder() {\n    @Override\n    public void onFolderDeleted() {\n        //folder deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".deleteFolder(pathToFolder, callback)"
        }, 
        {
            "location": "/Java/ScorocodeScript/", 
            "text": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n\n\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n\n\n\n\nScorocodeScript\n\n\nnew ScorocodeScript()\n\n\n.createScript(script, callback)\n\n\n.getScriptById(scriptId, callback)\n\n\n.updateScript(scriptToUpdateId, newScriptInfo, callback)\n\n\n.deleteScript(scriptToDeleteId, callback)\n\n\n\n\n\n\n\n\n\n\n\n\nnew ScorocodeScript()\n\n\n\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 ScorocodeScript\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nScorocodeScript newScript = new ScorocodeScript();\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\n\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 ScorocodeScript \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SDK \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c MasterKey.\n\n\n\n\n\n\n\n\n.createScript(script, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\nscript\n\n\nScorocodeScript\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\n\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\ncallback\n\n\nCallbackCreateScript\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nScorocodeScript script = new ScorocodeScript();\nscript.setScriptName(\ntestscript.js\n);\nscript.setScriptPath(\ntestscript.js\n);\nnew Script().createScript(script, new CallbackCreateScript() {\n    @Override\n    public void onScriptCreated(ScorocodeScript script) {\n         //script created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during request         \n    }\n});\n\n\n\n\n\n\n\n.getScriptById(scriptId, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043f\u043e \u0435\u0433\u043e id.\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\nscriptId\n\n\nScorocodeScript\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nId \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\ncallback\n\n\nCallbackGetScriptById\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nScript script = new Script();\nscript.getScriptById(testScript.getScriptId(), new CallbackGetScriptById() {\n    @Override\n    public void onRequestSucceed(ScorocodeScript script) {\n        //sdk returned script\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.updateScript(scriptToUpdateId, newScriptInfo, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\nscriptToUpdateId\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nId \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430\n\n\n\"123434451234\"\n\n\n\n\n\n\nnewScriptInfo\n\n\nScorocodeScript\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\n\u041d\u043e\u0432\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\ncallback\n\n\nCallbackUpdateScript\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nScorocodeScript newScript = new ScorocodeScript()\n        .setScriptId(\nsdfsdfdsdsfdf\n)\n        .setScriptName(\ntestscript\n)\n        .setScriptSourceCode(\nupdated source code\n);\n\nScript script = new Script();\nscript.updateScript(\nassafdfsdf\n, newScript, new CallbackUpdateScript() {\n    @Override\n    public void onUpdateScriptSucceed(ScorocodeScript scorocodeScript) {\n        //script updated\n    }\n\n    @Override\n    public void onUpdateScriptFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});\n\n\n\n\n\n\n\n.deleteScript(scriptToDeleteId, callback)\n\n\n\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e \u0435\u0433\u043e id\n\n\n\n\n\n\n\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\n\n\n\u0422\u0438\u043f\n\n\n\u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430\n\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\n\n\n\n\n\n\n\n\nscriptToDeleteId\n\n\nString\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nId \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430\n\n\n\"fdsfsdfdsd\"\n\n\n\n\n\n\ncallback\n\n\nCallbackDeleteScript\n\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\n\nCallback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\n\u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435\n\n\n\n\n\n\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\nScorocodeSdk.initWith(\ndb8a1b41b8543397a798a181d9891b4c\n, \n563452bbc611d8106d5da767365897de\n, \n28f06b89b62165c33de55265166d8781\n, null, null, null, null);\n\nnew Script().deleteScript(scriptId, new CallbackDeleteScript() {\n    @Override\n    public void onScriptDeleted() {\n       //script deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": "ScorocodeScript"
        }, 
        {
            "location": "/Java/ScorocodeScript/#new-scorocodescript", 
            "text": "\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 ScorocodeScript  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nScorocodeScript newScript = new ScorocodeScript();   \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435  \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 ScorocodeScript \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SDK \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c MasterKey.", 
            "title": "new ScorocodeScript()"
        }, 
        {
            "location": "/Java/ScorocodeScript/#createscriptscript-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      script  ScorocodeScript  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435    callback  CallbackCreateScript  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nScorocodeScript script = new ScorocodeScript();\nscript.setScriptName( testscript.js );\nscript.setScriptPath( testscript.js );\nnew Script().createScript(script, new CallbackCreateScript() {\n    @Override\n    public void onScriptCreated(ScorocodeScript script) {\n         //script created\n    }\n\n    @Override\n    public void onCreationFailed(String errorCode, String errorMessage) {\n        //error during request         \n    }\n});", 
            "title": ".createScript(script, callback)"
        }, 
        {
            "location": "/Java/ScorocodeScript/#getscriptbyidscriptid-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043f\u043e \u0435\u0433\u043e id.     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      scriptId  ScorocodeScript  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Id \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435    callback  CallbackGetScriptById  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nScript script = new Script();\nscript.getScriptById(testScript.getScriptId(), new CallbackGetScriptById() {\n    @Override\n    public void onRequestSucceed(ScorocodeScript script) {\n        //sdk returned script\n    }\n\n    @Override\n    public void onRequestFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".getScriptById(scriptId, callback)"
        }, 
        {
            "location": "/Java/ScorocodeScript/#updatescriptscripttoupdateid-newscriptinfo-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      scriptToUpdateId  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Id \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430  \"123434451234\"    newScriptInfo  ScorocodeScript  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  \u041d\u043e\u0432\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0435  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435    callback  CallbackUpdateScript  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nScorocodeScript newScript = new ScorocodeScript()\n        .setScriptId( sdfsdfdsdsfdf )\n        .setScriptName( testscript )\n        .setScriptSourceCode( updated source code );\n\nScript script = new Script();\nscript.updateScript( assafdfsdf , newScript, new CallbackUpdateScript() {\n    @Override\n    public void onUpdateScriptSucceed(ScorocodeScript scorocodeScript) {\n        //script updated\n    }\n\n    @Override\n    public void onUpdateScriptFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".updateScript(scriptToUpdateId, newScriptInfo, callback)"
        }, 
        {
            "location": "/Java/ScorocodeScript/#deletescriptscripttodeleteid-callback", 
            "text": "\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e \u0435\u0433\u043e id     \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440  \u0422\u0438\u043f  \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u0430  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435  \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f      scriptToDeleteId  String  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Id \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430  \"fdsfsdfdsd\"    callback  CallbackDeleteScript  \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439  Callback, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.  \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435     \u041f\u0440\u0438\u043c\u0435\u0440  ScorocodeSdk.initWith( db8a1b41b8543397a798a181d9891b4c ,  563452bbc611d8106d5da767365897de ,  28f06b89b62165c33de55265166d8781 , null, null, null, null);\n\nnew Script().deleteScript(scriptId, new CallbackDeleteScript() {\n    @Override\n    public void onScriptDeleted() {\n       //script deleted\n    }\n\n    @Override\n    public void onDeletionFailed(String errorCode, String errorMessage) {\n        //error during request\n    }\n});", 
            "title": ".deleteScript(scriptToDeleteId, callback)"
        }, 
        {
            "location": "/Java/Storehouse/", 
            "text": "\"Storehouse\" Application\n\n\nThis documentation includes description of the \"Storehouse\" application development process on the Scorocode platform as a demo. The application source code is available  in the following repository: \nhttps://github.com/Scorocode/scorocode-sample-storehouse\n.\n\n\nThe application is made to manage mobile phones stock inside a dealer storehouse and allows you to: \n\n\n\n\nRegister a new user in the application database\n\n\nAuthenticate an application user\n\n\nDe-authenticate an application user\n\n\nView available mobile phone models on stock in the storehouse  \n\n\nAdd a mobile phone model in the database\n\n\nDelete a mobile phone model from the database\n\n\nView full information about a mobile phone model\n\n\nChange information about a mobile phone model\n\n\nSelect a certain mobile phone from a list using a filter\n\n\nAdd a user on the waiting list for this phone model\n\n\nShip this mobile phone model to the user\n\n\nNotify the accounting department about the shipment using an email message\n\n\nNotify a storehouse loading worker with a push message\n\n\nNotify a courier with an sms message\n\n\nUpdate the company's balance sheet taking into account the recent mobile phone shipment\n\n\n\n\nApplication Data Structure.\n\n\nLet's create the \nstorehouse\n collection with the following fields:\n\n\n\n\nplatform (String)\n\n\ncameraInfo (String)\n\n\ndeviceName (String)\n\n\ncolorsAvailable (Array)\n\n\ndevicePrice (Number)\n\n\nbuyers (Array)\n\n\nlastSend (Date)\n\n\nsendInfo (File)\n\n\n\n\nWe add 3 documents inside the system collection \nRoles\n with the following corresponding values for the \nname\n field:\n\n\n\n\ndeliveryPerson\n\n\naccountantPerson\n\n\nloaderPerson\n\n\n\n\nApplication Launch Screen.\n\n\nLet's create a launch screen for our application and call it \nLoginActivity\n. To do so we will go \nFile \u2192 New \u2192 Activity \u2192 Empty Activity\n in Android Studio and add the following code in the layout file of the Activity:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nRelativeLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:id=\n@+id/activity_login\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:paddingBottom=\n@dimen/activity_vertical_margin\n\n    android:paddingLeft=\n@dimen/activity_horizontal_margin\n\n    android:paddingRight=\n@dimen/activity_horizontal_margin\n\n    android:paddingTop=\n@dimen/activity_vertical_margin\n\n    tools:context=\nprof_itgroup.ru.storehouseapp.Activities.LoginActivity\n\n    \nLinearLayout\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        android:gravity=\ncenter\n\n        android:orientation=\nvertical\n\n        \nTextView\n            style=\n@style/label_style\n\n            android:layout_marginTop=\n16dp\n\n            android:text=\n@string/login\n /\n\n        \nEditText\n            android:id=\n@+id/etEmail\n\n            android:gravity=\ncenter\n\n            style=\n@style/textStyle\n\n            android:hint=\n@string/login_hint\n /\n\n        \nTextView\n            style=\n@style/label_style\n\n            android:layout_marginTop=\n16dp\n\n            android:text=\n@string/password\n/\n\n        \nEditText\n            android:gravity=\ncenter\n\n            android:id=\n@+id/etPassword\n\n            style=\n@style/textStyle\n\n            android:hint=\n@string/password_hint\n\n            android:inputType=\ntextPassword\n\n            android:maxLines=\n1\n /\n\n        \nLinearLayout\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n\n            android:gravity=\ncenter_horizontal\n\n            android:orientation=\nvertical\n\n            \nButton\n                android:id=\n@+id/btnLogin\n\n                android:layout_width=\nmatch_parent\n\n                android:layout_height=\nwrap_content\n\n                android:layout_marginTop=\n4dp\n\n                android:text=\n@string/login_button_text\n /\n\n            \nButton\n                android:id=\n@+id/btnRegister\n\n                android:layout_width=\nmatch_parent\n\n                android:layout_height=\nwrap_content\n\n                android:layout_marginTop=\n4dp\n\n                android:text=\n@string/register_button_text\n /\n\n        \n/LinearLayout\n\n    \n/LinearLayout\n\n\n/RelativeLayout\n\nThe launch screen of the \nLoginActivity\n class is shown in Figure 1.1. \n\n\n\n\nFigure 1.1 \u2013 application launch screen.\n\n\nLet's add the following code lines in the \nonCreate\n method of the \nLoginActivity\n class:\n\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_login);\n    if (isUserLogined(this)) {\n        MainActivity.display(this);\n    }\n    ScorocodeSdk.initWith(APPLICATION_ID, CLIENT_KEY, null, FILE_KEY, MESSAGE_KEY, SCRIPT_KEY, null);\n    ButterKnife.bind(this);\n}\n\n\n\nScorocodeSdk\n initialization is happening in the \nonCreate\n method with keys \nappId\n, \nclientKey\n (android), \nfileKey\n, \nmessageKey\n, \nscriptKey\n using the \nScorocodeSdk.initWith(...)\n method. These keys can be viewed at the \u00abSecurity\u00bb tab in the project Settings.\n\n\nOn this screen, a database user can enter their system login and password. The application will check whether they are correct using the \n.login()\n method of the \nUser\n class. This method is demonstrated in a listing:\n\n\n@OnClick(R.id.btnLogin)\npublic void onBtnLoginClicked() {\n    User user = new User();\n    user.login(etEmail.getText().toString(), etPassword.getText().toString(), new CallbackLoginUser() {\n        @Override\n        public void onLoginSucceed(ResponseLogin responseLogin) {\n            DocumentInfo userInfo = responseLogin.getResult().getUserInfo();\n            saveUserInfo(userInfo);\n            MainActivity.display(LoginActivity.this);\n        }\n        @Override\n        public void onLoginFailed(String errorCode, String errorMessage) {\n            Helper.showToast(getBaseContext(), R.string.error_login);\n        }\n    });\n}\n\n\n\nIn this method, we create a new sample of the \nUser\n class and run its \nlogin\n method. The information about a user's email and password is taken from the corresponding \nEditText\n. The \nlogin\n method will check that a user with this email and this password exists in the \u00abusers\u00bb collection.\n\n\nIn case such user exists in the \u00abusers\u00bb collection, the \nonLoginSucceed(...) callback\n method will be executed. Otherwise it the \nonFoginFailed(...)\n method that will be executed. Thus, we can be sure whether such user exists in our database and act accordingly.\n\n\nOn the launch screen (see illustration 1.1) we also have the \u00abRegister\u00bb button which allows to register a new user in the system (add to the \u00abusers\u00bb database collection). Let's connect this button to the button click handler which opens an Activity with user's data needed for registration:\n\n\n@OnClick(R.id.btnRegister)\npublic void onBtnRegisterClicked() {\n    RegisterActivity.display(this);\n}\n\n\n\nNew User Registration Screen.\n\n\nLet's create an new Activity called \nRegisterActivity\n and add the following xml code in the layout file of this Activity:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:id=\n@+id/activity_register\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:gravity=\ncenter_horizontal\n\n    android:orientation=\nvertical\n\n    android:paddingBottom=\n@dimen/activity_vertical_margin\n\n    android:paddingLeft=\n@dimen/activity_horizontal_margin\n\n    android:paddingRight=\n@dimen/activity_horizontal_margin\n\n    android:paddingTop=\n@dimen/activity_vertical_margin\n\n    tools:context=\nprof_itgroup.ru.storehouseapp.Activities.RegisterActivity\n\n    \nTextView\n        style=\n@style/label_style\n\n        android:text=\n@string/register_username\n /\n\n    \nEditText\n        android:id=\n@+id/etUsername\n\n        style=\n@style/textStyle\n\n        android:hint=\n@string/register_username_hint\n/\n\n    \nTextView\n        android:layout_marginTop=\n16dp\n\n        style=\n@style/label_style\n\n        android:text=\n@string/register_email\n /\n\n    \nEditText\n        android:id=\n@+id/etEmail\n\n        style=\n@style/textStyle\n\n        android:hint=\n@string/register_email_hint\n/\n\n    \nTextView\n        android:layout_marginTop=\n16dp\n\n        style=\n@style/label_style\n\n        android:text=\n@string/register_password\n /\n\n    \nEditText\n        android:id=\n@+id/etPassword\n\n        style=\n@style/textStyle\n\n        android:inputType=\ntextPassword\n\n        android:hint=\n@string/register_email_password\n/\n\n    \nEditText\n        android:id=\n@+id/etPasswordCheck\n\n        style=\n@style/textStyle\n\n        android:inputType=\ntextPassword\n\n        android:hint=\n@string/register_email_password_again\n/\n\n    \nButton\n        android:layout_marginTop=\n32dp\n\n        android:id=\n@+id/btnRegister\n\n        style=\n@style/textStyle\n\n        android:text=\n@string/btn_register_text\n/\n\n\n/LinearLayout\n\nThis Activity is a new user registration screen, as shown in Figure 1.2\n\n\n\n\nFigure 1.2 \u2014 a new user registration screen.\n\n\nAll document fields needed for a user registration are listed on this screen. Let's add the button click event handler for the \u00abRegister\u00bb button which will run the \n.register\n method of the \nUser\n class, as shown below:\n\n\n@OnClick(R.id.btnRegister)\npublic void onBtnRegisterClicked() {\n    String userName = etUsername.getText().toString();\n    String email = etEmail.getText().toString();\n    String password = etPassword.getText().toString();\n    String passwordCheck = etPasswordCheck.getText().toString();\n\n    if(isInputValid(userName, email, password, passwordCheck)) {\n        new User().register(userName, email, password, new CallbackRegisterUser() {\n            @Override\n            public void onRegisterSucceed() {\n                Toast.makeText(RegisterActivity.this, getResources().getString(R.string.register_succeed), Toast.LENGTH_SHORT).show();\n                LoginActivity.display(RegisterActivity.this);\n            }\n            @Override\n            public void onRegisterFailed(String errorCode, String errorMessage) {\n                Toast.makeText(RegisterActivity.this, getResources().getString(R.string.error_register), Toast.LENGTH_SHORT).show();\n            }\n        });\n    } else {\n        Toast.makeText(this, getResources().getString(R.string.wrong_data) , Toast.LENGTH_SHORT).show();\n    }\n}\n\n\n\nIn this method, we get values entered in the \nEditText\n elements, e.g.: a user name, their email, password and repeated password (for a check).\n\n\nThen using the isInputValid method we check that the fields are not left empty and that the values, entered into the two password fields are identical. Afterwards, we can run the \n.register\n method of the \nUser\n class.\n\n\nIn case the user registration was a success (i.e. if the SDK is initiated, all keys are correct and there is no conflict with existing users), the interface \nonRegisterSucceed(...) callback\n method will be executed. Otherwise it is the \nonRegisterFailed(...)\n method that will be executed.\n\n\nIn this case, if the registration is a success, a Toast message will be shown with a note that the user is registered. Then the \nLoginActivity\n activity begins so that the user can log in and start working with the application.\n\n\nApplication Main Screen.\n\n\nLet's create the application main page called \nMainActivity\n and add the following xml code in the layout file of this Activity:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nRelativeLayout\n    xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:id=\n@+id/activity_main\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:paddingLeft=\n@dimen/activity_horizontal_margin\n\n    android:paddingRight=\n@dimen/activity_horizontal_margin\n\n    android:paddingTop=\n@dimen/activity_vertical_margin\n\n    android:paddingBottom=\n@dimen/activity_vertical_margin\n\n    tools:context=\nprof_itgroup.ru.storehouseapp.Activities.MainActivity\n\n    \nListView\n        android:id=\n@+id/lvItemsInStorehouse\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n/\n\n\n/RelativeLayout\n\n\n\nThis is the \nListView\n Activity which we fill with the data about goods stored in the database. In addition, the Activity contains \nActionBar\n icons. We will talk about them in some detail later on. \n\n\nLet's create an adapter called \nStoreItemAdapter\n to show us the data with the following code: \n\n\npackage prof_itgroup.ru.storehouseapp.Objects;\nimport android.content.Context;\nimport android.support.annotation.NonNull;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.TextView;\nimport java.util.List;\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport prof_itgroup.ru.storehouseapp.Activities.ItemDetailsActivity;\nimport prof_itgroup.ru.storehouseapp.R;\nimport ru.profit_group.scorocode_sdk.scorocode_objects.DocumentInfo;\n\npublic class StoredItemsAdapter extends BaseAdapter {\n    private Context context;\n    private List\nDocumentInfo\n storedItems;\n    private int layoutId;\n    private LayoutInflater inflater;\n    private DocumentFields fields;\n    public StoredItemsAdapter(Context context, @NonNull List\nDocumentInfo\n storedItems, int layoutId) {\n        this.context = context;\n        this.storedItems = storedItems;\n        this.layoutId = layoutId;\n        inflater = LayoutInflater.from(context);\n        fields = new DocumentFields(context, null);\n    }\n    @Override\n    public int getCount() {\n        return storedItems.size();\n    }\n    @Override\n    public Object getItem(int position) {\n        return storedItems.get(position);\n    }\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n    @Override\n    public View getView(int position, View view, ViewGroup parent) {\n        ViewHolder holder;\n        if (view != null) {\n            holder = (ViewHolder) view.getTag();\n        } else {\n            view = inflater.inflate(layoutId, parent, false);\n            holder = new ViewHolder(view);\n            view.setTag(holder);\n        }\n        customizeView(view, holder, storedItems.get(position));\n        return view;\n    }\n    private void customizeView(View view, ViewHolder holder, final DocumentInfo documentInfo) {\n        String deviceName = (String) documentInfo.getFields().get(fields.getDeviceNameField());\n        String devicePlatform = (String) documentInfo.getFields().get(fields.getPlatformField());\n        Double devicePrice = (Double) documentInfo.getFields().get(fields.getDevicePriceField());\n        holder.tvStoredItemName.setText(deviceName);\n        holder.tvStoredItemStatus.setText(devicePlatform);\n        holder.tvStoredItemPrice.setText(String.valueOf(devicePrice));\n        view.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ItemDetailsActivity.display(context, documentInfo);\n            }\n        });\n    }\n    static class ViewHolder {\n        @BindView(R.id.tvStoredItemName) TextView tvStoredItemName;\n        @BindView(R.id.tvStoredItemPlatform) TextView tvStoredItemStatus;\n        @BindView(R.id.tvStoredItemPrice) TextView tvStoredItemPrice;\n        public ViewHolder(View view) {\n            ButterKnife.bind(this, view);\n        }\n    }\n}\n\n\n\nWe will use the following layout file as a list element:\n\n\n \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nRelativeLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:orientation=\nhorizontal\n\n    android:padding=\n8dp\n\n    \nTextView\n        android:id=\n@+id/tvStoredItemName\n\n        style=\n@style/textStyle\n\n        android:layout_alignParentLeft=\ntrue\n\n        android:layout_toLeftOf=\n@+id/tvStoredItemPlatform\n\n        android:text=\n@string/storedItemName\n /\n\n    \nTextView\n        android:id=\n@+id/tvStoredItemPlatform\n\n        style=\n@style/textStyle\n\n        android:layout_marginRight=\n32dp\n\n        android:layout_toLeftOf=\n@+id/tvStoredItemPrice\n\n        android:text=\n@string/storedItemStatus\n /\n\n    \nTextView\n        android:id=\n@+id/tvStoredItemPrice\n\n        style=\n@style/textStyle\n\n        android:layout_alignParentRight=\ntrue\n\n        android:text=\n@string/storedItemPrice\n /\n\n\n/RelativeLayout\n\n\n\nWe will get the data about stored goods in the \nonResume()\n method of the \nMainActivity\nActivity. For this let's add the following code lines in the \nonResume\n method:\n\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    Query query = new Query(COLLECTION_NAME);\n    query.findDocuments(new CallbackFindDocument() {\n        @Override\n        public void onDocumentFound(List\nDocumentInfo\n documentInfos) {\n            if(documentInfos != null) {\n                setAdapter(documentInfos);\n            }\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            Toast.makeText(MainActivity.this, getResources().getString(R.string.error_get_docs), Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n\n\n\nIn this code we create a \nQuery\n object sample without setting any parameters (i.e. we choose the first 100 documents from this collection) and then we get the documents from our collection with the \nfindDocument\n method.\n\n\nIn case we were successful in finding the documents, we install the adapter. Otherwise, we transmit the error message.\n\n\nLet's also add the icons we need in the \nActionBar\n Activity. For this, we will create the \nmain_activity_menu\n layout file and add the following xml code:\n\n\nmenu xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n    \nitem\n        android:id=\n@+id/action_add_item\n\n        android:icon=\n@drawable/ic_create_new_folder_white_24dp\n\n        android:title=\n@string/action_add_item\n\n        app:showAsAction=\nalways\n/\n\n    \nitem\n        android:id=\n@+id/action_set_filter\n\n        android:icon=\n@drawable/ic_filter_list_white_24dp\n\n        android:title=\n@string/action_filter_item\n\n        app:showAsAction=\nifRoom\n/\n\n    \nitem\n        android:id=\n@+id/action_logout\n\n        android:icon=\n@drawable/ic_exit_to_app_white_24dp\n\n        android:title=\n@string/action_logout_item\n\n        app:showAsAction=\nifRoom\n/\n\n\n\n/menu\n\n\n\nThis means that we will show icons \"Add an item to the database\", \"Set a filter\" and \"Logout\" in the  \nActionBar\n. We can add these icons to the activity screen with the following code lines:\n\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main_activity_menu, menu);\n    return super.onCreateOptionsMenu(menu);\n}\n\n\n\nWe will handle icons clicks with the method described below:\n\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case R.id.action_add_item:\n            AddItemActivity.display(this);\n            break;\n\n        case R.id.action_set_filter:\n            new FilterDialog(this).showFilterDialog(new FilterDialog.CallbackFilterDialog() {\n                @Override\n                public void onFilterApplied(List\nDocumentInfo\n documentInfo) {\n                    setAdapter(documentInfo);\n                }\n            });\n            break;\n\n        case R.id.action_logout:\n            LoginActivity.logout(this);\n            break;\n    }\n    return super.onOptionsItemSelected(item);\n}\n\n\n\nThe completed screen for this activity is shown in Figure 2.1\n\n\n\n\nFigure 2.1 \u2014 main application screen\n\n\nOn this screen, we can see available mobile phone models which are kept in our storehouse. The following icons are shown in the right upper corner:\n\n\n - Add new item (mobile phone model) to the database.\n\n\n - Apply a filter to the list of items.\n\n\n - End an active session (logout).    \n\n\nAfter clicking on the \n button, a user switches to the item adding screen of the application. \n\n\nAdd an Item Screen\n\n\nLet's create an Acitivity called \nAddItemActivity\n and add the folowing xml code to its layout file:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:id=\n@+id/activity_add_item\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:orientation=\nvertical\n\n    android:padding=\n8dp\n\n    tools:context=\nprof_itgroup.ru.storehouseapp.Activities.AddItemActivity\n\n    \nScrollView\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \ninclude layout=\n@layout/item_core\n/\n\n    \n/ScrollView\n\n\n/LinearLayout\n\n\n\nIn turn, the activated item_core.xml file represents of the following lines:\n\n\nLinearLayout android:layout_width=\nmatch_parent\n\n    android:layout_height=\nwrap_content\n\n    android:orientation=\nvertical\n\n    xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \nTextView\n        style=\n@style/label_style\n\n        android:text=\n@string/add_item_device_name\n /\n\n    \nEditText\n        android:id=\n@+id/etDeviceName\n\n        style=\n@style/textStyle\n\n        android:hint=\n@string/add_item_hint_device_name\n /\n\n    \nTextView\n        style=\n@style/label_style\n\n        android:text=\n@string/add_item_device_platform\n /\n\n    \nEditText\n        android:id=\n@+id/etDevicePlatform\n\n        style=\n@style/textStyle\n\n        android:hint=\n@string/add_item_hint_device_platform\n /\n\n    \nTextView\n        style=\n@style/label_style\n\n        android:text=\n@string/add_item_camera_info\n /\n\n    \nEditText\n        android:id=\n@+id/etDeviceCameraInfo\n\n        style=\n@style/textStyle\n\n        android:hint=\n@string/add_item_hint_camera_info\n /\n\n    \nTextView\n        style=\n@style/label_style\n\n        android:text=\n@string/add_item_available_colors_info\n /\n\n    \nEditText\n        android:id=\n@+id/etDeviceColors\n\n        style=\n@style/textStyle\n\n        android:hint=\n@string/add_item_hint_available_colors_info\n /\n\n    \nLinearLayout\n        android:id=\n@+id/llChangeColorList\n\n        android:visibility=\ngone\n\n        android:gravity=\ncenter_horizontal\n\n        android:orientation=\nhorizontal\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \nButton\n            android:id=\n@+id/btnAddColor\n\n            android:padding=\n12dp\n\n            android:layout_marginRight=\n8dp\n\n            android:text=\n@string/add_color\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n        \nButton\n            android:id=\n@+id/btnRemoveColor\n\n            android:padding=\n12dp\n\n            android:layout_marginLeft=\n8dp\n\n            android:text=\n@string/remove_color\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n    \n/LinearLayout\n\n    \nTextView\n        style=\n@style/label_style\n\n        android:text=\n@string/add_item_price\n /\n\n    \nEditText\n        android:id=\n@+id/etDevicePrice\n\n        style=\n@style/textStyle\n\n        android:inputType=\nnumber\n\n        android:hint=\n@string/add_item_hint_available_amount_info\n /\n\n    \nLinearLayout\n        android:id=\n@+id/llChangePrice\n\n        android:visibility=\ngone\n\n        android:gravity=\ncenter_horizontal\n\n        android:orientation=\nhorizontal\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \nButton\n            android:id=\n@+id/btnIncreaseCount\n\n            android:padding=\n8dp\n\n            android:layout_marginRight=\n8dp\n\n            android:text=\n@string/increase_item_count\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n        \nButton\n            android:id=\n@+id/btnDecreaseCount\n\n            android:padding=\n8dp\n\n            android:layout_marginLeft=\n8dp\n\n            android:text=\n@string/decrease_item_count\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n    \n/LinearLayout\n\n    \nLinearLayout\n        android:orientation=\nvertical\n\n        android:gravity=\ncenter\n\n        android:layout_gravity=\ncenter\n\n        android:layout_width=\n200dp\n\n        android:layout_height=\nwrap_content\n\n        android:weightSum=\n1\n\n        \nButton\n            android:id=\n@+id/btnAddItem\n\n            android:padding=\n8dp\n\n            android:background=\n#64b5f6\n\n            android:textColor=\n@android:color/white\n\n            android:layout_width=\nmatch_parent\n\n            android:layout_height=\nwrap_content\n\n            android:layout_gravity=\ncenter_horizontal\n\n            android:layout_marginTop=\n8dp\n\n            android:text=\n@string/add\n /\n\n        \nButton\n            android:id=\n@+id/btnClear\n\n            android:padding=\n8dp\n\n            android:background=\n#64b5f6\n\n            android:textColor=\n@android:color/white\n\n            android:layout_width=\nmatch_parent\n\n            android:layout_height=\nwrap_content\n\n            android:layout_gravity=\ncenter_horizontal\n\n            android:layout_marginTop=\n8dp\n\n            android:text=\n@string/button_clear\n\n            android:layout_weight=\n0.22\n /\n\n    \n/LinearLayout\n\n\n/LinearLayout\n\n\n\nThe final activity screen is shown in Fugure 2.2\n\n\n\n\nFigure 2.2 \u2014 Add an Item screen.\n\n\nOn this screen, a user enters all necessary information about the device (item) and presses on the \u00abADD\u00bb button. With this, the program creates a new document, fills its fields and saves on a server. Let's add the following activities: defining a click handler for the \u00abADD\u00bb button which will run the method described below:\n\n\n@OnClick(R.id.btnAddItem)\npublic void onBtnAddItemClicked() {\n    Document document = new Document(MainActivity.COLLECTION_NAME);\n    if (isAllFieldsFilled()) {\n        document.setField(fields.getDeviceNameField(), getStringFrom(etDeviceName).trim());\n        document.setField(fields.getPlatformField(), getStringFrom(etDevicePlatform).trim());\n        document.setField(fields.getCameraInfoField(), getStringFrom(etDeviceCameraInfo).trim());\n        document.setField(fields.getColorsAvailableField(), getColorsListFrom(getStringFrom(etDeviceColors)));\n        document.setField(fields.getDevicePriceField(), Double.valueOf(getStringFrom(etDevicePrice)));\n        document.saveDocument(new CallbackDocumentSaved() {\n            @Override\n            public void onDocumentSaved() {\n                Toast.makeText(AddItemActivity.this, getString(R.string.succed_add_item), Toast.LENGTH_SHORT).show();\n                finish();\n            }\n\n            @Override\n            public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                Toast.makeText(AddItemActivity.this, getString(R.string.error_add_item), Toast.LENGTH_SHORT).show();\n            }\n        });\n    } else {\n        Toast.makeText(this, getString(R.string.wrong_data), Toast.LENGTH_SHORT).show();\n    }\n}\n\n\n\nIn this method we create a sample of the \nDocument\n class, check whether a user has provided all necessary information in the corresponding \nEditText\n fields and set the document fields with the \nsetField(\u2026)\n method. Then we save the document. Since the document was created without a connection with a real document form the database (i.e. without using the \ngetDocumentById()\n method), the new created document with the set fields will be uploaded to a server.\n\n\nDocuments are stored in the Scorocode database as shown on Figure 2.3\n\n\n\n\nFigure 2.3 \u2014 storing documents in the Scorocode database.\n\n\nEach document contains system and user's fields.\nSystem fields are:\n\n\n\n\nid \u2014 unique document ID in the collection.\n\n\nreadACL \u2014 permission to read this document.\n\n\nupdateACL \u2014 permission to update this document.\n\n\nremoveACL \u2014 permission to delete this document.\n\n\ncreatedAt \u2014 time of the document creation.\n\n\nupdatedAt - time of the document last update.\n\n\n\n\nA user can add other fields at their discretion with the \u00abAdd a field\u00bb button in the upper panel. They can also add a document with the \u00abAdd a document\u00bb button in the upper panel and enter data in the fields manually. For more information on the database upper panel features, please, see Scorocode documentation.\n\n\nWhen clicking on the \n button a user enter the filter dialog screen.\n\n\nLet's create this filter dialog screen. For this, we need to create the \nFilterDialog\n class using the following code:\n\n\npackage prof_itgroup.ru.storehouseapp.Objects;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.support.v7.app.AlertDialog;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport butterknife.ButterKnife;\nimport prof_itgroup.ru.storehouseapp.Activities.MainActivity;\nimport prof_itgroup.ru.storehouseapp.Helpers.Helper;\nimport prof_itgroup.ru.storehouseapp.R;\nimport ru.profit_group.scorocode_sdk.Callbacks.CallbackFindDocument;\nimport ru.profit_group.scorocode_sdk.scorocode_objects.DocumentInfo;\nimport ru.profit_group.scorocode_sdk.scorocode_objects.Query;\n\npublic class FilterDialog {\n    private Context context;\n    public FilterDialog(Context context) {\n        this.context = context;\n    }\n    public void showFilterDialog(final CallbackFilterDialog callbackFilterDialog) {\n        final View v = LayoutInflater.from(context).inflate(R.layout.filter_layout, null);\n        final CheckBox cbPriceFilter = ButterKnife.findById(v, R.id.cbPriceFilter);\n        final CheckBox cbPlatformFilter = ButterKnife.findById(v, R.id.cbPlatformFilter);\n        final CheckBox cbColourFilter = ButterKnife.findById(v, R.id.cbColorFilter);\n        final EditText etPlatformFilter = ButterKnife.findById(v, R.id.etPlatformFilter);\n        final EditText etColors = ButterKnife.findById(v, R.id.etColors);\n        AlertDialog.Builder builder = new AlertDialog.Builder(context)\n                .setTitle(R.string.titleChooseFilterProperties)\n                .setPositiveButton(R.string.continue_action, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        Query query = new Query(MainActivity.COLLECTION_NAME);\n                        if (cbPriceFilter.isChecked()) {\n                            setPriceFilter(v, query);\n                        }\n                        if (cbPlatformFilter.isChecked()) {\n                            query.equalTo(new DocumentFields(context).getPlatformField(), etPlatformFilter.getText().toString());\n                        }\n                        if(cbColourFilter.isChecked()) {\n                            List\nObject\n colors = new ArrayList\n();\n                            colors.addAll(Arrays.asList(Helper.getStringFrom(etColors).split(\n,\n)));\n                            query.containedIn(new DocumentFields(context).getColorsAvailableField(), colors);\n                        }\n                        query.findDocuments(new CallbackFindDocument() {\n                            @Override\n                            public void onDocumentFound(List\nDocumentInfo\n documentInfos) {\n                                 callbackFilterDialog.onFilterApplied(documentInfos);\n                            }\n                            @Override\n                            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                                Helper.showToast(context, R.string.error);\n                            }\n                        });\n                    }\n                }).setView(v);\n        builder.show();\n    }\n    private void setPriceFilter(View view, Query query) {\n        String priceField = new DocumentFields(view.getContext()).getDevicePriceField();\n        final CheckBox cbIncludeLower = ButterKnife.findById(view, R.id.cbIncludeLower);\n        final CheckBox cbIncludeUpper = ButterKnife.findById(view, R.id.cbIncludeUpper);\n        final EditText etLowerPrice = ButterKnife.findById(view, R.id.etPriceFrom);\n        final EditText etUpperPrice = ButterKnife.findById(view, R.id.etPriceTo);\n        if(cbIncludeLower.isChecked()) {\n            query.greaterThenOrEqualTo(priceField, getPrice(etLowerPrice));\n        } else {\n            query.greaterThan(priceField, getPrice(etLowerPrice));\n        }\n        if(cbIncludeUpper.isChecked()) {\n            query.lessThanOrEqualTo(priceField, getPrice(etUpperPrice));\n        } else {\n            query.lessThan(priceField, getPrice(etUpperPrice));\n        }\n    }\n    private Double getPrice(EditText etPrice) {\n        String price = etPrice.getText().toString();\n        Double priceDouble = 0d;\n        if(!price.isEmpty()) {\n            priceDouble = Double.valueOf(price);\n        }\n        return priceDouble;\n    }\n    public interface CallbackFilterDialog {\n        void onFilterApplied(List\nDocumentInfo\n documentInfo);\n    }\n}\n\n\n\nIn the \nshowFilterDialog\n method we create \nAlertDialog\n and set its \nView\n from the following layout file:\n\n\n \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    android:orientation=\nvertical\n\n    android:padding=\n16dp\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    \ninclude layout=\n@layout/price_filter_layout\n /\n\n\n    \ninclude layout=\n@layout/dilimeter\n /\n\n\n    \ninclude layout=\n@layout/platform_filter\n /\n\n\n    \ninclude layout=\n@layout/dilimeter\n /\n\n\n    \nLinearLayout\n        android:orientation=\nhorizontal\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \nCheckBox\n            android:id=\n@+id/cbColorFilter\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n        \nTextView\n            android:text=\n@string/colorsFilter\n\n            style=\n@style/label_style\n/\n\n        \nEditText\n            android:id=\n@+id/etColors\n\n            android:layout_marginLeft=\n16dp\n\n            android:hint=\n@string/color_filter_hint\n\n            style=\n@style/label_style\n /\n\n    \n/LinearLayout\n\n\n/LinearLayout\n\n\n\nThe layout files \nprice_filter_layout\n and \nplatform_filter\n are shown below:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:orientation=\nvertical\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nwrap_content\n\n    tools:showIn=\n@layout/filter_layout\n\n    \nLinearLayout\n        android:orientation=\nhorizontal\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \nCheckBox\n            android:id=\n@+id/cbPriceFilter\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n        \nTextView\n            android:layout_marginLeft=\n8dp\n\n            android:layout_marginStart=\n8dp\n\n            android:text=\n@string/filter_price_from\n\n            style=\n@style/label_style\n /\n\n        \nEditText\n            android:id=\n@+id/etPriceFrom\n\n            android:layout_marginLeft=\n4dp\n\n            android:layout_marginStart=\n4dp\n\n            android:minWidth=\n60dp\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n        \nTextView\n            android:text=\n@string/filter_price_up_to\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n /\n\n        \nEditText\n            android:id=\n@+id/etPriceTo\n\n            android:layout_marginLeft=\n4dp\n\n            android:layout_marginStart=\n4dp\n\n            android:minWidth=\n60dp\n\n            style=\n@style/label_style\n/\n\n    \n/LinearLayout\n\n    \nRelativeLayout\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \nLinearLayout\n            android:id=\n@+id/llLowerBound\n\n            android:layout_marginLeft=\n32dp\n\n            android:layout_alignParentLeft=\ntrue\n\n            android:orientation=\nhorizontal\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n\n            \nCheckBox\n                android:id=\n@+id/cbIncludeLower\n\n                android:layout_width=\nwrap_content\n\n                android:layout_height=\nwrap_content\n /\n\n            \nTextView\n                android:layout_gravity=\nfill\n\n                android:text=\n@string/include_lower\n\n                style=\n@style/label_style\n /\n\n        \n/LinearLayout\n\n        \nLinearLayout\n            android:layout_marginLeft=\n160dp\n\n            android:orientation=\nhorizontal\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n\n            \nCheckBox\n                android:id=\n@+id/cbIncludeUpper\n\n                android:layout_width=\nwrap_content\n\n                android:layout_height=\nwrap_content\n /\n\n            \nTextView\n                android:layout_gravity=\nfill\n\n                android:text=\n@string/include_upper\n\n                style=\n@style/label_style\n /\n\n        \n/LinearLayout\n\n    \n/RelativeLayout\n\n\n/LinearLayout\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:orientation=\nhorizontal\n\n    android:layout_width=\nwrap_content\n\n    android:layout_height=\nwrap_content\n\n    tools:showIn=\n@layout/filter_layout\n\n    \nCheckBox\n        android:id=\n@+id/cbPlatformFilter\n\n        android:layout_width=\nwrap_content\n\n        android:layout_height=\nwrap_content\n /\n\n    \nTextView\n        android:layout_marginLeft=\n8dp\n\n        android:layout_marginStart=\n8dp\n\n        android:text=\n@string/filter_platform\n\n        style=\n@style/label_style\n /\n\n    \nEditText\n        android:id=\n@+id/etPlatformFilter\n\n        android:layout_marginLeft=\n4dp\n\n        android:layout_marginStart=\n4dp\n\n        android:minWidth=\n60dp\n\n        android:layout_width=\nwrap_content\n\n        android:layout_height=\nwrap_content\n /\n\n\n/LinearLayout\n\n\n\nThe filter dialog screen is shown in Figure 2.4\n\n\n\n\nFigure 2.4 \u2014 filter dialog screen.\n\n\nOn this dialog screen, a user can specify database sample criteria as follows:\n\n Device price\n\n Device platform (Android or iOS, plus operation system version number).\n* Available colours.\n\n\nWhen pressing the \u00abContinue\u00bb button, we check whether the CheckBox elements were chosen and, if yes, we set the corresponding filter.\n\n\nCode listing for setting a filter:  \n\n\npublic void showFilterDialog(final CallbackFilterDialog callbackFilterDialog) {\n    final View v = LayoutInflater.from(context).inflate(R.layout.filter_layout, null);\n    final CheckBox cbPriceFilter = ButterKnife.findById(v, R.id.cbPriceFilter);\n    final CheckBox cbPlatformFilter = ButterKnife.findById(v, R.id.cbPlatformFilter);\n    final CheckBox cbColourFilter = ButterKnife.findById(v, R.id.cbColorFilter);\n    final EditText etPlatformFilter = ButterKnife.findById(v, R.id.etPlatformFilter);\n    final EditText etColors = ButterKnife.findById(v, R.id.etColors);\n\n    AlertDialog.Builder builder = new AlertDialog.Builder(context)\n            .setTitle(R.string.titleChooseFilterProperties)\n            .setPositiveButton(R.string.continue_action, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    Query query = new Query(MainActivity.COLLECTION_NAME);\n                    if (cbPriceFilter.isChecked()) {\n                        setPriceFilter(v, query);\n                    }\n\n                    if (cbPlatformFilter.isChecked()) {\n                        query.equalTo(new DocumentFields(context).getPlatformField(), etPlatformFilter.getText().toString());\n                    }\n\n                    if(cbColourFilter.isChecked()) {\n                        List\nObject\n colors = new ArrayList\n();\n                        colors.addAll(Arrays.asList(Helper.getStringFrom(etColors).split(\n,\n)));\n                        query.containedIn(new DocumentFields(context).getColorsAvailableField(), colors);\n                    }\n                    query.findDocuments(new CallbackFindDocument() {\n                        @Override\n                        public void onDocumentFound(List\nDocumentInfo\n documentInfos) {\n                             callbackFilterDialog.onFilterApplied(documentInfos);\n                        }\n                        @Override\n                        public void onDocumentNotFound(String errorCode, String errorMessage) {\n                            Helper.showToast(context, R.string.error);\n                        }\n                    });\n                }\n            }).setView(v);\n    builder.show();\n}\n\nprivate void setPriceFilter(View view, Query query) {\n    String priceField = new DocumentFields(view.getContext()).getDevicePriceField();\n    final CheckBox cbIncludeLower = ButterKnife.findById(view, R.id.cbIncludeLower);\n    final CheckBox cbIncludeUpper = ButterKnife.findById(view, R.id.cbIncludeUpper);\n    final EditText etLowerPrice = ButterKnife.findById(view, R.id.etPriceFrom);\n    final EditText etUpperPrice = ButterKnife.findById(view, R.id.etPriceTo);\n    if(cbIncludeLower.isChecked()) {\n        query.greaterThenOrEqualTo(priceField, getPrice(etLowerPrice));\n    } else {\n        query.greaterThan(priceField, getPrice(etLowerPrice));\n    }\n    if(cbIncludeUpper.isChecked()) {\n        query.lessThanOrEqualTo(priceField, getPrice(etUpperPrice));\n    } else {\n        query.lessThan(priceField, getPrice(etUpperPrice));\n    }\n}\n\n\n\nA filter can be set as follows: we create a \nQuery\n object, taking samples from our collection. If the price filter is applied (it is ticked off), then we choose only the devices within the set price range in our database.\n\n\nThe price range is set with the following methods:\n\n greaterThan sets the lower price limit (excluding the quoted price number).\n\n lessThan sets the upper price limit (excluding the quoted price number).\n\n greaterThanOrEqualTo sets the lower price limit including the quoted price number. \n\n lessThanOrEqualTo sets the upper price limit including the quoted price number.\n\n\nPlatform search is set using the \nequalTo(field, value)\n method of the \nQuery\n class which tells to an instance of the class to leave inside the sample only the documents whose field value in the \nfield\n parameter corresponds to the \nvalue\n. As an example in our case, we can find all Android 7.0 devices by setting \nquery.equalTo(\u00abplatform\u00bb, \u00abAndroid 7.0\u00bb);\n.\n\n\nColour search is set using the \ncontainedIn\n method of the \nQuery\n class which leaves leave inside the sample only the documents  whose fields (array) contains all elements of the given array.\n\n\nWith this we form a query for the given database collection and receive copies of the \nDocumentInfo\n class which characterize the documents appropriate for this query. We pass this information in the Activity using a callback and them we update the information.\n\n\nWhen pressing the \n button we end the user active session (logout) so the user is back at the Launch Screen.\n\n\nTo achieve this we need to set a click event handler for this button, it will run \nlogout\n of the \nUser\n class to end the active session:\n\n\npublic static void logout(final Context context) {\n    LocalPersistence.writeObjectToFile(context, null, LocalPersistence.FILE_USER_INFO);\n    new User().logout(new CallbackLogoutUser() {\n        @Override\n        public void onLogoutSucceed() {\n            display(context);\n        }\n\n        @Override\n        public void onLogoutFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.error);\n        }\n    });\n}\n\nIn this method, as our first step we need to take is to delete the user data file (the file is stored locally and is used to check whether the user was identified). Then we use the \nlogout(\u2026)\n method of the \nUser\n class which ends the user active session.\n\n\nIn case the session was ended successfully the \nonLogoutSucceed(...) callback\n iterface method will be executed. Otherwise, it is the  \nonLogoutFailed(...)\n method that will be executed.\n\n\nDevice Details Screen.\n\n\nWhen pressing on any element of the device list on the application main screen, a user moves to the screen with detailed information about the chosen device.\n\n\nLet's create an Activity called \nItemDetailsInfo\n and add the following xml code to its layout file:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:id=\n@+id/activity_detailed_item_info\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:padding=\n16dp\n\n    android:orientation=\nvertical\n\n    tools:context=\nprof_itgroup.ru.storehouseapp.Activities.ItemDetailsActivity\n\n    \nScrollView\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n            \ninclude layout=\n@layout/item_core\n/\n\n    \n/ScrollView\n\n\n/LinearLayout\n\n\n\nAs you can see, the Activity layout file re-uses xml code of the Add an Item screen yet this screen also presents a possibility to switch to the Edit mode, i.e. to activate hidden \nView\n of the screen.\n\n\nIn \nActionBar\n of the screen we will also add icons to edit a device entry (document), to remove a device entry (document) and to proceed to the delivery information screen.\n\n\nTo set the icons in \nActionBar\n let's create a layout file called \ndetailed_info_menu\n and add to it the following code lines:\n\n\nmenu xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:app=\nhttp://schemas.android.com/apk/res-auto\n\n    \nitem\n        android:id=\n@+id/action_edit_item\n\n        android:title=\n@string/action_edit_item\n\n        android:icon=\n@drawable/ic_mode_edit_white_24dp\n\n        app:showAsAction=\nalways\n/\n\n\n    \nitem\n        android:id=\n@+id/action_remove_item\n\n        android:title=\n@string/action_remove_item\n\n        android:icon=\n@drawable/ic_delete_forever_white_24dp\n\n        app:showAsAction=\nifRoom\n/\n\n\n     \nitem\n        android:id=\n@+id/action_prepare_item\n\n        android:icon=\n@drawable/ic_assignment_white_24dp\n\n        android:title=\n@string/action_prepare_item\n\n        app:showAsAction=\nifRoom\n/\n\n\n/menu\n\n\n\nInside the Activity let's add the following method:\n\n\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.detailed_info_menu, menu);\n    return super.onCreateOptionsMenu(menu);\n}\n\n\n\nwhich will install icons into \nActionBar\n.\n\n\nWe will handle clicks on buttons with the method described below: \n\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case android.R.id.home:\n            finish();\n            break;\n        case R.id.action_edit_item:\n            setEditMode(true);\n            break;\n        case R.id.action_remove_item:\n            DocumentHelper.fetchAndRemoveDocument(this, document, getDocumentInfo());\n            break;\n        case R.id.action_prepare_item:\n            SendItemActivity.display(this, getDocumentInfo());\n            break;\n    }\n    return super.onOptionsItemSelected(item);\n}\n\n\n\nAs a result we should get the screen shown in Figure 3.1\n\n\n\n\nFigure 3.1 \u2014 device details screen.\n\n\nThe following icons are located in the right upper side of the screen:\n\n\n Edit device info\n\n\n Remove this device from the database\n\n\n Switch to the device shipping info.\n\n\nWhen a user presses the \n button, the sreen switches to the edit mode. To do so let's make these buttons visible: \"Add colour\", \"Remove colour\", \"Increase store price\", \"Lower store price\". Device details screen in the edit mode is shown in Figure 3.2. \n\n\n\n\nFigure 3.2 \u2014 Device details screen in the edit mode\n\n\nLet's define the click event handler for the \u00abChange Item\u00bb button which will execute the following code:\n\n\nprivate void updateItemDocument() {\n    document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(DocumentInfo documentInfo) {\n            document.updateDocument()\n                    .set(fields.getDeviceNameField(), getStringFrom(etDeviceName))\n                    .set(fields.getPlatformField(), getStringFrom(etDevicePlatform))\n                    .set(fields.getCameraInfoField(), getStringFrom(etDeviceCameraInfo));\n            setColorsUpdateInfo();\n            document.updateDocument().inc(fields.getDevicePriceField(), increaseCount);\n            document.saveDocument(new CallbackDocumentSaved() {\n                @Override\n                public void onDocumentSaved() {\n                    setEditMode(false);\n                    for (String color : deviceColors.keySet()) {\n                        deviceColors.put(color, ColorState.FROM_DB);\n                    }\n                    document.updateDocument().getUpdateInfo().clear();\n                }\n                @Override\n                public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                    showToast(R.string.error_update_item);\n                    setFields();\n                }\n            });\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            showToast(R.string.error_update_item);\n            setFields();\n        }\n    });\n}\nprivate void setColorsUpdateInfo() {\n    for (String color : deviceColors.keySet()) {\n        ColorState colorState = deviceColors.get(color);\n        switch (colorState) {\n            case TO_REMOVE:\n                document.updateDocument().pull(fields.getColorsAvailableField(), color);\n                break;\n\n            case NEW:\n                document.updateDocument().push(fields.getColorsAvailableField(), color);\n                break;\n        }\n    }\n}\n\n\n\nTo update device information we use the \nupdateDocument()\n method of the \nDocument\n class. In this case, the instance of the Document class wich we are updating should be linked to a real document in the database using the \ngetDocumentById\n method. New values for the fileds below are set with the \nset(field, value)\n method of the \nUpdate\n class.\n\n\n\n\nDevice Name ( deviceName field in the database)\n\n\nDevice OS (platform field in the database)\n\n\nCamera Information (deviceCameraInfo)\n\n\n\n\nThe  \u00abdevice price\u00bb field (devicePrice in the database) is set with the \n.inc(field, value)\n mehod of the \nUpdate\n class. When we increase the price, we use positive prarameter values, and when we decrease it, then we use the negative ones.\n\n\nThe \u00abavaliable colours\u00bb field (colorsAvailable in the database) is set with the \n.push()\n method (to add a colour) and the \n.pull()\n method (to remove a colour).\n\n\nLet's look again at the \nupdateItemDocument(...)\n method: to update the document fields we need to verify that such document exists  and to link our instance of the \nDocument\n class to a document in the database. To do so we can use the \n.getDocumentById(\u2026)\n method of the \nDocument\n class.\n\n\nAfter we have linked our document to the database one, we receive an object of the \nUpdate\n class using the \n.updateDocument()\n method. With that object we set a device name, OS and camera informaton using the \n.set(\u2026)\n method.  We can add to the array  (with the \n.push()\n method) or remove from the array (with the \n.pull\n method) avaliable colours for this device and change its price in the price field (with the \n.inc()\n method). When all udates are done in our instance of the \nUpdate\n class, we save the document using the  \n.saveDocument(\u2026)\n method of the \nDocument\n class.\n\n\nSince we received the document via linking it with another document from the database, (using the \n.getDocumentById\n method), the result of running \n.saveDocument(\u2026)\n is an updated documet, not a new one.\n\n\nLet's consider the \n button - when pressed, the information is about a device is deleted from the database. To do so, we can add a click event handler which would trigger a method shown below:\n\n\npublic static void fetchAndRemoveDocument(final Context context, final Document document, DocumentInfo documentInfo) {\n    document.getDocumentById(documentInfo.getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(DocumentInfo documentInfo) {\n            removeDocument(context, document);\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.error_document_not_removed);\n        }\n    });\n}\npublic static void removeDocument(final Context context, Document document) {\n        document.removeDocument(new CallbackRemoveDocument() {\n            @Override\n            public void onRemoveSucceed(ResponseRemove responseRemove) {\n                Toast.makeText(context, context.getString(R.string.document_removed), Toast.LENGTH_SHORT).show();\n                ((Activity) context).finish();\n            }\n            @Override\n            public void onRemoveFailed(String errorCode, String errorMessage) {\n                Toast.makeText(context, context.getString(R.string.error_document_not_removed), Toast.LENGTH_SHORT).show();\n            }\n        });\n}\n\n\n\nLet's consider this method in more detail. At first we use the \n.getDocumentById(...)\n method of the \nDocument\n class to check whether a document exists and to link this document with our created instance of the \nDocument\n class.\n\n\nAfter we verified the document we can execute the \n.removeDocument()\n method of the \nDocument\n class which deletes the document form the database.\n\n\nThe \n button switches a screen to the screen with device shipping information. \n\n\nDevice Shipping Info Screen.\n\n\nLet's create a new activity called \nSendItemActivity\n and add the following xml code lines into its layout file:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nLinearLayout xmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    xmlns:tools=\nhttp://schemas.android.com/tools\n\n    android:id=\n@+id/activity_send_item\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nmatch_parent\n\n    android:padding=\n16dp\n\n    android:orientation=\nvertical\n\n    tools:context=\nprof_itgroup.ru.storehouseapp.Activities.SendItemActivity\n\n    \nLinearLayout\n        android:id=\n@+id/llWaitingUsers\n\n        android:orientation=\nvertical\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n\n        \nTextView\n            style=\n@style/label_style\n\n            android:textColor=\n@android:color/black\n\n            android:text=\n@string/action_waiting_list\n/\n\n        \nTextView\n            android:id=\n@+id/tvWaitingUsers\n\n            style=\n@style/label_style\n/\n\n        \nTextView\n            android:id=\n@+id/tvLastChangeLabel\n\n            android:textColor=\n@android:color/black\n\n            android:layout_marginTop=\n8dp\n\n            style=\n@style/label_style\n\n            android:text=\n@string/last_change\n/\n\n        \nTextView\n            android:id=\n@+id/tvLastChange\n\n            style=\n@style/label_style\n/\n\n        \nLinearLayout\n            android:id=\n@+id/llInfoContainer\n\n            android:orientation=\nvertical\n\n            android:layout_width=\nmatch_parent\n\n            android:layout_height=\nwrap_content\n\n            \nRelativeLayout\n                android:layout_width=\nmatch_parent\n\n                android:layout_height=\nwrap_content\n\n                \nTextView\n                    android:layout_marginTop=\n8dp\n\n                    android:textColor=\n@android:color/black\n\n                    android:text=\n@string/item_info\n\n                    style=\n@style/label_style\n /\n\n                \nTextView\n                    android:id=\n@+id/tvEdit\n\n                    android:layout_alignParentRight=\ntrue\n\n                    android:layout_marginTop=\n10dp\n\n                    android:text=\n@string/editInfo\n\n                    android:textColor=\n@color/colorPrimary\n\n                    android:layout_width=\nwrap_content\n\n                    android:layout_height=\nwrap_content\n /\n\n            \n/RelativeLayout\n\n            \nScrollView\n                android:layout_marginTop=\n8dp\n\n                android:layout_width=\nwrap_content\n\n                android:layout_height=\n180dp\n\n                \nEditText\n                    android:id=\n@+id/etItemInfo\n\n                    android:enabled=\nfalse\n\n                    android:layout_width=\nwrap_content\n\n                    android:layout_height=\n180dp\n /\n\n            \n/ScrollView\n\n        \n/LinearLayout\n\n    \n/LinearLayout\n\n    \nLinearLayout\n        android:orientation=\nvertical\n\n        android:layout_gravity=\ncenter_horizontal\n\n        android:layout_width=\nwrap_content\n\n        android:layout_height=\nwrap_content\n\n        \nButton\n            android:layout_marginTop=\n8dp\n\n            android:layout_gravity=\ncenter_horizontal\n\n            android:id=\n@+id/btnAppUserInList\n\n            android:text=\n@string/addUserInList\n\n            android:layout_width=\nmatch_parent\n\n            android:layout_height=\nwrap_content\n /\n\n        \nButton\n            android:layout_marginTop=\n8dp\n\n            android:layout_gravity=\ncenter_horizontal\n\n            android:id=\n@+id/btnSendToUser\n\n            android:text=\n@string/sendToUser\n\n            android:layout_width=\nmatch_parent\n\n            android:layout_height=\nwrap_content\n /\n\n    \n/LinearLayout\n\n\n/LinearLayout\n\n\n\nThe created screen is shown in Figure 4.1\n\n\n\n\nFigure 4.1 \u2014 Device Shipping Info Screen\n\n\nWhen the \u00abADD BUYER\u00bb button is pressed, a dialog screen appears where one can enter information about a buyer. Afterwards, the following code is run:\n\n\nprivate void addBuyerAndRefreshWaitingList(final String buyerInfo) {\n    if(!buyerInfo.trim().isEmpty()) {\n        document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                document.updateDocument().push(fields.getBuyersField(), buyerInfo);\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        document.updateDocument().getUpdateInfo().clear();\n                        refreshWaitingList();\n                        showToast(getBaseContext(), R.string.add_waiting_buyer);\n                    }\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        showToast(getBaseContext(), R.string.error);\n                    }\n                });\n            }\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                showToast(getBaseContext(), R.string.error);\n            }\n        });\n    }\n}\n\n\n\nLet's consider the method in more details. At first, we use verify that the buyer's name field is not empty. In case a user did provide with the buyer's information, the instance of the \nDocument\n class is linked to the document in the database. Afterwards, the document data is updated and the entered information about the buyer is added to the end of the buyers array with the \n.push()\n method of the \nUpdate\n class. This is how a queue is formed which consists of buyers waiting for thier goods shipment.  \n\n\nWhen the \u00abSHIP TO BUYER\u00bb button is pressed, the first client in the waiting clients queue array gets deleted. Alongside this, the latest shipment time should be recorded and the employees should be notified about it (e.g. movers, delivery drivers, accountants).\n\nTo do this, we can add a click event handler which executes the following method:\n\n\n@OnClick(R.id.btnSendToUser)\npublic void onSendToUserButtonClicked() {\n    document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(final DocumentInfo documentInfo) {\n            document.updateDocument()\n                    .popFirst(fields.getBuyersField())\n                    .setCurrentDate(fields.getLastSendField());\n\n         document.saveDocument(new CallbackDocumentSaved() {\n                @Override\n                public void onDocumentSaved() {\n                    document.updateDocument().getUpdateInfo().clear();\n                    new ItemNotificator(getBaseContext(), documentInfo.getId(), fields.getDeviceName()).notifyPersonalAboutItemSend();\n                    new BalanceNotificator(getBaseContext()).refreshCompanyBalance();\n                    etItemInfo.setVisibility(View.VISIBLE);\n                    etItemInfo.append(fields.getLastSendTime());\n                    refreshWaitingList();\n                }\n\n               @Override\n                public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                    showToast(getBaseContext(), R.string.error);\n                }\n            });\n }\n\n\n\nIn this method, we can see a \nDocument\n class instance being linked to a document from the database with the \n.getDocumentById()\n method of the \nDocument\n class. We use its \n.popFirst\n method which deletes the first element of an array (imitating attending to the first person in a queue). Furthermore, the time of the last shipment is recorded in the field called \"Last shipment occurred...\" (lastSend in the database) using the \n.setCurrentDate(\u2026)\n method of the \nUpdate\n class.\n\n\nThe screen also contains comments about the shipment, which are stored in the document file (sendInfo field of the File type). By default, this file does not exist and the text screen shows \"No comments about the device...\". A user can press the Edit button, change the shipment comment and press the Save button. It will execute the following method:  \n\n\npublic static void uploadFile(final Context context, Document document, String content) {\n    document.uploadFile(new DocumentFields(context).getSendInfoField(), FILE_NAME, encode(content.getBytes()),\n        new CallbackUploadFile() {\n        @Override\n        public void onDocumentUploaded() {\n        //file loaded\n        }\n\n        @Override\n        public void onDocumentUploadFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.error);\n        }\n    });\n}\n\n\n\nThis method uploads the file into a document field (File type) in the database. The document should be linked with the \ngetDocumentById(\u2026)\n method. A similar routine happens when a document is deleted from the database. \n\n\nWaiting users' information and shipment comments are retrieved from the server using the method shown below:\n\n\nprivate void refreshWaitingList() {\n    document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(DocumentInfo documentInfo) {\n            fields.setDocumentInfo(documentInfo);\n            tvWaitingUsers.setText(fields.getBuyers());\n            tvLastChange.setText(fields.getLastSendTime());\n            llWaitingUsers.setVisibility(fields.getBuyers().isEmpty() ? View.GONE : View.VISIBLE);\n            tvLastChangeLabel.setVisibility(fields.getLastSendTime().isEmpty() ? View.GONE : View.VISIBLE);\n            tvLastChange.setVisibility(fields.getLastSendTime().isEmpty() ? View.GONE : View.VISIBLE);\n            btnSendToUser.setVisibility(fields.getBuyers().isEmpty() ? View.GONE : View.VISIBLE);\n            document.getFileContent(fields.getSendInfoField(), FileHelper.FILE_NAME, new CallbackGetFile() {\n                @Override\n                public void onSucceed(String fileContent) {\n                    if(fileContent != null \n !fileContent.trim().isEmpty()) {\n                        etItemInfo.setText(fileContent);\n                    } else {\n                        etItemInfo.setText(R.string.no_info);\n                    }\n                }\n                @Override\n                public void onFailed(String errorCode, String errorMessage) {\n                    showToast(getBaseContext(), R.string.error);\n                }\n            });\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            tvWaitingUsers.setVisibility(View.GONE);\n        }\n    });\n}\n\n\n\nIn this method, we can see a \nDocument\n class instance being linked to a document from the database, which leads to the following fields updating on the screen:\n1. users waiting queue list \n2. time of the last shipment\n3. setting visibility of different elements depending on the content \n\n\nUsing the \ngetFileContent\n method of the \nDocument\n class we can receive the file contents as a line (with formating). The line then is set in the comment field. \n\n\nLets also create the \nItemNotificator\n class and add the \nnotifyPersonalAboutItemSend()\n method to it. The method will be called when a device is shipped to a user. Its code is shown below:\n\n\n```public void notifyPersonalAboutItemSend() {\n    sendPushToLoaderPerson();\n    sendEmailInAccountingDepartment();\n    sendSmsToDeliveryPerson();\n}\n\n\nThis method is notifying the employees stating that the device is ready for shipment. It does so by:\n\n- sending a push notification to a mover with the following:\n\n```Java\nprivate void sendPushToLoaderPerson() {\n    Query query = new Query(\nroles\n);\n    query.equalTo(\nname\n, \nloaderPerson\n);\n    query.equalTo(\nisFree\n, true);\n    query.setLimit(1);\n\n    MessagePush messagePush = new MessagePush(context.getString(R.string.you_should_take) + getItemInfo() + context.getString(R.string.and_prepare), null);\n    message.sendPush(messagePush, query, new CallbackSendPush() {\n        @Override\n        public void onPushSended() {\n            Helper.showToast(context, R.string.push_sended);\n        }\n        @Override\n        public void onPushSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.cant_send_push);\n        }\n    });\n}\n\n\n\n\nsending a text (sms) to a delivery person: \n\n\n\n\nprivate void sendSmsToDeliveryPerson() {\n    Query query = new Query(\nroles\n);\n    query.equalTo(\nname\n, \ndeliveryPerson\n);\n    query.equalTo(\nisFree\n, true);\n    query.setLimit(1);\n\n    MessageSms messageSms = new MessageSms(context.getString(R.string.take_item) + getItemInfo());\n    message.sendSms(messageSms, query, new CallbackSendSms() {\n        @Override\n        public void onSmsSended() {\n            Helper.showToast(context, R.string.sms_was_sended);\n        }\n\n        @Override\n        public void onSmsSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.cant_send_sms);\n        }\n    });\n}\n\n\n\n\n\nsending an email to the accountants' office:\n\n\n\n\nprivate void sendEmailInAccountingDepartment() {\n    Query query = new Query(\nroles\n);\n    query.equalTo(\nname\n, \naccountantPerson\n);\n\n    MessageEmail messageEmail = new MessageEmail(context.getString(R.string.from), context.getString(R.string.device) + getItemInfo() , context.getString(R.string.device) + getItemInfo() + context.getString(R.string.sold));\n    message.sendEmail(messageEmail, query, new CallbackSendEmail() {\n        @Override\n        public void onEmailSend() {\n            Helper.showToast(context, R.string.email_was_sended);\n        }\n        @Override\n        public void onEmailSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.cant_send_email);\n        }\n    });\n}\n\n\n\nLet's consider how these methods work in detail:\n\n\n\n\nIn the \nsendEmailInAccountingDepartment\n method the following happens: the \u00abaccountantPerson\u00bb role is chosen from the roles collection and all users with this role are sent emails using the \n.sendEmail()\n method of the \nMessage\n class.\n\n\nIn the \nsendSmdToDeliveryPerson\n method the following happens: one unoccupied employee (\nsetLimit(1)\n and \nsFree == true\n conditions) with the \u00abdeliveryPerson\u00bb role is chosen from the roles collection and is sent a text (sms) using the \n.sendSms\n method of the \nMessage\n class.\n\n\nIn the \nsendSmdToLoaderPerson\n method the following happens: one unoccupied employee (\nsetLimit(1)\n and \nsFree == true\n conditions) with the \u00abloaderPerson\u00bb role is chosen from the roles collection and is sent a push notification using the \n.sendPush\n method of the \nMessage\n class.\n\n\n\n\nAfter the \"SHIP TO BUYER\" button is pushed the \nrefreshCompanyBalance()\n method of the \nBalanceNotivicator\n class is executed.\n\n\nThe \nresreshCompanyBalance()\n method listing:\n\n\npublic void refreshCompanyBalance() {\n    Script script = new Script();\n    script.runScript(\n 5800ad9342d52f1ba275fbcd\n, new CallbackSendScript() {\n        @Override\n        public void onScriptSended() {\n            Helper.showToast(context, R.id.balance_refreshed);\n        }\n        @Override\n        public void onScriptSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.id.can_refresh_balance);\n        }\n    });\n}\n\n\n\nIn this listing, the server-side code with 5800ad9342d52f1ba275fbcd ID is called using the \nrunScript(...)\n method of the \nScript\n class. It recounts the goods in our storehouse and adjusts the storage costs, the balance and other characteristics.", 
            "title": "Storehouse (Android)"
        }, 
        {
            "location": "/Java/Storehouse/#storehouse-application", 
            "text": "This documentation includes description of the \"Storehouse\" application development process on the Scorocode platform as a demo. The application source code is available  in the following repository:  https://github.com/Scorocode/scorocode-sample-storehouse .  The application is made to manage mobile phones stock inside a dealer storehouse and allows you to:    Register a new user in the application database  Authenticate an application user  De-authenticate an application user  View available mobile phone models on stock in the storehouse    Add a mobile phone model in the database  Delete a mobile phone model from the database  View full information about a mobile phone model  Change information about a mobile phone model  Select a certain mobile phone from a list using a filter  Add a user on the waiting list for this phone model  Ship this mobile phone model to the user  Notify the accounting department about the shipment using an email message  Notify a storehouse loading worker with a push message  Notify a courier with an sms message  Update the company's balance sheet taking into account the recent mobile phone shipment", 
            "title": "\"Storehouse\" Application"
        }, 
        {
            "location": "/Java/Storehouse/#application-data-structure", 
            "text": "Let's create the  storehouse  collection with the following fields:   platform (String)  cameraInfo (String)  deviceName (String)  colorsAvailable (Array)  devicePrice (Number)  buyers (Array)  lastSend (Date)  sendInfo (File)   We add 3 documents inside the system collection  Roles  with the following corresponding values for the  name  field:   deliveryPerson  accountantPerson  loaderPerson", 
            "title": "Application Data Structure."
        }, 
        {
            "location": "/Java/Storehouse/#application-launch-screen", 
            "text": "Let's create a launch screen for our application and call it  LoginActivity . To do so we will go  File \u2192 New \u2192 Activity \u2192 Empty Activity  in Android Studio and add the following code in the layout file of the Activity:  ?xml version= 1.0  encoding= utf-8 ?  RelativeLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:id= @+id/activity_login \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:paddingBottom= @dimen/activity_vertical_margin \n    android:paddingLeft= @dimen/activity_horizontal_margin \n    android:paddingRight= @dimen/activity_horizontal_margin \n    android:paddingTop= @dimen/activity_vertical_margin \n    tools:context= prof_itgroup.ru.storehouseapp.Activities.LoginActivity \n     LinearLayout\n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n        android:gravity= center \n        android:orientation= vertical \n         TextView\n            style= @style/label_style \n            android:layout_marginTop= 16dp \n            android:text= @string/login  / \n         EditText\n            android:id= @+id/etEmail \n            android:gravity= center \n            style= @style/textStyle \n            android:hint= @string/login_hint  / \n         TextView\n            style= @style/label_style \n            android:layout_marginTop= 16dp \n            android:text= @string/password / \n         EditText\n            android:gravity= center \n            android:id= @+id/etPassword \n            style= @style/textStyle \n            android:hint= @string/password_hint \n            android:inputType= textPassword \n            android:maxLines= 1  / \n         LinearLayout\n            android:layout_width= wrap_content \n            android:layout_height= wrap_content \n            android:gravity= center_horizontal \n            android:orientation= vertical \n             Button\n                android:id= @+id/btnLogin \n                android:layout_width= match_parent \n                android:layout_height= wrap_content \n                android:layout_marginTop= 4dp \n                android:text= @string/login_button_text  / \n             Button\n                android:id= @+id/btnRegister \n                android:layout_width= match_parent \n                android:layout_height= wrap_content \n                android:layout_marginTop= 4dp \n                android:text= @string/register_button_text  / \n         /LinearLayout \n     /LinearLayout  /RelativeLayout \nThe launch screen of the  LoginActivity  class is shown in Figure 1.1.    Figure 1.1 \u2013 application launch screen.  Let's add the following code lines in the  onCreate  method of the  LoginActivity  class:  @Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_login);\n    if (isUserLogined(this)) {\n        MainActivity.display(this);\n    }\n    ScorocodeSdk.initWith(APPLICATION_ID, CLIENT_KEY, null, FILE_KEY, MESSAGE_KEY, SCRIPT_KEY, null);\n    ButterKnife.bind(this);\n}  ScorocodeSdk  initialization is happening in the  onCreate  method with keys  appId ,  clientKey  (android),  fileKey ,  messageKey ,  scriptKey  using the  ScorocodeSdk.initWith(...)  method. These keys can be viewed at the \u00abSecurity\u00bb tab in the project Settings.  On this screen, a database user can enter their system login and password. The application will check whether they are correct using the  .login()  method of the  User  class. This method is demonstrated in a listing:  @OnClick(R.id.btnLogin)\npublic void onBtnLoginClicked() {\n    User user = new User();\n    user.login(etEmail.getText().toString(), etPassword.getText().toString(), new CallbackLoginUser() {\n        @Override\n        public void onLoginSucceed(ResponseLogin responseLogin) {\n            DocumentInfo userInfo = responseLogin.getResult().getUserInfo();\n            saveUserInfo(userInfo);\n            MainActivity.display(LoginActivity.this);\n        }\n        @Override\n        public void onLoginFailed(String errorCode, String errorMessage) {\n            Helper.showToast(getBaseContext(), R.string.error_login);\n        }\n    });\n}  In this method, we create a new sample of the  User  class and run its  login  method. The information about a user's email and password is taken from the corresponding  EditText . The  login  method will check that a user with this email and this password exists in the \u00abusers\u00bb collection.  In case such user exists in the \u00abusers\u00bb collection, the  onLoginSucceed(...) callback  method will be executed. Otherwise it the  onFoginFailed(...)  method that will be executed. Thus, we can be sure whether such user exists in our database and act accordingly.  On the launch screen (see illustration 1.1) we also have the \u00abRegister\u00bb button which allows to register a new user in the system (add to the \u00abusers\u00bb database collection). Let's connect this button to the button click handler which opens an Activity with user's data needed for registration:  @OnClick(R.id.btnRegister)\npublic void onBtnRegisterClicked() {\n    RegisterActivity.display(this);\n}", 
            "title": "Application Launch Screen."
        }, 
        {
            "location": "/Java/Storehouse/#new-user-registration-screen", 
            "text": "Let's create an new Activity called  RegisterActivity  and add the following xml code in the layout file of this Activity:  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:id= @+id/activity_register \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:gravity= center_horizontal \n    android:orientation= vertical \n    android:paddingBottom= @dimen/activity_vertical_margin \n    android:paddingLeft= @dimen/activity_horizontal_margin \n    android:paddingRight= @dimen/activity_horizontal_margin \n    android:paddingTop= @dimen/activity_vertical_margin \n    tools:context= prof_itgroup.ru.storehouseapp.Activities.RegisterActivity \n     TextView\n        style= @style/label_style \n        android:text= @string/register_username  / \n     EditText\n        android:id= @+id/etUsername \n        style= @style/textStyle \n        android:hint= @string/register_username_hint / \n     TextView\n        android:layout_marginTop= 16dp \n        style= @style/label_style \n        android:text= @string/register_email  / \n     EditText\n        android:id= @+id/etEmail \n        style= @style/textStyle \n        android:hint= @string/register_email_hint / \n     TextView\n        android:layout_marginTop= 16dp \n        style= @style/label_style \n        android:text= @string/register_password  / \n     EditText\n        android:id= @+id/etPassword \n        style= @style/textStyle \n        android:inputType= textPassword \n        android:hint= @string/register_email_password / \n     EditText\n        android:id= @+id/etPasswordCheck \n        style= @style/textStyle \n        android:inputType= textPassword \n        android:hint= @string/register_email_password_again / \n     Button\n        android:layout_marginTop= 32dp \n        android:id= @+id/btnRegister \n        style= @style/textStyle \n        android:text= @string/btn_register_text /  /LinearLayout \nThis Activity is a new user registration screen, as shown in Figure 1.2   Figure 1.2 \u2014 a new user registration screen.  All document fields needed for a user registration are listed on this screen. Let's add the button click event handler for the \u00abRegister\u00bb button which will run the  .register  method of the  User  class, as shown below:  @OnClick(R.id.btnRegister)\npublic void onBtnRegisterClicked() {\n    String userName = etUsername.getText().toString();\n    String email = etEmail.getText().toString();\n    String password = etPassword.getText().toString();\n    String passwordCheck = etPasswordCheck.getText().toString();\n\n    if(isInputValid(userName, email, password, passwordCheck)) {\n        new User().register(userName, email, password, new CallbackRegisterUser() {\n            @Override\n            public void onRegisterSucceed() {\n                Toast.makeText(RegisterActivity.this, getResources().getString(R.string.register_succeed), Toast.LENGTH_SHORT).show();\n                LoginActivity.display(RegisterActivity.this);\n            }\n            @Override\n            public void onRegisterFailed(String errorCode, String errorMessage) {\n                Toast.makeText(RegisterActivity.this, getResources().getString(R.string.error_register), Toast.LENGTH_SHORT).show();\n            }\n        });\n    } else {\n        Toast.makeText(this, getResources().getString(R.string.wrong_data) , Toast.LENGTH_SHORT).show();\n    }\n}  In this method, we get values entered in the  EditText  elements, e.g.: a user name, their email, password and repeated password (for a check).  Then using the isInputValid method we check that the fields are not left empty and that the values, entered into the two password fields are identical. Afterwards, we can run the  .register  method of the  User  class.  In case the user registration was a success (i.e. if the SDK is initiated, all keys are correct and there is no conflict with existing users), the interface  onRegisterSucceed(...) callback  method will be executed. Otherwise it is the  onRegisterFailed(...)  method that will be executed.  In this case, if the registration is a success, a Toast message will be shown with a note that the user is registered. Then the  LoginActivity  activity begins so that the user can log in and start working with the application.", 
            "title": "New User Registration Screen."
        }, 
        {
            "location": "/Java/Storehouse/#application-main-screen", 
            "text": "Let's create the application main page called  MainActivity  and add the following xml code in the layout file of this Activity:  ?xml version= 1.0  encoding= utf-8 ?  RelativeLayout\n    xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:id= @+id/activity_main \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:paddingLeft= @dimen/activity_horizontal_margin \n    android:paddingRight= @dimen/activity_horizontal_margin \n    android:paddingTop= @dimen/activity_vertical_margin \n    android:paddingBottom= @dimen/activity_vertical_margin \n    tools:context= prof_itgroup.ru.storehouseapp.Activities.MainActivity \n     ListView\n        android:id= @+id/lvItemsInStorehouse \n        android:layout_width= match_parent \n        android:layout_height= wrap_content /  /RelativeLayout  This is the  ListView  Activity which we fill with the data about goods stored in the database. In addition, the Activity contains  ActionBar  icons. We will talk about them in some detail later on.   Let's create an adapter called  StoreItemAdapter  to show us the data with the following code:   package prof_itgroup.ru.storehouseapp.Objects;\nimport android.content.Context;\nimport android.support.annotation.NonNull;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.TextView;\nimport java.util.List;\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport prof_itgroup.ru.storehouseapp.Activities.ItemDetailsActivity;\nimport prof_itgroup.ru.storehouseapp.R;\nimport ru.profit_group.scorocode_sdk.scorocode_objects.DocumentInfo;\n\npublic class StoredItemsAdapter extends BaseAdapter {\n    private Context context;\n    private List DocumentInfo  storedItems;\n    private int layoutId;\n    private LayoutInflater inflater;\n    private DocumentFields fields;\n    public StoredItemsAdapter(Context context, @NonNull List DocumentInfo  storedItems, int layoutId) {\n        this.context = context;\n        this.storedItems = storedItems;\n        this.layoutId = layoutId;\n        inflater = LayoutInflater.from(context);\n        fields = new DocumentFields(context, null);\n    }\n    @Override\n    public int getCount() {\n        return storedItems.size();\n    }\n    @Override\n    public Object getItem(int position) {\n        return storedItems.get(position);\n    }\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n    @Override\n    public View getView(int position, View view, ViewGroup parent) {\n        ViewHolder holder;\n        if (view != null) {\n            holder = (ViewHolder) view.getTag();\n        } else {\n            view = inflater.inflate(layoutId, parent, false);\n            holder = new ViewHolder(view);\n            view.setTag(holder);\n        }\n        customizeView(view, holder, storedItems.get(position));\n        return view;\n    }\n    private void customizeView(View view, ViewHolder holder, final DocumentInfo documentInfo) {\n        String deviceName = (String) documentInfo.getFields().get(fields.getDeviceNameField());\n        String devicePlatform = (String) documentInfo.getFields().get(fields.getPlatformField());\n        Double devicePrice = (Double) documentInfo.getFields().get(fields.getDevicePriceField());\n        holder.tvStoredItemName.setText(deviceName);\n        holder.tvStoredItemStatus.setText(devicePlatform);\n        holder.tvStoredItemPrice.setText(String.valueOf(devicePrice));\n        view.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ItemDetailsActivity.display(context, documentInfo);\n            }\n        });\n    }\n    static class ViewHolder {\n        @BindView(R.id.tvStoredItemName) TextView tvStoredItemName;\n        @BindView(R.id.tvStoredItemPlatform) TextView tvStoredItemStatus;\n        @BindView(R.id.tvStoredItemPrice) TextView tvStoredItemPrice;\n        public ViewHolder(View view) {\n            ButterKnife.bind(this, view);\n        }\n    }\n}  We will use the following layout file as a list element:    ?xml version= 1.0  encoding= utf-8 ?  RelativeLayout xmlns:android= http://schemas.android.com/apk/res/android \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:orientation= horizontal \n    android:padding= 8dp \n     TextView\n        android:id= @+id/tvStoredItemName \n        style= @style/textStyle \n        android:layout_alignParentLeft= true \n        android:layout_toLeftOf= @+id/tvStoredItemPlatform \n        android:text= @string/storedItemName  / \n     TextView\n        android:id= @+id/tvStoredItemPlatform \n        style= @style/textStyle \n        android:layout_marginRight= 32dp \n        android:layout_toLeftOf= @+id/tvStoredItemPrice \n        android:text= @string/storedItemStatus  / \n     TextView\n        android:id= @+id/tvStoredItemPrice \n        style= @style/textStyle \n        android:layout_alignParentRight= true \n        android:text= @string/storedItemPrice  /  /RelativeLayout  We will get the data about stored goods in the  onResume()  method of the  MainActivity Activity. For this let's add the following code lines in the  onResume  method:  @Override\nprotected void onResume() {\n    super.onResume();\n    Query query = new Query(COLLECTION_NAME);\n    query.findDocuments(new CallbackFindDocument() {\n        @Override\n        public void onDocumentFound(List DocumentInfo  documentInfos) {\n            if(documentInfos != null) {\n                setAdapter(documentInfos);\n            }\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            Toast.makeText(MainActivity.this, getResources().getString(R.string.error_get_docs), Toast.LENGTH_SHORT).show();\n        }\n    });\n}  In this code we create a  Query  object sample without setting any parameters (i.e. we choose the first 100 documents from this collection) and then we get the documents from our collection with the  findDocument  method.  In case we were successful in finding the documents, we install the adapter. Otherwise, we transmit the error message.  Let's also add the icons we need in the  ActionBar  Activity. For this, we will create the  main_activity_menu  layout file and add the following xml code:  menu xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:app= http://schemas.android.com/apk/res-auto \n     item\n        android:id= @+id/action_add_item \n        android:icon= @drawable/ic_create_new_folder_white_24dp \n        android:title= @string/action_add_item \n        app:showAsAction= always / \n     item\n        android:id= @+id/action_set_filter \n        android:icon= @drawable/ic_filter_list_white_24dp \n        android:title= @string/action_filter_item \n        app:showAsAction= ifRoom / \n     item\n        android:id= @+id/action_logout \n        android:icon= @drawable/ic_exit_to_app_white_24dp \n        android:title= @string/action_logout_item \n        app:showAsAction= ifRoom /  /menu  This means that we will show icons \"Add an item to the database\", \"Set a filter\" and \"Logout\" in the   ActionBar . We can add these icons to the activity screen with the following code lines:  @Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main_activity_menu, menu);\n    return super.onCreateOptionsMenu(menu);\n}  We will handle icons clicks with the method described below:  @Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case R.id.action_add_item:\n            AddItemActivity.display(this);\n            break;\n\n        case R.id.action_set_filter:\n            new FilterDialog(this).showFilterDialog(new FilterDialog.CallbackFilterDialog() {\n                @Override\n                public void onFilterApplied(List DocumentInfo  documentInfo) {\n                    setAdapter(documentInfo);\n                }\n            });\n            break;\n\n        case R.id.action_logout:\n            LoginActivity.logout(this);\n            break;\n    }\n    return super.onOptionsItemSelected(item);\n}  The completed screen for this activity is shown in Figure 2.1   Figure 2.1 \u2014 main application screen  On this screen, we can see available mobile phone models which are kept in our storehouse. The following icons are shown in the right upper corner:   - Add new item (mobile phone model) to the database.   - Apply a filter to the list of items.   - End an active session (logout).      After clicking on the   button, a user switches to the item adding screen of the application.", 
            "title": "Application Main Screen."
        }, 
        {
            "location": "/Java/Storehouse/#add-an-item-screen", 
            "text": "Let's create an Acitivity called  AddItemActivity  and add the folowing xml code to its layout file:  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:id= @+id/activity_add_item \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:orientation= vertical \n    android:padding= 8dp \n    tools:context= prof_itgroup.ru.storehouseapp.Activities.AddItemActivity \n     ScrollView\n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         include layout= @layout/item_core / \n     /ScrollView  /LinearLayout  In turn, the activated item_core.xml file represents of the following lines:  LinearLayout android:layout_width= match_parent \n    android:layout_height= wrap_content \n    android:orientation= vertical \n    xmlns:android= http://schemas.android.com/apk/res/android \n     TextView\n        style= @style/label_style \n        android:text= @string/add_item_device_name  / \n     EditText\n        android:id= @+id/etDeviceName \n        style= @style/textStyle \n        android:hint= @string/add_item_hint_device_name  / \n     TextView\n        style= @style/label_style \n        android:text= @string/add_item_device_platform  / \n     EditText\n        android:id= @+id/etDevicePlatform \n        style= @style/textStyle \n        android:hint= @string/add_item_hint_device_platform  / \n     TextView\n        style= @style/label_style \n        android:text= @string/add_item_camera_info  / \n     EditText\n        android:id= @+id/etDeviceCameraInfo \n        style= @style/textStyle \n        android:hint= @string/add_item_hint_camera_info  / \n     TextView\n        style= @style/label_style \n        android:text= @string/add_item_available_colors_info  / \n     EditText\n        android:id= @+id/etDeviceColors \n        style= @style/textStyle \n        android:hint= @string/add_item_hint_available_colors_info  / \n     LinearLayout\n        android:id= @+id/llChangeColorList \n        android:visibility= gone \n        android:gravity= center_horizontal \n        android:orientation= horizontal \n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         Button\n            android:id= @+id/btnAddColor \n            android:padding= 12dp \n            android:layout_marginRight= 8dp \n            android:text= @string/add_color \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n         Button\n            android:id= @+id/btnRemoveColor \n            android:padding= 12dp \n            android:layout_marginLeft= 8dp \n            android:text= @string/remove_color \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n     /LinearLayout \n     TextView\n        style= @style/label_style \n        android:text= @string/add_item_price  / \n     EditText\n        android:id= @+id/etDevicePrice \n        style= @style/textStyle \n        android:inputType= number \n        android:hint= @string/add_item_hint_available_amount_info  / \n     LinearLayout\n        android:id= @+id/llChangePrice \n        android:visibility= gone \n        android:gravity= center_horizontal \n        android:orientation= horizontal \n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         Button\n            android:id= @+id/btnIncreaseCount \n            android:padding= 8dp \n            android:layout_marginRight= 8dp \n            android:text= @string/increase_item_count \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n         Button\n            android:id= @+id/btnDecreaseCount \n            android:padding= 8dp \n            android:layout_marginLeft= 8dp \n            android:text= @string/decrease_item_count \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n     /LinearLayout \n     LinearLayout\n        android:orientation= vertical \n        android:gravity= center \n        android:layout_gravity= center \n        android:layout_width= 200dp \n        android:layout_height= wrap_content \n        android:weightSum= 1 \n         Button\n            android:id= @+id/btnAddItem \n            android:padding= 8dp \n            android:background= #64b5f6 \n            android:textColor= @android:color/white \n            android:layout_width= match_parent \n            android:layout_height= wrap_content \n            android:layout_gravity= center_horizontal \n            android:layout_marginTop= 8dp \n            android:text= @string/add  / \n         Button\n            android:id= @+id/btnClear \n            android:padding= 8dp \n            android:background= #64b5f6 \n            android:textColor= @android:color/white \n            android:layout_width= match_parent \n            android:layout_height= wrap_content \n            android:layout_gravity= center_horizontal \n            android:layout_marginTop= 8dp \n            android:text= @string/button_clear \n            android:layout_weight= 0.22  / \n     /LinearLayout  /LinearLayout  The final activity screen is shown in Fugure 2.2   Figure 2.2 \u2014 Add an Item screen.  On this screen, a user enters all necessary information about the device (item) and presses on the \u00abADD\u00bb button. With this, the program creates a new document, fills its fields and saves on a server. Let's add the following activities: defining a click handler for the \u00abADD\u00bb button which will run the method described below:  @OnClick(R.id.btnAddItem)\npublic void onBtnAddItemClicked() {\n    Document document = new Document(MainActivity.COLLECTION_NAME);\n    if (isAllFieldsFilled()) {\n        document.setField(fields.getDeviceNameField(), getStringFrom(etDeviceName).trim());\n        document.setField(fields.getPlatformField(), getStringFrom(etDevicePlatform).trim());\n        document.setField(fields.getCameraInfoField(), getStringFrom(etDeviceCameraInfo).trim());\n        document.setField(fields.getColorsAvailableField(), getColorsListFrom(getStringFrom(etDeviceColors)));\n        document.setField(fields.getDevicePriceField(), Double.valueOf(getStringFrom(etDevicePrice)));\n        document.saveDocument(new CallbackDocumentSaved() {\n            @Override\n            public void onDocumentSaved() {\n                Toast.makeText(AddItemActivity.this, getString(R.string.succed_add_item), Toast.LENGTH_SHORT).show();\n                finish();\n            }\n\n            @Override\n            public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                Toast.makeText(AddItemActivity.this, getString(R.string.error_add_item), Toast.LENGTH_SHORT).show();\n            }\n        });\n    } else {\n        Toast.makeText(this, getString(R.string.wrong_data), Toast.LENGTH_SHORT).show();\n    }\n}  In this method we create a sample of the  Document  class, check whether a user has provided all necessary information in the corresponding  EditText  fields and set the document fields with the  setField(\u2026)  method. Then we save the document. Since the document was created without a connection with a real document form the database (i.e. without using the  getDocumentById()  method), the new created document with the set fields will be uploaded to a server.  Documents are stored in the Scorocode database as shown on Figure 2.3   Figure 2.3 \u2014 storing documents in the Scorocode database.  Each document contains system and user's fields.\nSystem fields are:   id \u2014 unique document ID in the collection.  readACL \u2014 permission to read this document.  updateACL \u2014 permission to update this document.  removeACL \u2014 permission to delete this document.  createdAt \u2014 time of the document creation.  updatedAt - time of the document last update.   A user can add other fields at their discretion with the \u00abAdd a field\u00bb button in the upper panel. They can also add a document with the \u00abAdd a document\u00bb button in the upper panel and enter data in the fields manually. For more information on the database upper panel features, please, see Scorocode documentation.  When clicking on the   button a user enter the filter dialog screen.  Let's create this filter dialog screen. For this, we need to create the  FilterDialog  class using the following code:  package prof_itgroup.ru.storehouseapp.Objects;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.support.v7.app.AlertDialog;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport butterknife.ButterKnife;\nimport prof_itgroup.ru.storehouseapp.Activities.MainActivity;\nimport prof_itgroup.ru.storehouseapp.Helpers.Helper;\nimport prof_itgroup.ru.storehouseapp.R;\nimport ru.profit_group.scorocode_sdk.Callbacks.CallbackFindDocument;\nimport ru.profit_group.scorocode_sdk.scorocode_objects.DocumentInfo;\nimport ru.profit_group.scorocode_sdk.scorocode_objects.Query;\n\npublic class FilterDialog {\n    private Context context;\n    public FilterDialog(Context context) {\n        this.context = context;\n    }\n    public void showFilterDialog(final CallbackFilterDialog callbackFilterDialog) {\n        final View v = LayoutInflater.from(context).inflate(R.layout.filter_layout, null);\n        final CheckBox cbPriceFilter = ButterKnife.findById(v, R.id.cbPriceFilter);\n        final CheckBox cbPlatformFilter = ButterKnife.findById(v, R.id.cbPlatformFilter);\n        final CheckBox cbColourFilter = ButterKnife.findById(v, R.id.cbColorFilter);\n        final EditText etPlatformFilter = ButterKnife.findById(v, R.id.etPlatformFilter);\n        final EditText etColors = ButterKnife.findById(v, R.id.etColors);\n        AlertDialog.Builder builder = new AlertDialog.Builder(context)\n                .setTitle(R.string.titleChooseFilterProperties)\n                .setPositiveButton(R.string.continue_action, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        Query query = new Query(MainActivity.COLLECTION_NAME);\n                        if (cbPriceFilter.isChecked()) {\n                            setPriceFilter(v, query);\n                        }\n                        if (cbPlatformFilter.isChecked()) {\n                            query.equalTo(new DocumentFields(context).getPlatformField(), etPlatformFilter.getText().toString());\n                        }\n                        if(cbColourFilter.isChecked()) {\n                            List Object  colors = new ArrayList ();\n                            colors.addAll(Arrays.asList(Helper.getStringFrom(etColors).split( , )));\n                            query.containedIn(new DocumentFields(context).getColorsAvailableField(), colors);\n                        }\n                        query.findDocuments(new CallbackFindDocument() {\n                            @Override\n                            public void onDocumentFound(List DocumentInfo  documentInfos) {\n                                 callbackFilterDialog.onFilterApplied(documentInfos);\n                            }\n                            @Override\n                            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                                Helper.showToast(context, R.string.error);\n                            }\n                        });\n                    }\n                }).setView(v);\n        builder.show();\n    }\n    private void setPriceFilter(View view, Query query) {\n        String priceField = new DocumentFields(view.getContext()).getDevicePriceField();\n        final CheckBox cbIncludeLower = ButterKnife.findById(view, R.id.cbIncludeLower);\n        final CheckBox cbIncludeUpper = ButterKnife.findById(view, R.id.cbIncludeUpper);\n        final EditText etLowerPrice = ButterKnife.findById(view, R.id.etPriceFrom);\n        final EditText etUpperPrice = ButterKnife.findById(view, R.id.etPriceTo);\n        if(cbIncludeLower.isChecked()) {\n            query.greaterThenOrEqualTo(priceField, getPrice(etLowerPrice));\n        } else {\n            query.greaterThan(priceField, getPrice(etLowerPrice));\n        }\n        if(cbIncludeUpper.isChecked()) {\n            query.lessThanOrEqualTo(priceField, getPrice(etUpperPrice));\n        } else {\n            query.lessThan(priceField, getPrice(etUpperPrice));\n        }\n    }\n    private Double getPrice(EditText etPrice) {\n        String price = etPrice.getText().toString();\n        Double priceDouble = 0d;\n        if(!price.isEmpty()) {\n            priceDouble = Double.valueOf(price);\n        }\n        return priceDouble;\n    }\n    public interface CallbackFilterDialog {\n        void onFilterApplied(List DocumentInfo  documentInfo);\n    }\n}  In the  showFilterDialog  method we create  AlertDialog  and set its  View  from the following layout file:    ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    android:orientation= vertical \n    android:padding= 16dp \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n     include layout= @layout/price_filter_layout  / \n\n     include layout= @layout/dilimeter  / \n\n     include layout= @layout/platform_filter  / \n\n     include layout= @layout/dilimeter  / \n\n     LinearLayout\n        android:orientation= horizontal \n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         CheckBox\n            android:id= @+id/cbColorFilter \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n         TextView\n            android:text= @string/colorsFilter \n            style= @style/label_style / \n         EditText\n            android:id= @+id/etColors \n            android:layout_marginLeft= 16dp \n            android:hint= @string/color_filter_hint \n            style= @style/label_style  / \n     /LinearLayout  /LinearLayout  The layout files  price_filter_layout  and  platform_filter  are shown below:  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:orientation= vertical \n    android:layout_width= match_parent \n    android:layout_height= wrap_content \n    tools:showIn= @layout/filter_layout \n     LinearLayout\n        android:orientation= horizontal \n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         CheckBox\n            android:id= @+id/cbPriceFilter \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n         TextView\n            android:layout_marginLeft= 8dp \n            android:layout_marginStart= 8dp \n            android:text= @string/filter_price_from \n            style= @style/label_style  / \n         EditText\n            android:id= @+id/etPriceFrom \n            android:layout_marginLeft= 4dp \n            android:layout_marginStart= 4dp \n            android:minWidth= 60dp \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n         TextView\n            android:text= @string/filter_price_up_to \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content  / \n         EditText\n            android:id= @+id/etPriceTo \n            android:layout_marginLeft= 4dp \n            android:layout_marginStart= 4dp \n            android:minWidth= 60dp \n            style= @style/label_style / \n     /LinearLayout \n     RelativeLayout\n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         LinearLayout\n            android:id= @+id/llLowerBound \n            android:layout_marginLeft= 32dp \n            android:layout_alignParentLeft= true \n            android:orientation= horizontal \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content \n             CheckBox\n                android:id= @+id/cbIncludeLower \n                android:layout_width= wrap_content \n                android:layout_height= wrap_content  / \n             TextView\n                android:layout_gravity= fill \n                android:text= @string/include_lower \n                style= @style/label_style  / \n         /LinearLayout \n         LinearLayout\n            android:layout_marginLeft= 160dp \n            android:orientation= horizontal \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content \n             CheckBox\n                android:id= @+id/cbIncludeUpper \n                android:layout_width= wrap_content \n                android:layout_height= wrap_content  / \n             TextView\n                android:layout_gravity= fill \n                android:text= @string/include_upper \n                style= @style/label_style  / \n         /LinearLayout \n     /RelativeLayout  /LinearLayout  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:orientation= horizontal \n    android:layout_width= wrap_content \n    android:layout_height= wrap_content \n    tools:showIn= @layout/filter_layout \n     CheckBox\n        android:id= @+id/cbPlatformFilter \n        android:layout_width= wrap_content \n        android:layout_height= wrap_content  / \n     TextView\n        android:layout_marginLeft= 8dp \n        android:layout_marginStart= 8dp \n        android:text= @string/filter_platform \n        style= @style/label_style  / \n     EditText\n        android:id= @+id/etPlatformFilter \n        android:layout_marginLeft= 4dp \n        android:layout_marginStart= 4dp \n        android:minWidth= 60dp \n        android:layout_width= wrap_content \n        android:layout_height= wrap_content  /  /LinearLayout  The filter dialog screen is shown in Figure 2.4   Figure 2.4 \u2014 filter dialog screen.  On this dialog screen, a user can specify database sample criteria as follows:  Device price  Device platform (Android or iOS, plus operation system version number).\n* Available colours.  When pressing the \u00abContinue\u00bb button, we check whether the CheckBox elements were chosen and, if yes, we set the corresponding filter.  Code listing for setting a filter:    public void showFilterDialog(final CallbackFilterDialog callbackFilterDialog) {\n    final View v = LayoutInflater.from(context).inflate(R.layout.filter_layout, null);\n    final CheckBox cbPriceFilter = ButterKnife.findById(v, R.id.cbPriceFilter);\n    final CheckBox cbPlatformFilter = ButterKnife.findById(v, R.id.cbPlatformFilter);\n    final CheckBox cbColourFilter = ButterKnife.findById(v, R.id.cbColorFilter);\n    final EditText etPlatformFilter = ButterKnife.findById(v, R.id.etPlatformFilter);\n    final EditText etColors = ButterKnife.findById(v, R.id.etColors);\n\n    AlertDialog.Builder builder = new AlertDialog.Builder(context)\n            .setTitle(R.string.titleChooseFilterProperties)\n            .setPositiveButton(R.string.continue_action, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    Query query = new Query(MainActivity.COLLECTION_NAME);\n                    if (cbPriceFilter.isChecked()) {\n                        setPriceFilter(v, query);\n                    }\n\n                    if (cbPlatformFilter.isChecked()) {\n                        query.equalTo(new DocumentFields(context).getPlatformField(), etPlatformFilter.getText().toString());\n                    }\n\n                    if(cbColourFilter.isChecked()) {\n                        List Object  colors = new ArrayList ();\n                        colors.addAll(Arrays.asList(Helper.getStringFrom(etColors).split( , )));\n                        query.containedIn(new DocumentFields(context).getColorsAvailableField(), colors);\n                    }\n                    query.findDocuments(new CallbackFindDocument() {\n                        @Override\n                        public void onDocumentFound(List DocumentInfo  documentInfos) {\n                             callbackFilterDialog.onFilterApplied(documentInfos);\n                        }\n                        @Override\n                        public void onDocumentNotFound(String errorCode, String errorMessage) {\n                            Helper.showToast(context, R.string.error);\n                        }\n                    });\n                }\n            }).setView(v);\n    builder.show();\n}\n\nprivate void setPriceFilter(View view, Query query) {\n    String priceField = new DocumentFields(view.getContext()).getDevicePriceField();\n    final CheckBox cbIncludeLower = ButterKnife.findById(view, R.id.cbIncludeLower);\n    final CheckBox cbIncludeUpper = ButterKnife.findById(view, R.id.cbIncludeUpper);\n    final EditText etLowerPrice = ButterKnife.findById(view, R.id.etPriceFrom);\n    final EditText etUpperPrice = ButterKnife.findById(view, R.id.etPriceTo);\n    if(cbIncludeLower.isChecked()) {\n        query.greaterThenOrEqualTo(priceField, getPrice(etLowerPrice));\n    } else {\n        query.greaterThan(priceField, getPrice(etLowerPrice));\n    }\n    if(cbIncludeUpper.isChecked()) {\n        query.lessThanOrEqualTo(priceField, getPrice(etUpperPrice));\n    } else {\n        query.lessThan(priceField, getPrice(etUpperPrice));\n    }\n}  A filter can be set as follows: we create a  Query  object, taking samples from our collection. If the price filter is applied (it is ticked off), then we choose only the devices within the set price range in our database.  The price range is set with the following methods:  greaterThan sets the lower price limit (excluding the quoted price number).  lessThan sets the upper price limit (excluding the quoted price number).  greaterThanOrEqualTo sets the lower price limit including the quoted price number.   lessThanOrEqualTo sets the upper price limit including the quoted price number.  Platform search is set using the  equalTo(field, value)  method of the  Query  class which tells to an instance of the class to leave inside the sample only the documents whose field value in the  field  parameter corresponds to the  value . As an example in our case, we can find all Android 7.0 devices by setting  query.equalTo(\u00abplatform\u00bb, \u00abAndroid 7.0\u00bb); .  Colour search is set using the  containedIn  method of the  Query  class which leaves leave inside the sample only the documents  whose fields (array) contains all elements of the given array.  With this we form a query for the given database collection and receive copies of the  DocumentInfo  class which characterize the documents appropriate for this query. We pass this information in the Activity using a callback and them we update the information.  When pressing the   button we end the user active session (logout) so the user is back at the Launch Screen.  To achieve this we need to set a click event handler for this button, it will run  logout  of the  User  class to end the active session:  public static void logout(final Context context) {\n    LocalPersistence.writeObjectToFile(context, null, LocalPersistence.FILE_USER_INFO);\n    new User().logout(new CallbackLogoutUser() {\n        @Override\n        public void onLogoutSucceed() {\n            display(context);\n        }\n\n        @Override\n        public void onLogoutFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.error);\n        }\n    });\n} \nIn this method, as our first step we need to take is to delete the user data file (the file is stored locally and is used to check whether the user was identified). Then we use the  logout(\u2026)  method of the  User  class which ends the user active session.  In case the session was ended successfully the  onLogoutSucceed(...) callback  iterface method will be executed. Otherwise, it is the   onLogoutFailed(...)  method that will be executed.", 
            "title": "Add an Item Screen"
        }, 
        {
            "location": "/Java/Storehouse/#device-details-screen", 
            "text": "When pressing on any element of the device list on the application main screen, a user moves to the screen with detailed information about the chosen device.  Let's create an Activity called  ItemDetailsInfo  and add the following xml code to its layout file:  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:id= @+id/activity_detailed_item_info \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:padding= 16dp \n    android:orientation= vertical \n    tools:context= prof_itgroup.ru.storehouseapp.Activities.ItemDetailsActivity \n     ScrollView\n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n             include layout= @layout/item_core / \n     /ScrollView  /LinearLayout  As you can see, the Activity layout file re-uses xml code of the Add an Item screen yet this screen also presents a possibility to switch to the Edit mode, i.e. to activate hidden  View  of the screen.  In  ActionBar  of the screen we will also add icons to edit a device entry (document), to remove a device entry (document) and to proceed to the delivery information screen.  To set the icons in  ActionBar  let's create a layout file called  detailed_info_menu  and add to it the following code lines:  menu xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:app= http://schemas.android.com/apk/res-auto \n     item\n        android:id= @+id/action_edit_item \n        android:title= @string/action_edit_item \n        android:icon= @drawable/ic_mode_edit_white_24dp \n        app:showAsAction= always / \n\n     item\n        android:id= @+id/action_remove_item \n        android:title= @string/action_remove_item \n        android:icon= @drawable/ic_delete_forever_white_24dp \n        app:showAsAction= ifRoom / \n\n      item\n        android:id= @+id/action_prepare_item \n        android:icon= @drawable/ic_assignment_white_24dp \n        android:title= @string/action_prepare_item \n        app:showAsAction= ifRoom /  /menu  Inside the Activity let's add the following method:  @Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.detailed_info_menu, menu);\n    return super.onCreateOptionsMenu(menu);\n}  which will install icons into  ActionBar .  We will handle clicks on buttons with the method described below:   @Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case android.R.id.home:\n            finish();\n            break;\n        case R.id.action_edit_item:\n            setEditMode(true);\n            break;\n        case R.id.action_remove_item:\n            DocumentHelper.fetchAndRemoveDocument(this, document, getDocumentInfo());\n            break;\n        case R.id.action_prepare_item:\n            SendItemActivity.display(this, getDocumentInfo());\n            break;\n    }\n    return super.onOptionsItemSelected(item);\n}  As a result we should get the screen shown in Figure 3.1   Figure 3.1 \u2014 device details screen.  The following icons are located in the right upper side of the screen:   Edit device info   Remove this device from the database   Switch to the device shipping info.  When a user presses the   button, the sreen switches to the edit mode. To do so let's make these buttons visible: \"Add colour\", \"Remove colour\", \"Increase store price\", \"Lower store price\". Device details screen in the edit mode is shown in Figure 3.2.    Figure 3.2 \u2014 Device details screen in the edit mode  Let's define the click event handler for the \u00abChange Item\u00bb button which will execute the following code:  private void updateItemDocument() {\n    document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(DocumentInfo documentInfo) {\n            document.updateDocument()\n                    .set(fields.getDeviceNameField(), getStringFrom(etDeviceName))\n                    .set(fields.getPlatformField(), getStringFrom(etDevicePlatform))\n                    .set(fields.getCameraInfoField(), getStringFrom(etDeviceCameraInfo));\n            setColorsUpdateInfo();\n            document.updateDocument().inc(fields.getDevicePriceField(), increaseCount);\n            document.saveDocument(new CallbackDocumentSaved() {\n                @Override\n                public void onDocumentSaved() {\n                    setEditMode(false);\n                    for (String color : deviceColors.keySet()) {\n                        deviceColors.put(color, ColorState.FROM_DB);\n                    }\n                    document.updateDocument().getUpdateInfo().clear();\n                }\n                @Override\n                public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                    showToast(R.string.error_update_item);\n                    setFields();\n                }\n            });\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            showToast(R.string.error_update_item);\n            setFields();\n        }\n    });\n}\nprivate void setColorsUpdateInfo() {\n    for (String color : deviceColors.keySet()) {\n        ColorState colorState = deviceColors.get(color);\n        switch (colorState) {\n            case TO_REMOVE:\n                document.updateDocument().pull(fields.getColorsAvailableField(), color);\n                break;\n\n            case NEW:\n                document.updateDocument().push(fields.getColorsAvailableField(), color);\n                break;\n        }\n    }\n}  To update device information we use the  updateDocument()  method of the  Document  class. In this case, the instance of the Document class wich we are updating should be linked to a real document in the database using the  getDocumentById  method. New values for the fileds below are set with the  set(field, value)  method of the  Update  class.   Device Name ( deviceName field in the database)  Device OS (platform field in the database)  Camera Information (deviceCameraInfo)   The  \u00abdevice price\u00bb field (devicePrice in the database) is set with the  .inc(field, value)  mehod of the  Update  class. When we increase the price, we use positive prarameter values, and when we decrease it, then we use the negative ones.  The \u00abavaliable colours\u00bb field (colorsAvailable in the database) is set with the  .push()  method (to add a colour) and the  .pull()  method (to remove a colour).  Let's look again at the  updateItemDocument(...)  method: to update the document fields we need to verify that such document exists  and to link our instance of the  Document  class to a document in the database. To do so we can use the  .getDocumentById(\u2026)  method of the  Document  class.  After we have linked our document to the database one, we receive an object of the  Update  class using the  .updateDocument()  method. With that object we set a device name, OS and camera informaton using the  .set(\u2026)  method.  We can add to the array  (with the  .push()  method) or remove from the array (with the  .pull  method) avaliable colours for this device and change its price in the price field (with the  .inc()  method). When all udates are done in our instance of the  Update  class, we save the document using the   .saveDocument(\u2026)  method of the  Document  class.  Since we received the document via linking it with another document from the database, (using the  .getDocumentById  method), the result of running  .saveDocument(\u2026)  is an updated documet, not a new one.  Let's consider the   button - when pressed, the information is about a device is deleted from the database. To do so, we can add a click event handler which would trigger a method shown below:  public static void fetchAndRemoveDocument(final Context context, final Document document, DocumentInfo documentInfo) {\n    document.getDocumentById(documentInfo.getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(DocumentInfo documentInfo) {\n            removeDocument(context, document);\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.error_document_not_removed);\n        }\n    });\n}\npublic static void removeDocument(final Context context, Document document) {\n        document.removeDocument(new CallbackRemoveDocument() {\n            @Override\n            public void onRemoveSucceed(ResponseRemove responseRemove) {\n                Toast.makeText(context, context.getString(R.string.document_removed), Toast.LENGTH_SHORT).show();\n                ((Activity) context).finish();\n            }\n            @Override\n            public void onRemoveFailed(String errorCode, String errorMessage) {\n                Toast.makeText(context, context.getString(R.string.error_document_not_removed), Toast.LENGTH_SHORT).show();\n            }\n        });\n}  Let's consider this method in more detail. At first we use the  .getDocumentById(...)  method of the  Document  class to check whether a document exists and to link this document with our created instance of the  Document  class.  After we verified the document we can execute the  .removeDocument()  method of the  Document  class which deletes the document form the database.  The   button switches a screen to the screen with device shipping information.", 
            "title": "Device Details Screen."
        }, 
        {
            "location": "/Java/Storehouse/#device-shipping-info-screen", 
            "text": "Let's create a new activity called  SendItemActivity  and add the following xml code lines into its layout file:  ?xml version= 1.0  encoding= utf-8 ?  LinearLayout xmlns:android= http://schemas.android.com/apk/res/android \n    xmlns:tools= http://schemas.android.com/tools \n    android:id= @+id/activity_send_item \n    android:layout_width= match_parent \n    android:layout_height= match_parent \n    android:padding= 16dp \n    android:orientation= vertical \n    tools:context= prof_itgroup.ru.storehouseapp.Activities.SendItemActivity \n     LinearLayout\n        android:id= @+id/llWaitingUsers \n        android:orientation= vertical \n        android:layout_width= match_parent \n        android:layout_height= wrap_content \n         TextView\n            style= @style/label_style \n            android:textColor= @android:color/black \n            android:text= @string/action_waiting_list / \n         TextView\n            android:id= @+id/tvWaitingUsers \n            style= @style/label_style / \n         TextView\n            android:id= @+id/tvLastChangeLabel \n            android:textColor= @android:color/black \n            android:layout_marginTop= 8dp \n            style= @style/label_style \n            android:text= @string/last_change / \n         TextView\n            android:id= @+id/tvLastChange \n            style= @style/label_style / \n         LinearLayout\n            android:id= @+id/llInfoContainer \n            android:orientation= vertical \n            android:layout_width= match_parent \n            android:layout_height= wrap_content \n             RelativeLayout\n                android:layout_width= match_parent \n                android:layout_height= wrap_content \n                 TextView\n                    android:layout_marginTop= 8dp \n                    android:textColor= @android:color/black \n                    android:text= @string/item_info \n                    style= @style/label_style  / \n                 TextView\n                    android:id= @+id/tvEdit \n                    android:layout_alignParentRight= true \n                    android:layout_marginTop= 10dp \n                    android:text= @string/editInfo \n                    android:textColor= @color/colorPrimary \n                    android:layout_width= wrap_content \n                    android:layout_height= wrap_content  / \n             /RelativeLayout \n             ScrollView\n                android:layout_marginTop= 8dp \n                android:layout_width= wrap_content \n                android:layout_height= 180dp \n                 EditText\n                    android:id= @+id/etItemInfo \n                    android:enabled= false \n                    android:layout_width= wrap_content \n                    android:layout_height= 180dp  / \n             /ScrollView \n         /LinearLayout \n     /LinearLayout \n     LinearLayout\n        android:orientation= vertical \n        android:layout_gravity= center_horizontal \n        android:layout_width= wrap_content \n        android:layout_height= wrap_content \n         Button\n            android:layout_marginTop= 8dp \n            android:layout_gravity= center_horizontal \n            android:id= @+id/btnAppUserInList \n            android:text= @string/addUserInList \n            android:layout_width= match_parent \n            android:layout_height= wrap_content  / \n         Button\n            android:layout_marginTop= 8dp \n            android:layout_gravity= center_horizontal \n            android:id= @+id/btnSendToUser \n            android:text= @string/sendToUser \n            android:layout_width= match_parent \n            android:layout_height= wrap_content  / \n     /LinearLayout  /LinearLayout  The created screen is shown in Figure 4.1   Figure 4.1 \u2014 Device Shipping Info Screen  When the \u00abADD BUYER\u00bb button is pressed, a dialog screen appears where one can enter information about a buyer. Afterwards, the following code is run:  private void addBuyerAndRefreshWaitingList(final String buyerInfo) {\n    if(!buyerInfo.trim().isEmpty()) {\n        document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n            @Override\n            public void onDocumentFound(DocumentInfo documentInfo) {\n                document.updateDocument().push(fields.getBuyersField(), buyerInfo);\n                document.saveDocument(new CallbackDocumentSaved() {\n                    @Override\n                    public void onDocumentSaved() {\n                        document.updateDocument().getUpdateInfo().clear();\n                        refreshWaitingList();\n                        showToast(getBaseContext(), R.string.add_waiting_buyer);\n                    }\n                    @Override\n                    public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                        showToast(getBaseContext(), R.string.error);\n                    }\n                });\n            }\n            @Override\n            public void onDocumentNotFound(String errorCode, String errorMessage) {\n                showToast(getBaseContext(), R.string.error);\n            }\n        });\n    }\n}  Let's consider the method in more details. At first, we use verify that the buyer's name field is not empty. In case a user did provide with the buyer's information, the instance of the  Document  class is linked to the document in the database. Afterwards, the document data is updated and the entered information about the buyer is added to the end of the buyers array with the  .push()  method of the  Update  class. This is how a queue is formed which consists of buyers waiting for thier goods shipment.    When the \u00abSHIP TO BUYER\u00bb button is pressed, the first client in the waiting clients queue array gets deleted. Alongside this, the latest shipment time should be recorded and the employees should be notified about it (e.g. movers, delivery drivers, accountants). \nTo do this, we can add a click event handler which executes the following method:  @OnClick(R.id.btnSendToUser)\npublic void onSendToUserButtonClicked() {\n    document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(final DocumentInfo documentInfo) {\n            document.updateDocument()\n                    .popFirst(fields.getBuyersField())\n                    .setCurrentDate(fields.getLastSendField());\n\n         document.saveDocument(new CallbackDocumentSaved() {\n                @Override\n                public void onDocumentSaved() {\n                    document.updateDocument().getUpdateInfo().clear();\n                    new ItemNotificator(getBaseContext(), documentInfo.getId(), fields.getDeviceName()).notifyPersonalAboutItemSend();\n                    new BalanceNotificator(getBaseContext()).refreshCompanyBalance();\n                    etItemInfo.setVisibility(View.VISIBLE);\n                    etItemInfo.append(fields.getLastSendTime());\n                    refreshWaitingList();\n                }\n\n               @Override\n                public void onDocumentSaveFailed(String errorCode, String errorMessage) {\n                    showToast(getBaseContext(), R.string.error);\n                }\n            });\n }  In this method, we can see a  Document  class instance being linked to a document from the database with the  .getDocumentById()  method of the  Document  class. We use its  .popFirst  method which deletes the first element of an array (imitating attending to the first person in a queue). Furthermore, the time of the last shipment is recorded in the field called \"Last shipment occurred...\" (lastSend in the database) using the  .setCurrentDate(\u2026)  method of the  Update  class.  The screen also contains comments about the shipment, which are stored in the document file (sendInfo field of the File type). By default, this file does not exist and the text screen shows \"No comments about the device...\". A user can press the Edit button, change the shipment comment and press the Save button. It will execute the following method:    public static void uploadFile(final Context context, Document document, String content) {\n    document.uploadFile(new DocumentFields(context).getSendInfoField(), FILE_NAME, encode(content.getBytes()),\n        new CallbackUploadFile() {\n        @Override\n        public void onDocumentUploaded() {\n        //file loaded\n        }\n\n        @Override\n        public void onDocumentUploadFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.error);\n        }\n    });\n}  This method uploads the file into a document field (File type) in the database. The document should be linked with the  getDocumentById(\u2026)  method. A similar routine happens when a document is deleted from the database.   Waiting users' information and shipment comments are retrieved from the server using the method shown below:  private void refreshWaitingList() {\n    document.getDocumentById(getDocumentInfo().getId(), new CallbackGetDocumentById() {\n        @Override\n        public void onDocumentFound(DocumentInfo documentInfo) {\n            fields.setDocumentInfo(documentInfo);\n            tvWaitingUsers.setText(fields.getBuyers());\n            tvLastChange.setText(fields.getLastSendTime());\n            llWaitingUsers.setVisibility(fields.getBuyers().isEmpty() ? View.GONE : View.VISIBLE);\n            tvLastChangeLabel.setVisibility(fields.getLastSendTime().isEmpty() ? View.GONE : View.VISIBLE);\n            tvLastChange.setVisibility(fields.getLastSendTime().isEmpty() ? View.GONE : View.VISIBLE);\n            btnSendToUser.setVisibility(fields.getBuyers().isEmpty() ? View.GONE : View.VISIBLE);\n            document.getFileContent(fields.getSendInfoField(), FileHelper.FILE_NAME, new CallbackGetFile() {\n                @Override\n                public void onSucceed(String fileContent) {\n                    if(fileContent != null   !fileContent.trim().isEmpty()) {\n                        etItemInfo.setText(fileContent);\n                    } else {\n                        etItemInfo.setText(R.string.no_info);\n                    }\n                }\n                @Override\n                public void onFailed(String errorCode, String errorMessage) {\n                    showToast(getBaseContext(), R.string.error);\n                }\n            });\n        }\n        @Override\n        public void onDocumentNotFound(String errorCode, String errorMessage) {\n            tvWaitingUsers.setVisibility(View.GONE);\n        }\n    });\n}  In this method, we can see a  Document  class instance being linked to a document from the database, which leads to the following fields updating on the screen:\n1. users waiting queue list \n2. time of the last shipment\n3. setting visibility of different elements depending on the content   Using the  getFileContent  method of the  Document  class we can receive the file contents as a line (with formating). The line then is set in the comment field.   Lets also create the  ItemNotificator  class and add the  notifyPersonalAboutItemSend()  method to it. The method will be called when a device is shipped to a user. Its code is shown below:  ```public void notifyPersonalAboutItemSend() {\n    sendPushToLoaderPerson();\n    sendEmailInAccountingDepartment();\n    sendSmsToDeliveryPerson();\n} \nThis method is notifying the employees stating that the device is ready for shipment. It does so by:\n\n- sending a push notification to a mover with the following:\n\n```Java\nprivate void sendPushToLoaderPerson() {\n    Query query = new Query( roles );\n    query.equalTo( name ,  loaderPerson );\n    query.equalTo( isFree , true);\n    query.setLimit(1);\n\n    MessagePush messagePush = new MessagePush(context.getString(R.string.you_should_take) + getItemInfo() + context.getString(R.string.and_prepare), null);\n    message.sendPush(messagePush, query, new CallbackSendPush() {\n        @Override\n        public void onPushSended() {\n            Helper.showToast(context, R.string.push_sended);\n        }\n        @Override\n        public void onPushSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.cant_send_push);\n        }\n    });\n}   sending a text (sms) to a delivery person:    private void sendSmsToDeliveryPerson() {\n    Query query = new Query( roles );\n    query.equalTo( name ,  deliveryPerson );\n    query.equalTo( isFree , true);\n    query.setLimit(1);\n\n    MessageSms messageSms = new MessageSms(context.getString(R.string.take_item) + getItemInfo());\n    message.sendSms(messageSms, query, new CallbackSendSms() {\n        @Override\n        public void onSmsSended() {\n            Helper.showToast(context, R.string.sms_was_sended);\n        }\n\n        @Override\n        public void onSmsSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.cant_send_sms);\n        }\n    });\n}   sending an email to the accountants' office:   private void sendEmailInAccountingDepartment() {\n    Query query = new Query( roles );\n    query.equalTo( name ,  accountantPerson );\n\n    MessageEmail messageEmail = new MessageEmail(context.getString(R.string.from), context.getString(R.string.device) + getItemInfo() , context.getString(R.string.device) + getItemInfo() + context.getString(R.string.sold));\n    message.sendEmail(messageEmail, query, new CallbackSendEmail() {\n        @Override\n        public void onEmailSend() {\n            Helper.showToast(context, R.string.email_was_sended);\n        }\n        @Override\n        public void onEmailSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.string.cant_send_email);\n        }\n    });\n}  Let's consider how these methods work in detail:   In the  sendEmailInAccountingDepartment  method the following happens: the \u00abaccountantPerson\u00bb role is chosen from the roles collection and all users with this role are sent emails using the  .sendEmail()  method of the  Message  class.  In the  sendSmdToDeliveryPerson  method the following happens: one unoccupied employee ( setLimit(1)  and  sFree == true  conditions) with the \u00abdeliveryPerson\u00bb role is chosen from the roles collection and is sent a text (sms) using the  .sendSms  method of the  Message  class.  In the  sendSmdToLoaderPerson  method the following happens: one unoccupied employee ( setLimit(1)  and  sFree == true  conditions) with the \u00abloaderPerson\u00bb role is chosen from the roles collection and is sent a push notification using the  .sendPush  method of the  Message  class.   After the \"SHIP TO BUYER\" button is pushed the  refreshCompanyBalance()  method of the  BalanceNotivicator  class is executed.  The  resreshCompanyBalance()  method listing:  public void refreshCompanyBalance() {\n    Script script = new Script();\n    script.runScript(  5800ad9342d52f1ba275fbcd , new CallbackSendScript() {\n        @Override\n        public void onScriptSended() {\n            Helper.showToast(context, R.id.balance_refreshed);\n        }\n        @Override\n        public void onScriptSendFailed(String errorCode, String errorMessage) {\n            Helper.showToast(context, R.id.can_refresh_balance);\n        }\n    });\n}  In this listing, the server-side code with 5800ad9342d52f1ba275fbcd ID is called using the  runScript(...)  method of the  Script  class. It recounts the goods in our storehouse and adjusts the storage costs, the balance and other characteristics.", 
            "title": "Device Shipping Info Screen."
        }
    ]
}